
OBrowneFinalProjectTetris.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007524  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ae8  080076d0  080076d0  000086d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091b8  080091b8  0000b024  2**0
                  CONTENTS
  4 .ARM          00000008  080091b8  080091b8  0000a1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091c0  080091c0  0000b024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091c0  080091c0  0000a1c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080091c4  080091c4  0000a1c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  080091c8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b024  2**0
                  CONTENTS
 10 .bss          00025aa4  20000024  20000024  0000b024  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025ac8  20025ac8  0000b024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b024  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011f36  00000000  00000000  0000b054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003141  00000000  00000000  0001cf8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001370  00000000  00000000  000200d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ee1  00000000  00000000  00021440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000270b5  00000000  00000000  00022321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019336  00000000  00000000  000493d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2bae  00000000  00000000  0006270c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001452ba  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005020  00000000  00000000  00145300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000086  00000000  00000000  0014a320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000024 	.word	0x20000024
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080076b8 	.word	0x080076b8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000028 	.word	0x20000028
 80001e8:	080076b8 	.word	0x080076b8

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80004e0:	f003 fdb0 	bl	8004044 <initialise_monitor_handles>
    LTCD__Init();
 80004e4:	f001 fdc2 	bl	800206c <LTCD__Init>
    LTCD_Layer_Init(0);
 80004e8:	2000      	movs	r0, #0
 80004ea:	f001 fd7f 	bl	8001fec <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 80004ee:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80004f2:	2000      	movs	r0, #0
 80004f4:	f001 feac 	bl	8002250 <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80004f8:	f002 fc5a 	bl	8002db0 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80004fc:	4b03      	ldr	r3, [pc, #12]	@ (800050c <ApplicationInit+0x30>)
 80004fe:	2201      	movs	r2, #1
 8000500:	719a      	strb	r2, [r3, #6]

	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
 8000502:	f000 f829 	bl	8000558 <LCDTouchScreenInterruptGPIOInit>
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	20000040 	.word	0x20000040

08000510 <startScreen>:

void LCD_Visual_Demo(void)
{
	visualDemo();
}
void startScreen(void){
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	title_screen();
 8000514:	f002 f80a 	bl	800252c <title_screen>

}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}

0800051c <endScreen>:
void endScreen(void){
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	end_screen();
 8000520:	f002 fb44 	bl	8002bac <end_screen>
}
 8000524:	bf00      	nop
 8000526:	bd80      	pop	{r7, pc}

08000528 <StartTime>:
void StartTime(void){
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	tim2Start();
 800052c:	f002 fd06 	bl	8002f3c <tim2Start>
}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}

08000534 <PrintTime>:
void StopTime (void){
	tim2Stop();
}
void PrintTime(uint32_t time_elaspsed){
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
	PrintTimeLCD(time_elaspsed);
 800053c:	6878      	ldr	r0, [r7, #4]
 800053e:	f001 ff59 	bl	80023f4 <PrintTimeLCD>
}
 8000542:	bf00      	nop
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}

0800054a <PrintDown>:
void PrintDown(void){
 800054a:	b580      	push	{r7, lr}
 800054c:	af00      	add	r7, sp, #0
	PrintDownLCD();
 800054e:	f001 ffd1 	bl	80024f4 <PrintDownLCD>
}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
	...

08000558 <LCDTouchScreenInterruptGPIOInit>:

// TouchScreen Interrupt
#if TOUCH_INTERRUPT_ENABLED == 1

void LCDTouchScreenInterruptGPIOInit(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b086      	sub	sp, #24
 800055c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef LCDConfig = {0};
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]
    LCDConfig.Pin = GPIO_PIN_15;
 800056c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000570:	607b      	str	r3, [r7, #4]
    LCDConfig.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000572:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000576:	60bb      	str	r3, [r7, #8]
    LCDConfig.Pull = GPIO_NOPULL;
 8000578:	2300      	movs	r3, #0
 800057a:	60fb      	str	r3, [r7, #12]
    LCDConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 800057c:	2302      	movs	r3, #2
 800057e:	613b      	str	r3, [r7, #16]
    
    // Clock enable
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000580:	2300      	movs	r3, #0
 8000582:	603b      	str	r3, [r7, #0]
 8000584:	4b0d      	ldr	r3, [pc, #52]	@ (80005bc <LCDTouchScreenInterruptGPIOInit+0x64>)
 8000586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000588:	4a0c      	ldr	r2, [pc, #48]	@ (80005bc <LCDTouchScreenInterruptGPIOInit+0x64>)
 800058a:	f043 0301 	orr.w	r3, r3, #1
 800058e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000590:	4b0a      	ldr	r3, [pc, #40]	@ (80005bc <LCDTouchScreenInterruptGPIOInit+0x64>)
 8000592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000594:	f003 0301 	and.w	r3, r3, #1
 8000598:	603b      	str	r3, [r7, #0]
 800059a:	683b      	ldr	r3, [r7, #0]

    // GPIO Init      
    HAL_GPIO_Init(GPIOA, &LCDConfig);
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	4619      	mov	r1, r3
 80005a0:	4807      	ldr	r0, [pc, #28]	@ (80005c0 <LCDTouchScreenInterruptGPIOInit+0x68>)
 80005a2:	f003 ffb1 	bl	8004508 <HAL_GPIO_Init>

    // Interrupt Configuration
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005a6:	2028      	movs	r0, #40	@ 0x28
 80005a8:	f003 ff5f 	bl	800446a <HAL_NVIC_EnableIRQ>

	LCDTouchIRQ.Line = EXTI_LINE_15;
 80005ac:	4b05      	ldr	r3, [pc, #20]	@ (80005c4 <LCDTouchScreenInterruptGPIOInit+0x6c>)
 80005ae:	4a06      	ldr	r2, [pc, #24]	@ (80005c8 <LCDTouchScreenInterruptGPIOInit+0x70>)
 80005b0:	601a      	str	r2, [r3, #0]

}
 80005b2:	bf00      	nop
 80005b4:	3718      	adds	r7, #24
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40023800 	.word	0x40023800
 80005c0:	40020000 	.word	0x40020000
 80005c4:	20000048 	.word	0x20000048
 80005c8:	0600000f 	.word	0x0600000f

080005cc <EXTI15_10_IRQHandler>:

static uint8_t statusFlag;
static uint32_t touchscreen_status = 0;

void EXTI15_10_IRQHandler()
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // May consider making this a universial interrupt guard
 80005d2:	2028      	movs	r0, #40	@ 0x28
 80005d4:	f003 ff57 	bl	8004486 <HAL_NVIC_DisableIRQ>
	bool isTouchDetected = false;
 80005d8:	2300      	movs	r3, #0
 80005da:	71fb      	strb	r3, [r7, #7]

	static uint32_t count;
	count = 0;
 80005dc:	4b31      	ldr	r3, [pc, #196]	@ (80006a4 <EXTI15_10_IRQHandler+0xd8>)
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
	while(count == 0){
 80005e2:	e006      	b.n	80005f2 <EXTI15_10_IRQHandler+0x26>
		count = STMPE811_Read(STMPE811_FIFO_SIZE);
 80005e4:	204c      	movs	r0, #76	@ 0x4c
 80005e6:	f003 fbc4 	bl	8003d72 <STMPE811_Read>
 80005ea:	4603      	mov	r3, r0
 80005ec:	461a      	mov	r2, r3
 80005ee:	4b2d      	ldr	r3, [pc, #180]	@ (80006a4 <EXTI15_10_IRQHandler+0xd8>)
 80005f0:	601a      	str	r2, [r3, #0]
	while(count == 0){
 80005f2:	4b2c      	ldr	r3, [pc, #176]	@ (80006a4 <EXTI15_10_IRQHandler+0xd8>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d0f4      	beq.n	80005e4 <EXTI15_10_IRQHandler+0x18>
	}

	// Disable touch interrupt bit on the STMPE811
	uint8_t currentIRQEnables = ReadRegisterFromTouchModule(STMPE811_INT_EN);
 80005fa:	200a      	movs	r0, #10
 80005fc:	f002 fbe3 	bl	8002dc6 <ReadRegisterFromTouchModule>
 8000600:	4603      	mov	r3, r0
 8000602:	71bb      	strb	r3, [r7, #6]
	WriteDataToTouchModule(STMPE811_INT_EN, 0x00);
 8000604:	2100      	movs	r1, #0
 8000606:	200a      	movs	r0, #10
 8000608:	f002 fbeb 	bl	8002de2 <WriteDataToTouchModule>

	// Clear the interrupt bit in the STMPE811
	statusFlag = ReadRegisterFromTouchModule(STMPE811_INT_STA);
 800060c:	200b      	movs	r0, #11
 800060e:	f002 fbda 	bl	8002dc6 <ReadRegisterFromTouchModule>
 8000612:	4603      	mov	r3, r0
 8000614:	461a      	mov	r2, r3
 8000616:	4b24      	ldr	r3, [pc, #144]	@ (80006a8 <EXTI15_10_IRQHandler+0xdc>)
 8000618:	701a      	strb	r2, [r3, #0]
	uint8_t clearIRQData = (statusFlag | TOUCH_DETECTED_IRQ_STATUS_BIT); // Write one to clear bit
 800061a:	4b23      	ldr	r3, [pc, #140]	@ (80006a8 <EXTI15_10_IRQHandler+0xdc>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	717b      	strb	r3, [r7, #5]
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000624:	797b      	ldrb	r3, [r7, #5]
 8000626:	4619      	mov	r1, r3
 8000628:	200b      	movs	r0, #11
 800062a:	f002 fbda 	bl	8002de2 <WriteDataToTouchModule>
	
	uint8_t ctrlReg = ReadRegisterFromTouchModule(STMPE811_TSC_CTRL);
 800062e:	2040      	movs	r0, #64	@ 0x40
 8000630:	f002 fbc9 	bl	8002dc6 <ReadRegisterFromTouchModule>
 8000634:	4603      	mov	r3, r0
 8000636:	713b      	strb	r3, [r7, #4]
	if (ctrlReg & 0x80)
 8000638:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800063c:	2b00      	cmp	r3, #0
 800063e:	da01      	bge.n	8000644 <EXTI15_10_IRQHandler+0x78>
	{
		isTouchDetected = true;
 8000640:	2301      	movs	r3, #1
 8000642:	71fb      	strb	r3, [r7, #7]
	}

	// Determine if it is pressed or unpressed
	if(isTouchDetected) // Touch has been detected
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d00b      	beq.n	8000662 <EXTI15_10_IRQHandler+0x96>
//		// May need to do numerous retries?
//		DetermineTouchPosition(&StaticTouchData);
//		/* Touch valid */
//		printf("\nX: %03d\nY: %03d \n", StaticTouchData.x, StaticTouchData.y);
//		LCD_Clear(0, LCD_COLOR_RED);
		if(touchscreen_status == 0){
 800064a:	4b18      	ldr	r3, [pc, #96]	@ (80006ac <EXTI15_10_IRQHandler+0xe0>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d107      	bne.n	8000662 <EXTI15_10_IRQHandler+0x96>
		addSchedulerEvent(GameScreen);
 8000652:	2010      	movs	r0, #16
 8000654:	f002 fc22 	bl	8002e9c <addSchedulerEvent>
		touchscreen_status++;
 8000658:	4b14      	ldr	r3, [pc, #80]	@ (80006ac <EXTI15_10_IRQHandler+0xe0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	3301      	adds	r3, #1
 800065e:	4a13      	ldr	r2, [pc, #76]	@ (80006ac <EXTI15_10_IRQHandler+0xe0>)
 8000660:	6013      	str	r3, [r2, #0]
		/* Touch not pressed */
//		printf("\nNot pressed \n");
//		LCD_Clear(0, LCD_COLOR_GREEN);
	}

	STMPE811_Write(STMPE811_FIFO_STA, 0x01);
 8000662:	2101      	movs	r1, #1
 8000664:	204b      	movs	r0, #75	@ 0x4b
 8000666:	f003 fb95 	bl	8003d94 <STMPE811_Write>
	STMPE811_Write(STMPE811_FIFO_STA, 0x00);
 800066a:	2100      	movs	r1, #0
 800066c:	204b      	movs	r0, #75	@ 0x4b
 800066e:	f003 fb91 	bl	8003d94 <STMPE811_Write>

	// Re-enable IRQs
    WriteDataToTouchModule(STMPE811_INT_EN, currentIRQEnables);
 8000672:	79bb      	ldrb	r3, [r7, #6]
 8000674:	4619      	mov	r1, r3
 8000676:	200a      	movs	r0, #10
 8000678:	f002 fbb3 	bl	8002de2 <WriteDataToTouchModule>
	HAL_EXTI_ClearPending(&LCDTouchIRQ, EXTI_TRIGGER_RISING_FALLING);
 800067c:	2103      	movs	r1, #3
 800067e:	480c      	ldr	r0, [pc, #48]	@ (80006b0 <EXTI15_10_IRQHandler+0xe4>)
 8000680:	f003 ff2a 	bl	80044d8 <HAL_EXTI_ClearPending>

	HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8000684:	2028      	movs	r0, #40	@ 0x28
 8000686:	f003 ff18 	bl	80044ba <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800068a:	2028      	movs	r0, #40	@ 0x28
 800068c:	f003 feed 	bl	800446a <HAL_NVIC_EnableIRQ>

	//Potential ERRATA? Clearing IRQ bit again due to an IRQ being triggered DURING the handling of this IRQ..
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000690:	797b      	ldrb	r3, [r7, #5]
 8000692:	4619      	mov	r1, r3
 8000694:	200b      	movs	r0, #11
 8000696:	f002 fba4 	bl	8002de2 <WriteDataToTouchModule>

}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000058 	.word	0x20000058
 80006a8:	20000050 	.word	0x20000050
 80006ac:	20000054 	.word	0x20000054
 80006b0:	20000048 	.word	0x20000048

080006b4 <newCurrBlock>:
		board[i][0] = Occupied;
		i++;
	}
}
struct currentBlock *currBlock;
void newCurrBlock(){
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	currBlock->type = (BlockType)get_rand_num();
 80006b8:	f002 fbba 	bl	8002e30 <get_rand_num>
 80006bc:	4602      	mov	r2, r0
 80006be:	4bae      	ldr	r3, [pc, #696]	@ (8000978 <newCurrBlock+0x2c4>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	b2d2      	uxtb	r2, r2
 80006c4:	f883 2020 	strb.w	r2, [r3, #32]
	currBlock->state = state1;
 80006c8:	4bab      	ldr	r3, [pc, #684]	@ (8000978 <newCurrBlock+0x2c4>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2200      	movs	r2, #0
 80006ce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	switch(get_rand_num()){
 80006d2:	f002 fbad 	bl	8002e30 <get_rand_num>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b06      	cmp	r3, #6
 80006da:	f200 81c9 	bhi.w	8000a70 <newCurrBlock+0x3bc>
 80006de:	a201      	add	r2, pc, #4	@ (adr r2, 80006e4 <newCurrBlock+0x30>)
 80006e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e4:	08000701 	.word	0x08000701
 80006e8:	0800077f 	.word	0x0800077f
 80006ec:	080007fd 	.word	0x080007fd
 80006f0:	0800087b 	.word	0x0800087b
 80006f4:	080008f9 	.word	0x080008f9
 80006f8:	0800097d 	.word	0x0800097d
 80006fc:	080009f3 	.word	0x080009f3
		case line:{
			currBlock->BlockOne[1] = 5;
 8000700:	4b9d      	ldr	r3, [pc, #628]	@ (8000978 <newCurrBlock+0x2c4>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2205      	movs	r2, #5
 8000706:	605a      	str	r2, [r3, #4]
			currBlock->BlockOne[2] = 4;
 8000708:	4b9b      	ldr	r3, [pc, #620]	@ (8000978 <newCurrBlock+0x2c4>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2204      	movs	r2, #4
 800070e:	609a      	str	r2, [r3, #8]
			LCD_Draw_Box(110,100,20,LCD_COLOR_CYAN);
 8000710:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000714:	2214      	movs	r2, #20
 8000716:	2164      	movs	r1, #100	@ 0x64
 8000718:	206e      	movs	r0, #110	@ 0x6e
 800071a:	f001 fd71 	bl	8002200 <LCD_Draw_Box>
			currBlock->BlockTwo[1] = 5;
 800071e:	4b96      	ldr	r3, [pc, #600]	@ (8000978 <newCurrBlock+0x2c4>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	2205      	movs	r2, #5
 8000724:	60da      	str	r2, [r3, #12]
			currBlock->BlockTwo[2] = 3;
 8000726:	4b94      	ldr	r3, [pc, #592]	@ (8000978 <newCurrBlock+0x2c4>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	2203      	movs	r2, #3
 800072c:	611a      	str	r2, [r3, #16]
			LCD_Draw_Box(110,80,20,LCD_COLOR_CYAN);
 800072e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000732:	2214      	movs	r2, #20
 8000734:	2150      	movs	r1, #80	@ 0x50
 8000736:	206e      	movs	r0, #110	@ 0x6e
 8000738:	f001 fd62 	bl	8002200 <LCD_Draw_Box>
			currBlock->BlockThree[1] = 5;
 800073c:	4b8e      	ldr	r3, [pc, #568]	@ (8000978 <newCurrBlock+0x2c4>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2205      	movs	r2, #5
 8000742:	615a      	str	r2, [r3, #20]
			currBlock->BlockThree[2] = 2;
 8000744:	4b8c      	ldr	r3, [pc, #560]	@ (8000978 <newCurrBlock+0x2c4>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2202      	movs	r2, #2
 800074a:	619a      	str	r2, [r3, #24]
			LCD_Draw_Box(110,60,20,LCD_COLOR_CYAN);
 800074c:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000750:	2214      	movs	r2, #20
 8000752:	213c      	movs	r1, #60	@ 0x3c
 8000754:	206e      	movs	r0, #110	@ 0x6e
 8000756:	f001 fd53 	bl	8002200 <LCD_Draw_Box>
			currBlock->BlockFour[1] = 5;
 800075a:	4b87      	ldr	r3, [pc, #540]	@ (8000978 <newCurrBlock+0x2c4>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2205      	movs	r2, #5
 8000760:	61da      	str	r2, [r3, #28]
			currBlock->BlockFour[2] = 1;
 8000762:	4b85      	ldr	r3, [pc, #532]	@ (8000978 <newCurrBlock+0x2c4>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	2201      	movs	r2, #1
 8000768:	621a      	str	r2, [r3, #32]
			LCD_Draw_Box(110,40,20,LCD_COLOR_CYAN);
 800076a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800076e:	2214      	movs	r2, #20
 8000770:	2128      	movs	r1, #40	@ 0x28
 8000772:	206e      	movs	r0, #110	@ 0x6e
 8000774:	f001 fd44 	bl	8002200 <LCD_Draw_Box>
			grid();
 8000778:	f002 f9bc 	bl	8002af4 <grid>
		}
			break;
 800077c:	e178      	b.n	8000a70 <newCurrBlock+0x3bc>
		case Square:{
			currBlock->BlockOne[1] = 5;
 800077e:	4b7e      	ldr	r3, [pc, #504]	@ (8000978 <newCurrBlock+0x2c4>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	2205      	movs	r2, #5
 8000784:	605a      	str	r2, [r3, #4]
			currBlock->BlockOne[2] = 0;
 8000786:	4b7c      	ldr	r3, [pc, #496]	@ (8000978 <newCurrBlock+0x2c4>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
			LCD_Draw_Box(110,40,20,LCD_COLOR_RED);
 800078e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000792:	2214      	movs	r2, #20
 8000794:	2128      	movs	r1, #40	@ 0x28
 8000796:	206e      	movs	r0, #110	@ 0x6e
 8000798:	f001 fd32 	bl	8002200 <LCD_Draw_Box>
			currBlock->BlockTwo[1] = 5;
 800079c:	4b76      	ldr	r3, [pc, #472]	@ (8000978 <newCurrBlock+0x2c4>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2205      	movs	r2, #5
 80007a2:	60da      	str	r2, [r3, #12]
			currBlock->BlockTwo[2] = 1;
 80007a4:	4b74      	ldr	r3, [pc, #464]	@ (8000978 <newCurrBlock+0x2c4>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2201      	movs	r2, #1
 80007aa:	611a      	str	r2, [r3, #16]
			LCD_Draw_Box(110,60,20,LCD_COLOR_RED);
 80007ac:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80007b0:	2214      	movs	r2, #20
 80007b2:	213c      	movs	r1, #60	@ 0x3c
 80007b4:	206e      	movs	r0, #110	@ 0x6e
 80007b6:	f001 fd23 	bl	8002200 <LCD_Draw_Box>
			currBlock->BlockThree[1] = 4;
 80007ba:	4b6f      	ldr	r3, [pc, #444]	@ (8000978 <newCurrBlock+0x2c4>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	2204      	movs	r2, #4
 80007c0:	615a      	str	r2, [r3, #20]
			currBlock->BlockThree[2] = 0;
 80007c2:	4b6d      	ldr	r3, [pc, #436]	@ (8000978 <newCurrBlock+0x2c4>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	2200      	movs	r2, #0
 80007c8:	619a      	str	r2, [r3, #24]
			LCD_Draw_Box(90,40,20,LCD_COLOR_RED);
 80007ca:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80007ce:	2214      	movs	r2, #20
 80007d0:	2128      	movs	r1, #40	@ 0x28
 80007d2:	205a      	movs	r0, #90	@ 0x5a
 80007d4:	f001 fd14 	bl	8002200 <LCD_Draw_Box>
			currBlock->BlockFour[1] = 4;
 80007d8:	4b67      	ldr	r3, [pc, #412]	@ (8000978 <newCurrBlock+0x2c4>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2204      	movs	r2, #4
 80007de:	61da      	str	r2, [r3, #28]
			currBlock->BlockFour[2] = 1;
 80007e0:	4b65      	ldr	r3, [pc, #404]	@ (8000978 <newCurrBlock+0x2c4>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2201      	movs	r2, #1
 80007e6:	621a      	str	r2, [r3, #32]
			LCD_Draw_Box(90,60,20,LCD_COLOR_RED);
 80007e8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80007ec:	2214      	movs	r2, #20
 80007ee:	213c      	movs	r1, #60	@ 0x3c
 80007f0:	205a      	movs	r0, #90	@ 0x5a
 80007f2:	f001 fd05 	bl	8002200 <LCD_Draw_Box>
			grid();
 80007f6:	f002 f97d 	bl	8002af4 <grid>
			break;
 80007fa:	e139      	b.n	8000a70 <newCurrBlock+0x3bc>
		}
		case LeftZigZag:{
			currBlock->BlockOne[1] = 5;
 80007fc:	4b5e      	ldr	r3, [pc, #376]	@ (8000978 <newCurrBlock+0x2c4>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2205      	movs	r2, #5
 8000802:	605a      	str	r2, [r3, #4]
			currBlock->BlockOne[2] = 0;
 8000804:	4b5c      	ldr	r3, [pc, #368]	@ (8000978 <newCurrBlock+0x2c4>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
			LCD_Draw_Box(110,40,20,LCD_COLOR_MAGENTA);
 800080c:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000810:	2214      	movs	r2, #20
 8000812:	2128      	movs	r1, #40	@ 0x28
 8000814:	206e      	movs	r0, #110	@ 0x6e
 8000816:	f001 fcf3 	bl	8002200 <LCD_Draw_Box>
			currBlock->BlockTwo[1] = 5;
 800081a:	4b57      	ldr	r3, [pc, #348]	@ (8000978 <newCurrBlock+0x2c4>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	2205      	movs	r2, #5
 8000820:	60da      	str	r2, [r3, #12]
			currBlock->BlockTwo[2] = 1;
 8000822:	4b55      	ldr	r3, [pc, #340]	@ (8000978 <newCurrBlock+0x2c4>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	2201      	movs	r2, #1
 8000828:	611a      	str	r2, [r3, #16]
			LCD_Draw_Box(110,60,20,LCD_COLOR_MAGENTA);
 800082a:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800082e:	2214      	movs	r2, #20
 8000830:	213c      	movs	r1, #60	@ 0x3c
 8000832:	206e      	movs	r0, #110	@ 0x6e
 8000834:	f001 fce4 	bl	8002200 <LCD_Draw_Box>
			currBlock->BlockThree[1] = 4;
 8000838:	4b4f      	ldr	r3, [pc, #316]	@ (8000978 <newCurrBlock+0x2c4>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2204      	movs	r2, #4
 800083e:	615a      	str	r2, [r3, #20]
			currBlock->BlockThree[2] = 0;
 8000840:	4b4d      	ldr	r3, [pc, #308]	@ (8000978 <newCurrBlock+0x2c4>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
			LCD_Draw_Box(90,40,20,LCD_COLOR_MAGENTA);
 8000848:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800084c:	2214      	movs	r2, #20
 800084e:	2128      	movs	r1, #40	@ 0x28
 8000850:	205a      	movs	r0, #90	@ 0x5a
 8000852:	f001 fcd5 	bl	8002200 <LCD_Draw_Box>
			currBlock->BlockFour[1] = 4;
 8000856:	4b48      	ldr	r3, [pc, #288]	@ (8000978 <newCurrBlock+0x2c4>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2204      	movs	r2, #4
 800085c:	61da      	str	r2, [r3, #28]
			currBlock->BlockFour[2] = 1;
 800085e:	4b46      	ldr	r3, [pc, #280]	@ (8000978 <newCurrBlock+0x2c4>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	2201      	movs	r2, #1
 8000864:	621a      	str	r2, [r3, #32]
			LCD_Draw_Box(90,60,20,LCD_COLOR_MAGENTA);
 8000866:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800086a:	2214      	movs	r2, #20
 800086c:	213c      	movs	r1, #60	@ 0x3c
 800086e:	205a      	movs	r0, #90	@ 0x5a
 8000870:	f001 fcc6 	bl	8002200 <LCD_Draw_Box>
			grid();
 8000874:	f002 f93e 	bl	8002af4 <grid>
			break;
 8000878:	e0fa      	b.n	8000a70 <newCurrBlock+0x3bc>

		}
		case RightZigZag:{
			currBlock->BlockOne[1] = 5;
 800087a:	4b3f      	ldr	r3, [pc, #252]	@ (8000978 <newCurrBlock+0x2c4>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	2205      	movs	r2, #5
 8000880:	605a      	str	r2, [r3, #4]
			currBlock->BlockOne[2] = 0;
 8000882:	4b3d      	ldr	r3, [pc, #244]	@ (8000978 <newCurrBlock+0x2c4>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
			LCD_Draw_Box(110,40,20,LCD_COLOR_YELLOW);
 800088a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800088e:	2214      	movs	r2, #20
 8000890:	2128      	movs	r1, #40	@ 0x28
 8000892:	206e      	movs	r0, #110	@ 0x6e
 8000894:	f001 fcb4 	bl	8002200 <LCD_Draw_Box>
			currBlock->BlockTwo[1] = 5;
 8000898:	4b37      	ldr	r3, [pc, #220]	@ (8000978 <newCurrBlock+0x2c4>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2205      	movs	r2, #5
 800089e:	60da      	str	r2, [r3, #12]
			currBlock->BlockTwo[2] = 1;
 80008a0:	4b35      	ldr	r3, [pc, #212]	@ (8000978 <newCurrBlock+0x2c4>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2201      	movs	r2, #1
 80008a6:	611a      	str	r2, [r3, #16]
			LCD_Draw_Box(110,60,20,LCD_COLOR_YELLOW);
 80008a8:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80008ac:	2214      	movs	r2, #20
 80008ae:	213c      	movs	r1, #60	@ 0x3c
 80008b0:	206e      	movs	r0, #110	@ 0x6e
 80008b2:	f001 fca5 	bl	8002200 <LCD_Draw_Box>
			currBlock->BlockThree[1] = 4;
 80008b6:	4b30      	ldr	r3, [pc, #192]	@ (8000978 <newCurrBlock+0x2c4>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2204      	movs	r2, #4
 80008bc:	615a      	str	r2, [r3, #20]
			currBlock->BlockThree[2] = 0;
 80008be:	4b2e      	ldr	r3, [pc, #184]	@ (8000978 <newCurrBlock+0x2c4>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2200      	movs	r2, #0
 80008c4:	619a      	str	r2, [r3, #24]
			LCD_Draw_Box(90,40,20,LCD_COLOR_YELLOW);
 80008c6:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80008ca:	2214      	movs	r2, #20
 80008cc:	2128      	movs	r1, #40	@ 0x28
 80008ce:	205a      	movs	r0, #90	@ 0x5a
 80008d0:	f001 fc96 	bl	8002200 <LCD_Draw_Box>
			currBlock->BlockFour[1] = 4;
 80008d4:	4b28      	ldr	r3, [pc, #160]	@ (8000978 <newCurrBlock+0x2c4>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2204      	movs	r2, #4
 80008da:	61da      	str	r2, [r3, #28]
			currBlock->BlockFour[2] = 1;
 80008dc:	4b26      	ldr	r3, [pc, #152]	@ (8000978 <newCurrBlock+0x2c4>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2201      	movs	r2, #1
 80008e2:	621a      	str	r2, [r3, #32]
			LCD_Draw_Box(90,60,20,LCD_COLOR_YELLOW);
 80008e4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80008e8:	2214      	movs	r2, #20
 80008ea:	213c      	movs	r1, #60	@ 0x3c
 80008ec:	205a      	movs	r0, #90	@ 0x5a
 80008ee:	f001 fc87 	bl	8002200 <LCD_Draw_Box>
			grid();
 80008f2:	f002 f8ff 	bl	8002af4 <grid>
			break;
 80008f6:	e0bb      	b.n	8000a70 <newCurrBlock+0x3bc>
		}
		case RightL:{
			currBlock->BlockOne[1] = 5;
 80008f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000978 <newCurrBlock+0x2c4>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2205      	movs	r2, #5
 80008fe:	605a      	str	r2, [r3, #4]
			currBlock->BlockOne[2] = 4;
 8000900:	4b1d      	ldr	r3, [pc, #116]	@ (8000978 <newCurrBlock+0x2c4>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2204      	movs	r2, #4
 8000906:	609a      	str	r2, [r3, #8]
			LCD_Draw_Box(130,80,20,LCD_COLOR_GREEN);
 8000908:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800090c:	2214      	movs	r2, #20
 800090e:	2150      	movs	r1, #80	@ 0x50
 8000910:	2082      	movs	r0, #130	@ 0x82
 8000912:	f001 fc75 	bl	8002200 <LCD_Draw_Box>
			currBlock->BlockTwo[1] = 5;
 8000916:	4b18      	ldr	r3, [pc, #96]	@ (8000978 <newCurrBlock+0x2c4>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2205      	movs	r2, #5
 800091c:	60da      	str	r2, [r3, #12]
			currBlock->BlockTwo[2] = 3;
 800091e:	4b16      	ldr	r3, [pc, #88]	@ (8000978 <newCurrBlock+0x2c4>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	2203      	movs	r2, #3
 8000924:	611a      	str	r2, [r3, #16]
			LCD_Draw_Box(110,80,20,LCD_COLOR_GREEN);
 8000926:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800092a:	2214      	movs	r2, #20
 800092c:	2150      	movs	r1, #80	@ 0x50
 800092e:	206e      	movs	r0, #110	@ 0x6e
 8000930:	f001 fc66 	bl	8002200 <LCD_Draw_Box>
			currBlock->BlockThree[1] = 5;
 8000934:	4b10      	ldr	r3, [pc, #64]	@ (8000978 <newCurrBlock+0x2c4>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2205      	movs	r2, #5
 800093a:	615a      	str	r2, [r3, #20]
			currBlock->BlockThree[2] = 2;
 800093c:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <newCurrBlock+0x2c4>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2202      	movs	r2, #2
 8000942:	619a      	str	r2, [r3, #24]
			LCD_Draw_Box(110,60,20,LCD_COLOR_GREEN);
 8000944:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000948:	2214      	movs	r2, #20
 800094a:	213c      	movs	r1, #60	@ 0x3c
 800094c:	206e      	movs	r0, #110	@ 0x6e
 800094e:	f001 fc57 	bl	8002200 <LCD_Draw_Box>
			currBlock->BlockFour[1] = 5;
 8000952:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <newCurrBlock+0x2c4>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2205      	movs	r2, #5
 8000958:	61da      	str	r2, [r3, #28]
			currBlock->BlockFour[2] = 1;
 800095a:	4b07      	ldr	r3, [pc, #28]	@ (8000978 <newCurrBlock+0x2c4>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	2201      	movs	r2, #1
 8000960:	621a      	str	r2, [r3, #32]
			LCD_Draw_Box(110,40,20,LCD_COLOR_GREEN);
 8000962:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000966:	2214      	movs	r2, #20
 8000968:	2128      	movs	r1, #40	@ 0x28
 800096a:	206e      	movs	r0, #110	@ 0x6e
 800096c:	f001 fc48 	bl	8002200 <LCD_Draw_Box>
			grid();
 8000970:	f002 f8c0 	bl	8002af4 <grid>
			break;
 8000974:	e07c      	b.n	8000a70 <newCurrBlock+0x3bc>
 8000976:	bf00      	nop
 8000978:	200000d4 	.word	0x200000d4
		}
		case LeftL:{
			currBlock->BlockOne[1] = 5;
 800097c:	4b3d      	ldr	r3, [pc, #244]	@ (8000a74 <newCurrBlock+0x3c0>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2205      	movs	r2, #5
 8000982:	605a      	str	r2, [r3, #4]
			currBlock->BlockOne[2] = 4;
 8000984:	4b3b      	ldr	r3, [pc, #236]	@ (8000a74 <newCurrBlock+0x3c0>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2204      	movs	r2, #4
 800098a:	609a      	str	r2, [r3, #8]
			LCD_Draw_Box(90,80,20,LCD_COLOR_BLUE);
 800098c:	231f      	movs	r3, #31
 800098e:	2214      	movs	r2, #20
 8000990:	2150      	movs	r1, #80	@ 0x50
 8000992:	205a      	movs	r0, #90	@ 0x5a
 8000994:	f001 fc34 	bl	8002200 <LCD_Draw_Box>
			currBlock->BlockTwo[1] = 5;
 8000998:	4b36      	ldr	r3, [pc, #216]	@ (8000a74 <newCurrBlock+0x3c0>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2205      	movs	r2, #5
 800099e:	60da      	str	r2, [r3, #12]
			currBlock->BlockTwo[2] = 3;
 80009a0:	4b34      	ldr	r3, [pc, #208]	@ (8000a74 <newCurrBlock+0x3c0>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2203      	movs	r2, #3
 80009a6:	611a      	str	r2, [r3, #16]
			LCD_Draw_Box(110,80,20,LCD_COLOR_BLUE);
 80009a8:	231f      	movs	r3, #31
 80009aa:	2214      	movs	r2, #20
 80009ac:	2150      	movs	r1, #80	@ 0x50
 80009ae:	206e      	movs	r0, #110	@ 0x6e
 80009b0:	f001 fc26 	bl	8002200 <LCD_Draw_Box>
			currBlock->BlockThree[1] = 5;
 80009b4:	4b2f      	ldr	r3, [pc, #188]	@ (8000a74 <newCurrBlock+0x3c0>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2205      	movs	r2, #5
 80009ba:	615a      	str	r2, [r3, #20]
			currBlock->BlockThree[2] = 2;
 80009bc:	4b2d      	ldr	r3, [pc, #180]	@ (8000a74 <newCurrBlock+0x3c0>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2202      	movs	r2, #2
 80009c2:	619a      	str	r2, [r3, #24]
			LCD_Draw_Box(110,60,20,LCD_COLOR_BLUE);
 80009c4:	231f      	movs	r3, #31
 80009c6:	2214      	movs	r2, #20
 80009c8:	213c      	movs	r1, #60	@ 0x3c
 80009ca:	206e      	movs	r0, #110	@ 0x6e
 80009cc:	f001 fc18 	bl	8002200 <LCD_Draw_Box>
			currBlock->BlockFour[1] = 5;
 80009d0:	4b28      	ldr	r3, [pc, #160]	@ (8000a74 <newCurrBlock+0x3c0>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2205      	movs	r2, #5
 80009d6:	61da      	str	r2, [r3, #28]
			currBlock->BlockFour[2] = 1;
 80009d8:	4b26      	ldr	r3, [pc, #152]	@ (8000a74 <newCurrBlock+0x3c0>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2201      	movs	r2, #1
 80009de:	621a      	str	r2, [r3, #32]
			LCD_Draw_Box(110,40,20,LCD_COLOR_BLUE);
 80009e0:	231f      	movs	r3, #31
 80009e2:	2214      	movs	r2, #20
 80009e4:	2128      	movs	r1, #40	@ 0x28
 80009e6:	206e      	movs	r0, #110	@ 0x6e
 80009e8:	f001 fc0a 	bl	8002200 <LCD_Draw_Box>
			grid();
 80009ec:	f002 f882 	bl	8002af4 <grid>
			break;
 80009f0:	e03e      	b.n	8000a70 <newCurrBlock+0x3bc>
		}
		case smollPP:{
			currBlock->BlockOne[1] = 5;
 80009f2:	4b20      	ldr	r3, [pc, #128]	@ (8000a74 <newCurrBlock+0x3c0>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2205      	movs	r2, #5
 80009f8:	605a      	str	r2, [r3, #4]
			currBlock->BlockOne[2] = 0;
 80009fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000a74 <newCurrBlock+0x3c0>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
			LCD_Draw_Box(110,40,20,LCD_COLOR_RED);
 8000a02:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000a06:	2214      	movs	r2, #20
 8000a08:	2128      	movs	r1, #40	@ 0x28
 8000a0a:	206e      	movs	r0, #110	@ 0x6e
 8000a0c:	f001 fbf8 	bl	8002200 <LCD_Draw_Box>
			currBlock->BlockTwo[1] = 5;
 8000a10:	4b18      	ldr	r3, [pc, #96]	@ (8000a74 <newCurrBlock+0x3c0>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2205      	movs	r2, #5
 8000a16:	60da      	str	r2, [r3, #12]
			currBlock->BlockTwo[2] = 1;
 8000a18:	4b16      	ldr	r3, [pc, #88]	@ (8000a74 <newCurrBlock+0x3c0>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	611a      	str	r2, [r3, #16]
			LCD_Draw_Box(110,60,20,LCD_COLOR_RED);
 8000a20:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000a24:	2214      	movs	r2, #20
 8000a26:	213c      	movs	r1, #60	@ 0x3c
 8000a28:	206e      	movs	r0, #110	@ 0x6e
 8000a2a:	f001 fbe9 	bl	8002200 <LCD_Draw_Box>
			currBlock->BlockThree[1] = 6;
 8000a2e:	4b11      	ldr	r3, [pc, #68]	@ (8000a74 <newCurrBlock+0x3c0>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2206      	movs	r2, #6
 8000a34:	615a      	str	r2, [r3, #20]
			currBlock->BlockThree[2] = 1;
 8000a36:	4b0f      	ldr	r3, [pc, #60]	@ (8000a74 <newCurrBlock+0x3c0>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	619a      	str	r2, [r3, #24]
			LCD_Draw_Box(130,60,20,LCD_COLOR_RED);
 8000a3e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000a42:	2214      	movs	r2, #20
 8000a44:	213c      	movs	r1, #60	@ 0x3c
 8000a46:	2082      	movs	r0, #130	@ 0x82
 8000a48:	f001 fbda 	bl	8002200 <LCD_Draw_Box>
			currBlock->BlockFour[1] = 4;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <newCurrBlock+0x3c0>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2204      	movs	r2, #4
 8000a52:	61da      	str	r2, [r3, #28]
			currBlock->BlockFour[2] = 1;
 8000a54:	4b07      	ldr	r3, [pc, #28]	@ (8000a74 <newCurrBlock+0x3c0>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2201      	movs	r2, #1
 8000a5a:	621a      	str	r2, [r3, #32]
			LCD_Draw_Box(90,60,20,LCD_COLOR_RED);
 8000a5c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000a60:	2214      	movs	r2, #20
 8000a62:	213c      	movs	r1, #60	@ 0x3c
 8000a64:	205a      	movs	r0, #90	@ 0x5a
 8000a66:	f001 fbcb 	bl	8002200 <LCD_Draw_Box>
			grid();
 8000a6a:	f002 f843 	bl	8002af4 <grid>
			break;
 8000a6e:	bf00      	nop
		}

	}
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	200000d4 	.word	0x200000d4

08000a78 <currBlock_Rotate>:
		currBlock->BlockFour[1] = testVar[1];
		currBlock->BlockFour[2] = testVar[2];
	}

}
void currBlock_Rotate(void){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
	if(currBlock_verifyRotate()){
 8000a7e:	f000 fc5f 	bl	8001340 <currBlock_verifyRotate>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	f000 8454 	beq.w	8001332 <currBlock_Rotate+0x8ba>
		int testVar[2];
		switch(currBlock->type){
 8000a8a:	4b7e      	ldr	r3, [pc, #504]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a92:	2b06      	cmp	r3, #6
 8000a94:	f200 844d 	bhi.w	8001332 <currBlock_Rotate+0x8ba>
 8000a98:	a201      	add	r2, pc, #4	@ (adr r2, 8000aa0 <currBlock_Rotate+0x28>)
 8000a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a9e:	bf00      	nop
 8000aa0:	08000abd 	.word	0x08000abd
 8000aa4:	0800132d 	.word	0x0800132d
 8000aa8:	08000bc1 	.word	0x08000bc1
 8000aac:	08000c73 	.word	0x08000c73
 8000ab0:	08000d29 	.word	0x08000d29
 8000ab4:	08000f2d 	.word	0x08000f2d
 8000ab8:	08001133 	.word	0x08001133
		case line:
			switch(currBlock->state){// one block doest move
 8000abc:	4b71      	ldr	r3, [pc, #452]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d002      	beq.n	8000ace <currBlock_Rotate+0x56>
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d03c      	beq.n	8000b46 <currBlock_Rotate+0xce>
				currBlock->BlockThree[2] = testVar[2];

				currBlock->state = state1;
				break;
			default:
				break;
 8000acc:	e077      	b.n	8000bbe <currBlock_Rotate+0x146>
				testVar[1] = currBlock->BlockOne[1] + 3;
 8000ace:	4b6d      	ldr	r3, [pc, #436]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	3303      	adds	r3, #3
 8000ad6:	607b      	str	r3, [r7, #4]
				testVar[2] = currBlock->BlockOne[2] - 3;
 8000ad8:	4b6a      	ldr	r3, [pc, #424]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	689b      	ldr	r3, [r3, #8]
 8000ade:	3b03      	subs	r3, #3
 8000ae0:	60bb      	str	r3, [r7, #8]
				currBlock->BlockOne[1] = testVar[1];
 8000ae2:	4b68      	ldr	r3, [pc, #416]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	687a      	ldr	r2, [r7, #4]
 8000ae8:	605a      	str	r2, [r3, #4]
				currBlock->BlockOne[2] = testVar[2];
 8000aea:	4b66      	ldr	r3, [pc, #408]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	68ba      	ldr	r2, [r7, #8]
 8000af0:	609a      	str	r2, [r3, #8]
				testVar[1] = currBlock->BlockTwo[1] + 2;
 8000af2:	4b64      	ldr	r3, [pc, #400]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	3302      	adds	r3, #2
 8000afa:	607b      	str	r3, [r7, #4]
				testVar[2] = currBlock->BlockTwo[2] - 2;
 8000afc:	4b61      	ldr	r3, [pc, #388]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	691b      	ldr	r3, [r3, #16]
 8000b02:	3b02      	subs	r3, #2
 8000b04:	60bb      	str	r3, [r7, #8]
				currBlock->BlockTwo[1] = testVar[1];
 8000b06:	4b5f      	ldr	r3, [pc, #380]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	60da      	str	r2, [r3, #12]
				currBlock->BlockTwo[2] = testVar[2];
 8000b0e:	4b5d      	ldr	r3, [pc, #372]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	611a      	str	r2, [r3, #16]
				testVar[1] = currBlock->BlockThree[1] + 1;
 8000b16:	4b5b      	ldr	r3, [pc, #364]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	695b      	ldr	r3, [r3, #20]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	607b      	str	r3, [r7, #4]
				testVar[2] = currBlock->BlockThree[2] - 1;
 8000b20:	4b58      	ldr	r3, [pc, #352]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	699b      	ldr	r3, [r3, #24]
 8000b26:	3b01      	subs	r3, #1
 8000b28:	60bb      	str	r3, [r7, #8]
				currBlock->BlockThree[1] = testVar[1];
 8000b2a:	4b56      	ldr	r3, [pc, #344]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	615a      	str	r2, [r3, #20]
				currBlock->BlockThree[2] = testVar[2];
 8000b32:	4b54      	ldr	r3, [pc, #336]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	68ba      	ldr	r2, [r7, #8]
 8000b38:	619a      	str	r2, [r3, #24]
				currBlock->state = state2;
 8000b3a:	4b52      	ldr	r3, [pc, #328]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	2201      	movs	r2, #1
 8000b40:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
				break;
 8000b44:	e03b      	b.n	8000bbe <currBlock_Rotate+0x146>
				testVar[1] = currBlock->BlockOne[1] - 3;
 8000b46:	4b4f      	ldr	r3, [pc, #316]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	3b03      	subs	r3, #3
 8000b4e:	607b      	str	r3, [r7, #4]
				testVar[2] = currBlock->BlockOne[2] + 3;
 8000b50:	4b4c      	ldr	r3, [pc, #304]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	689b      	ldr	r3, [r3, #8]
 8000b56:	3303      	adds	r3, #3
 8000b58:	60bb      	str	r3, [r7, #8]
				currBlock->BlockOne[1] = testVar[1];
 8000b5a:	4b4a      	ldr	r3, [pc, #296]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	605a      	str	r2, [r3, #4]
				currBlock->BlockOne[2] = testVar[2];
 8000b62:	4b48      	ldr	r3, [pc, #288]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	68ba      	ldr	r2, [r7, #8]
 8000b68:	609a      	str	r2, [r3, #8]
				testVar[1] = currBlock->BlockTwo[1] - 2;
 8000b6a:	4b46      	ldr	r3, [pc, #280]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	3b02      	subs	r3, #2
 8000b72:	607b      	str	r3, [r7, #4]
				testVar[2] = currBlock->BlockTwo[2] + 2;
 8000b74:	4b43      	ldr	r3, [pc, #268]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	691b      	ldr	r3, [r3, #16]
 8000b7a:	3302      	adds	r3, #2
 8000b7c:	60bb      	str	r3, [r7, #8]
				currBlock->BlockTwo[1] = testVar[1];
 8000b7e:	4b41      	ldr	r3, [pc, #260]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	60da      	str	r2, [r3, #12]
				currBlock->BlockTwo[2] = testVar[2];
 8000b86:	4b3f      	ldr	r3, [pc, #252]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	68ba      	ldr	r2, [r7, #8]
 8000b8c:	611a      	str	r2, [r3, #16]
				testVar[1] = currBlock->BlockThree[1] - 1;
 8000b8e:	4b3d      	ldr	r3, [pc, #244]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	695b      	ldr	r3, [r3, #20]
 8000b94:	3b01      	subs	r3, #1
 8000b96:	607b      	str	r3, [r7, #4]
				testVar[2] = currBlock->BlockThree[2] + 1;
 8000b98:	4b3a      	ldr	r3, [pc, #232]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	699b      	ldr	r3, [r3, #24]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	60bb      	str	r3, [r7, #8]
				currBlock->BlockThree[1] = testVar[1];
 8000ba2:	4b38      	ldr	r3, [pc, #224]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	615a      	str	r2, [r3, #20]
				currBlock->BlockThree[2] = testVar[2];
 8000baa:	4b36      	ldr	r3, [pc, #216]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	68ba      	ldr	r2, [r7, #8]
 8000bb0:	619a      	str	r2, [r3, #24]
				currBlock->state = state1;
 8000bb2:	4b34      	ldr	r3, [pc, #208]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
				break;
 8000bbc:	bf00      	nop
			}

			case Square:{
				break;
 8000bbe:	e3b5      	b.n	800132c <currBlock_Rotate+0x8b4>
			}
			case LeftZigZag:{
				switch(currBlock->state){// only two rotations
 8000bc0:	4b30      	ldr	r3, [pc, #192]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d002      	beq.n	8000bd2 <currBlock_Rotate+0x15a>
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d028      	beq.n	8000c22 <currBlock_Rotate+0x1aa>
					currBlock->BlockTwo[2] = testVar[2];

					currBlock->state = state1;
					break;
				default:
					break;
 8000bd0:	e04f      	b.n	8000c72 <currBlock_Rotate+0x1fa>
					testVar[1] = currBlock->BlockOne[1];
 8000bd2:	4b2c      	ldr	r3, [pc, #176]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockOne[2] - 2;
 8000bda:	4b2a      	ldr	r3, [pc, #168]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	3b02      	subs	r3, #2
 8000be2:	60bb      	str	r3, [r7, #8]
					currBlock->BlockOne[1] = testVar[1];
 8000be4:	4b27      	ldr	r3, [pc, #156]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	605a      	str	r2, [r3, #4]
					currBlock->BlockOne[2] = testVar[2];
 8000bec:	4b25      	ldr	r3, [pc, #148]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	68ba      	ldr	r2, [r7, #8]
 8000bf2:	609a      	str	r2, [r3, #8]
					testVar[1] = currBlock->BlockTwo[1] - 2;
 8000bf4:	4b23      	ldr	r3, [pc, #140]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	68db      	ldr	r3, [r3, #12]
 8000bfa:	3b02      	subs	r3, #2
 8000bfc:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockTwo[2];
 8000bfe:	4b21      	ldr	r3, [pc, #132]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	691b      	ldr	r3, [r3, #16]
 8000c04:	60bb      	str	r3, [r7, #8]
					currBlock->BlockTwo[1] = testVar[1];
 8000c06:	4b1f      	ldr	r3, [pc, #124]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	60da      	str	r2, [r3, #12]
					currBlock->BlockTwo[2] = testVar[2];
 8000c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	68ba      	ldr	r2, [r7, #8]
 8000c14:	611a      	str	r2, [r3, #16]
					currBlock->state = state2;
 8000c16:	4b1b      	ldr	r3, [pc, #108]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
					break;
 8000c20:	e027      	b.n	8000c72 <currBlock_Rotate+0x1fa>
					testVar[1] = currBlock->BlockOne[1];
 8000c22:	4b18      	ldr	r3, [pc, #96]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockOne[2] + 2;
 8000c2a:	4b16      	ldr	r3, [pc, #88]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	3302      	adds	r3, #2
 8000c32:	60bb      	str	r3, [r7, #8]
					currBlock->BlockOne[1] = testVar[1];
 8000c34:	4b13      	ldr	r3, [pc, #76]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	687a      	ldr	r2, [r7, #4]
 8000c3a:	605a      	str	r2, [r3, #4]
					currBlock->BlockOne[2] = testVar[2];
 8000c3c:	4b11      	ldr	r3, [pc, #68]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	68ba      	ldr	r2, [r7, #8]
 8000c42:	609a      	str	r2, [r3, #8]
					testVar[1] = currBlock->BlockTwo[1] + 2;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	68db      	ldr	r3, [r3, #12]
 8000c4a:	3302      	adds	r3, #2
 8000c4c:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockTwo[2];
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	691b      	ldr	r3, [r3, #16]
 8000c54:	60bb      	str	r3, [r7, #8]
					currBlock->BlockTwo[1] = testVar[1];
 8000c56:	4b0b      	ldr	r3, [pc, #44]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	60da      	str	r2, [r3, #12]
					currBlock->BlockTwo[2] = testVar[2];
 8000c5e:	4b09      	ldr	r3, [pc, #36]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	611a      	str	r2, [r3, #16]
					currBlock->state = state1;
 8000c66:	4b07      	ldr	r3, [pc, #28]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
					break;
 8000c70:	bf00      	nop
				}
			}
			case RightZigZag:{
				switch(currBlock->state){//only two rotations
 8000c72:	4b04      	ldr	r3, [pc, #16]	@ (8000c84 <currBlock_Rotate+0x20c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d004      	beq.n	8000c88 <currBlock_Rotate+0x210>
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d02a      	beq.n	8000cd8 <currBlock_Rotate+0x260>
					currBlock->BlockTwo[2] = testVar[2];

					currBlock->state = state1;
					break;
				default:
					break;
 8000c82:	e051      	b.n	8000d28 <currBlock_Rotate+0x2b0>
 8000c84:	200000d4 	.word	0x200000d4
					testVar[1] = currBlock->BlockOne[1] - 2;// rightmost most block top to top left
 8000c88:	4b89      	ldr	r3, [pc, #548]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	3b02      	subs	r3, #2
 8000c90:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockOne[2];
 8000c92:	4b87      	ldr	r3, [pc, #540]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	60bb      	str	r3, [r7, #8]
					currBlock->BlockOne[1] = testVar[1];
 8000c9a:	4b85      	ldr	r3, [pc, #532]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	605a      	str	r2, [r3, #4]
					currBlock->BlockOne[2] = testVar[2];
 8000ca2:	4b83      	ldr	r3, [pc, #524]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	68ba      	ldr	r2, [r7, #8]
 8000ca8:	609a      	str	r2, [r3, #8]
					testVar[1] = currBlock->BlockTwo[1];// top middle to bottom middle
 8000caa:	4b81      	ldr	r3, [pc, #516]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockTwo[2] - 2;
 8000cb2:	4b7f      	ldr	r3, [pc, #508]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	691b      	ldr	r3, [r3, #16]
 8000cb8:	3b02      	subs	r3, #2
 8000cba:	60bb      	str	r3, [r7, #8]
					currBlock->BlockTwo[1] = testVar[1];
 8000cbc:	4b7c      	ldr	r3, [pc, #496]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	60da      	str	r2, [r3, #12]
					currBlock->BlockTwo[2] = testVar[2];
 8000cc4:	4b7a      	ldr	r3, [pc, #488]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	68ba      	ldr	r2, [r7, #8]
 8000cca:	611a      	str	r2, [r3, #16]
					currBlock->state = state2;
 8000ccc:	4b78      	ldr	r3, [pc, #480]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
					break;
 8000cd6:	e027      	b.n	8000d28 <currBlock_Rotate+0x2b0>
					testVar[1] = currBlock->BlockOne[1] + 2;// rightmost most block top to top left inverse
 8000cd8:	4b75      	ldr	r3, [pc, #468]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	3302      	adds	r3, #2
 8000ce0:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockOne[2];
 8000ce2:	4b73      	ldr	r3, [pc, #460]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	60bb      	str	r3, [r7, #8]
					currBlock->BlockOne[1] = testVar[1];
 8000cea:	4b71      	ldr	r3, [pc, #452]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	605a      	str	r2, [r3, #4]
					currBlock->BlockOne[2] = testVar[2];
 8000cf2:	4b6f      	ldr	r3, [pc, #444]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	609a      	str	r2, [r3, #8]
					testVar[1] = currBlock->BlockTwo[1];// top middle to bottom middle inverse
 8000cfa:	4b6d      	ldr	r3, [pc, #436]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockTwo[2] + 2;
 8000d02:	4b6b      	ldr	r3, [pc, #428]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	691b      	ldr	r3, [r3, #16]
 8000d08:	3302      	adds	r3, #2
 8000d0a:	60bb      	str	r3, [r7, #8]
					currBlock->BlockTwo[1] = testVar[1];
 8000d0c:	4b68      	ldr	r3, [pc, #416]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	60da      	str	r2, [r3, #12]
					currBlock->BlockTwo[2] = testVar[2];
 8000d14:	4b66      	ldr	r3, [pc, #408]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	68ba      	ldr	r2, [r7, #8]
 8000d1a:	611a      	str	r2, [r3, #16]
					currBlock->state = state1;
 8000d1c:	4b64      	ldr	r3, [pc, #400]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2200      	movs	r2, #0
 8000d22:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
					break;
 8000d26:	bf00      	nop
				}
			}
			case RightL:{
				switch(currBlock->state){// 4 rotations
 8000d28:	4b61      	ldr	r3, [pc, #388]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d30:	2b03      	cmp	r3, #3
 8000d32:	f200 80fa 	bhi.w	8000f2a <currBlock_Rotate+0x4b2>
 8000d36:	a201      	add	r2, pc, #4	@ (adr r2, 8000d3c <currBlock_Rotate+0x2c4>)
 8000d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d3c:	08000d4d 	.word	0x08000d4d
 8000d40:	08000dc3 	.word	0x08000dc3
 8000d44:	08000e39 	.word	0x08000e39
 8000d48:	08000eb5 	.word	0x08000eb5
				case state1:
					testVar[1] = currBlock->BlockOne[1] - 1;//  mid right to mid bottom
 8000d4c:	4b58      	ldr	r3, [pc, #352]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockOne[2] - 1;
 8000d56:	4b56      	ldr	r3, [pc, #344]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	3b01      	subs	r3, #1
 8000d5e:	60bb      	str	r3, [r7, #8]
					currBlock->BlockOne[1] = testVar[1];
 8000d60:	4b53      	ldr	r3, [pc, #332]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	605a      	str	r2, [r3, #4]
					currBlock->BlockOne[2] = testVar[2];
 8000d68:	4b51      	ldr	r3, [pc, #324]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	68ba      	ldr	r2, [r7, #8]
 8000d6e:	609a      	str	r2, [r3, #8]

					testVar[1] = currBlock->BlockTwo[1] + 1;// middle left to top middle
 8000d70:	4b4f      	ldr	r3, [pc, #316]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	68db      	ldr	r3, [r3, #12]
 8000d76:	3301      	adds	r3, #1
 8000d78:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockTwo[2] + 1;
 8000d7a:	4b4d      	ldr	r3, [pc, #308]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	691b      	ldr	r3, [r3, #16]
 8000d80:	3301      	adds	r3, #1
 8000d82:	60bb      	str	r3, [r7, #8]
					currBlock->BlockTwo[1] = testVar[1];
 8000d84:	4b4a      	ldr	r3, [pc, #296]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	60da      	str	r2, [r3, #12]
					currBlock->BlockTwo[2] = testVar[2];
 8000d8c:	4b48      	ldr	r3, [pc, #288]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	68ba      	ldr	r2, [r7, #8]
 8000d92:	611a      	str	r2, [r3, #16]

					testVar[1] = currBlock->BlockThree[1] + 2;// top left to top right
 8000d94:	4b46      	ldr	r3, [pc, #280]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	3302      	adds	r3, #2
 8000d9c:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockThree[2];
 8000d9e:	4b44      	ldr	r3, [pc, #272]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	60bb      	str	r3, [r7, #8]
					currBlock->BlockThree[1] = testVar[1];
 8000da6:	4b42      	ldr	r3, [pc, #264]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	615a      	str	r2, [r3, #20]
					currBlock->BlockThree[2] = testVar[2];
 8000dae:	4b40      	ldr	r3, [pc, #256]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	68ba      	ldr	r2, [r7, #8]
 8000db4:	619a      	str	r2, [r3, #24]

					currBlock->state = state2;
 8000db6:	4b3e      	ldr	r3, [pc, #248]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2201      	movs	r2, #1
 8000dbc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
					break;
 8000dc0:	e0b4      	b.n	8000f2c <currBlock_Rotate+0x4b4>
				case state2:
					testVar[1] = currBlock->BlockOne[1] - 1;//  mid bottom to mid left
 8000dc2:	4b3b      	ldr	r3, [pc, #236]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	3b01      	subs	r3, #1
 8000dca:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockOne[2] + 1;
 8000dcc:	4b38      	ldr	r3, [pc, #224]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	60bb      	str	r3, [r7, #8]
					currBlock->BlockOne[1] = testVar[1];
 8000dd6:	4b36      	ldr	r3, [pc, #216]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	605a      	str	r2, [r3, #4]
					currBlock->BlockOne[2] = testVar[2];
 8000dde:	4b34      	ldr	r3, [pc, #208]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	609a      	str	r2, [r3, #8]

					testVar[1] = currBlock->BlockTwo[1] + 1;//  top middle to middle right
 8000de6:	4b32      	ldr	r3, [pc, #200]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	3301      	adds	r3, #1
 8000dee:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockTwo[2] - 1;
 8000df0:	4b2f      	ldr	r3, [pc, #188]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	691b      	ldr	r3, [r3, #16]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	60bb      	str	r3, [r7, #8]
					currBlock->BlockTwo[1] = testVar[1];
 8000dfa:	4b2d      	ldr	r3, [pc, #180]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	60da      	str	r2, [r3, #12]
					currBlock->BlockTwo[2] = testVar[2];
 8000e02:	4b2b      	ldr	r3, [pc, #172]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	68ba      	ldr	r2, [r7, #8]
 8000e08:	611a      	str	r2, [r3, #16]

					testVar[1] = currBlock->BlockThree[1];//  top right to bottom right
 8000e0a:	4b29      	ldr	r3, [pc, #164]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	695b      	ldr	r3, [r3, #20]
 8000e10:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockThree[2] - 2;
 8000e12:	4b27      	ldr	r3, [pc, #156]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	3b02      	subs	r3, #2
 8000e1a:	60bb      	str	r3, [r7, #8]
					currBlock->BlockThree[1] = testVar[1];
 8000e1c:	4b24      	ldr	r3, [pc, #144]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	615a      	str	r2, [r3, #20]
					currBlock->BlockThree[2] = testVar[2];
 8000e24:	4b22      	ldr	r3, [pc, #136]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	68ba      	ldr	r2, [r7, #8]
 8000e2a:	619a      	str	r2, [r3, #24]

					currBlock->state = state3;
 8000e2c:	4b20      	ldr	r3, [pc, #128]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2202      	movs	r2, #2
 8000e32:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
					break;
 8000e36:	e079      	b.n	8000f2c <currBlock_Rotate+0x4b4>
				case state3:
					testVar[1] = currBlock->BlockOne[1] + 1;//  mid left to mid top
 8000e38:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockOne[2] + 1;
 8000e42:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	60bb      	str	r3, [r7, #8]
					currBlock->BlockOne[1] = testVar[1];
 8000e4c:	4b18      	ldr	r3, [pc, #96]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	687a      	ldr	r2, [r7, #4]
 8000e52:	605a      	str	r2, [r3, #4]
					currBlock->BlockOne[2] = testVar[2];
 8000e54:	4b16      	ldr	r3, [pc, #88]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	68ba      	ldr	r2, [r7, #8]
 8000e5a:	609a      	str	r2, [r3, #8]

					testVar[1] = currBlock->BlockTwo[1] - 1;//  middle right mid bottom
 8000e5c:	4b14      	ldr	r3, [pc, #80]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockTwo[2] - 1;
 8000e66:	4b12      	ldr	r3, [pc, #72]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	691b      	ldr	r3, [r3, #16]
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	60bb      	str	r3, [r7, #8]
					currBlock->BlockTwo[1] = testVar[1];
 8000e70:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	60da      	str	r2, [r3, #12]
					currBlock->BlockTwo[2] = testVar[2];
 8000e78:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	68ba      	ldr	r2, [r7, #8]
 8000e7e:	611a      	str	r2, [r3, #16]

					testVar[1] = currBlock->BlockThree[1] - 2;//  bottom right to bottom left
 8000e80:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	3b02      	subs	r3, #2
 8000e88:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockThree[2];
 8000e8a:	4b09      	ldr	r3, [pc, #36]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	60bb      	str	r3, [r7, #8]
					currBlock->BlockThree[1] = testVar[1];
 8000e92:	4b07      	ldr	r3, [pc, #28]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	615a      	str	r2, [r3, #20]
					currBlock->BlockThree[2] = testVar[2];
 8000e9a:	4b05      	ldr	r3, [pc, #20]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	68ba      	ldr	r2, [r7, #8]
 8000ea0:	619a      	str	r2, [r3, #24]

					currBlock->state = state4;
 8000ea2:	4b03      	ldr	r3, [pc, #12]	@ (8000eb0 <currBlock_Rotate+0x438>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2203      	movs	r2, #3
 8000ea8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
					break;
 8000eac:	e03e      	b.n	8000f2c <currBlock_Rotate+0x4b4>
 8000eae:	bf00      	nop
 8000eb0:	200000d4 	.word	0x200000d4
				case state4:
					testVar[1] = currBlock->BlockOne[1] + 1;//  mid top to mid right
 8000eb4:	4b7f      	ldr	r3, [pc, #508]	@ (80010b4 <currBlock_Rotate+0x63c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockOne[2] - 1;
 8000ebe:	4b7d      	ldr	r3, [pc, #500]	@ (80010b4 <currBlock_Rotate+0x63c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	3b01      	subs	r3, #1
 8000ec6:	60bb      	str	r3, [r7, #8]
					currBlock->BlockOne[1] = testVar[1];
 8000ec8:	4b7a      	ldr	r3, [pc, #488]	@ (80010b4 <currBlock_Rotate+0x63c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	605a      	str	r2, [r3, #4]
					currBlock->BlockOne[2] = testVar[2];
 8000ed0:	4b78      	ldr	r3, [pc, #480]	@ (80010b4 <currBlock_Rotate+0x63c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	68ba      	ldr	r2, [r7, #8]
 8000ed6:	609a      	str	r2, [r3, #8]

					testVar[1] = currBlock->BlockTwo[1] - 1;//  middle right mid bottom
 8000ed8:	4b76      	ldr	r3, [pc, #472]	@ (80010b4 <currBlock_Rotate+0x63c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	68db      	ldr	r3, [r3, #12]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockTwo[2] - 1;
 8000ee2:	4b74      	ldr	r3, [pc, #464]	@ (80010b4 <currBlock_Rotate+0x63c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	691b      	ldr	r3, [r3, #16]
 8000ee8:	3b01      	subs	r3, #1
 8000eea:	60bb      	str	r3, [r7, #8]
					currBlock->BlockTwo[1] = testVar[1];
 8000eec:	4b71      	ldr	r3, [pc, #452]	@ (80010b4 <currBlock_Rotate+0x63c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	60da      	str	r2, [r3, #12]
					currBlock->BlockTwo[2] = testVar[2];
 8000ef4:	4b6f      	ldr	r3, [pc, #444]	@ (80010b4 <currBlock_Rotate+0x63c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	68ba      	ldr	r2, [r7, #8]
 8000efa:	611a      	str	r2, [r3, #16]

					testVar[1] = currBlock->BlockThree[1] - 2;//  bottom right to bottom left
 8000efc:	4b6d      	ldr	r3, [pc, #436]	@ (80010b4 <currBlock_Rotate+0x63c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	695b      	ldr	r3, [r3, #20]
 8000f02:	3b02      	subs	r3, #2
 8000f04:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockThree[2];
 8000f06:	4b6b      	ldr	r3, [pc, #428]	@ (80010b4 <currBlock_Rotate+0x63c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	60bb      	str	r3, [r7, #8]
					currBlock->BlockThree[1] = testVar[1];
 8000f0e:	4b69      	ldr	r3, [pc, #420]	@ (80010b4 <currBlock_Rotate+0x63c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	615a      	str	r2, [r3, #20]
					currBlock->BlockThree[2] = testVar[2];
 8000f16:	4b67      	ldr	r3, [pc, #412]	@ (80010b4 <currBlock_Rotate+0x63c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	68ba      	ldr	r2, [r7, #8]
 8000f1c:	619a      	str	r2, [r3, #24]

					currBlock->state = state1;// set state back to 1
 8000f1e:	4b65      	ldr	r3, [pc, #404]	@ (80010b4 <currBlock_Rotate+0x63c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2200      	movs	r2, #0
 8000f24:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
					break;
 8000f28:	e000      	b.n	8000f2c <currBlock_Rotate+0x4b4>
				default:
					break;
 8000f2a:	bf00      	nop
				}
			}
			case LeftL:{
				switch(currBlock->state){// 4 rotations
 8000f2c:	4b61      	ldr	r3, [pc, #388]	@ (80010b4 <currBlock_Rotate+0x63c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000f34:	2b03      	cmp	r3, #3
 8000f36:	f200 80fa 	bhi.w	800112e <currBlock_Rotate+0x6b6>
 8000f3a:	a201      	add	r2, pc, #4	@ (adr r2, 8000f40 <currBlock_Rotate+0x4c8>)
 8000f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f40:	08000f51 	.word	0x08000f51
 8000f44:	08000fc7 	.word	0x08000fc7
 8000f48:	0800103d 	.word	0x0800103d
 8000f4c:	080010b9 	.word	0x080010b9
				case state1:
					testVar[1] = currBlock->BlockOne[1] + 1;//  mid left to mid top
 8000f50:	4b58      	ldr	r3, [pc, #352]	@ (80010b4 <currBlock_Rotate+0x63c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	3301      	adds	r3, #1
 8000f58:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockOne[2] + 1;
 8000f5a:	4b56      	ldr	r3, [pc, #344]	@ (80010b4 <currBlock_Rotate+0x63c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	3301      	adds	r3, #1
 8000f62:	60bb      	str	r3, [r7, #8]
					currBlock->BlockOne[1] = testVar[1];
 8000f64:	4b53      	ldr	r3, [pc, #332]	@ (80010b4 <currBlock_Rotate+0x63c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	605a      	str	r2, [r3, #4]
					currBlock->BlockOne[2] = testVar[2];
 8000f6c:	4b51      	ldr	r3, [pc, #324]	@ (80010b4 <currBlock_Rotate+0x63c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	68ba      	ldr	r2, [r7, #8]
 8000f72:	609a      	str	r2, [r3, #8]

					testVar[1] = currBlock->BlockTwo[1] - 1;// middle right to bottom middle
 8000f74:	4b4f      	ldr	r3, [pc, #316]	@ (80010b4 <currBlock_Rotate+0x63c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockTwo[2] - 1;
 8000f7e:	4b4d      	ldr	r3, [pc, #308]	@ (80010b4 <currBlock_Rotate+0x63c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	691b      	ldr	r3, [r3, #16]
 8000f84:	3b01      	subs	r3, #1
 8000f86:	60bb      	str	r3, [r7, #8]
					currBlock->BlockTwo[1] = testVar[1];
 8000f88:	4b4a      	ldr	r3, [pc, #296]	@ (80010b4 <currBlock_Rotate+0x63c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	60da      	str	r2, [r3, #12]
					currBlock->BlockTwo[2] = testVar[2];
 8000f90:	4b48      	ldr	r3, [pc, #288]	@ (80010b4 <currBlock_Rotate+0x63c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	68ba      	ldr	r2, [r7, #8]
 8000f96:	611a      	str	r2, [r3, #16]

					testVar[1] = currBlock->BlockThree[1];// top right to bottom right
 8000f98:	4b46      	ldr	r3, [pc, #280]	@ (80010b4 <currBlock_Rotate+0x63c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	695b      	ldr	r3, [r3, #20]
 8000f9e:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockThree[2] - 2;
 8000fa0:	4b44      	ldr	r3, [pc, #272]	@ (80010b4 <currBlock_Rotate+0x63c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	3b02      	subs	r3, #2
 8000fa8:	60bb      	str	r3, [r7, #8]
					currBlock->BlockThree[1] = testVar[1];
 8000faa:	4b42      	ldr	r3, [pc, #264]	@ (80010b4 <currBlock_Rotate+0x63c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	615a      	str	r2, [r3, #20]
					currBlock->BlockThree[2] = testVar[2];
 8000fb2:	4b40      	ldr	r3, [pc, #256]	@ (80010b4 <currBlock_Rotate+0x63c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	68ba      	ldr	r2, [r7, #8]
 8000fb8:	619a      	str	r2, [r3, #24]

					currBlock->state = state2;
 8000fba:	4b3e      	ldr	r3, [pc, #248]	@ (80010b4 <currBlock_Rotate+0x63c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
					break;
 8000fc4:	e0b4      	b.n	8001130 <currBlock_Rotate+0x6b8>
				case state2:
					testVar[1] = currBlock->BlockOne[1] + 1;//   mid top to mid right
 8000fc6:	4b3b      	ldr	r3, [pc, #236]	@ (80010b4 <currBlock_Rotate+0x63c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockOne[2] - 1;
 8000fd0:	4b38      	ldr	r3, [pc, #224]	@ (80010b4 <currBlock_Rotate+0x63c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	60bb      	str	r3, [r7, #8]
					currBlock->BlockOne[1] = testVar[1];
 8000fda:	4b36      	ldr	r3, [pc, #216]	@ (80010b4 <currBlock_Rotate+0x63c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	605a      	str	r2, [r3, #4]
					currBlock->BlockOne[2] = testVar[2];
 8000fe2:	4b34      	ldr	r3, [pc, #208]	@ (80010b4 <currBlock_Rotate+0x63c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	609a      	str	r2, [r3, #8]

					testVar[1] = currBlock->BlockTwo[1] - 1;//  bottom middle to middle left
 8000fea:	4b32      	ldr	r3, [pc, #200]	@ (80010b4 <currBlock_Rotate+0x63c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	3b01      	subs	r3, #1
 8000ff2:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockTwo[2] + 1;
 8000ff4:	4b2f      	ldr	r3, [pc, #188]	@ (80010b4 <currBlock_Rotate+0x63c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	691b      	ldr	r3, [r3, #16]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	60bb      	str	r3, [r7, #8]
					currBlock->BlockTwo[1] = testVar[1];
 8000ffe:	4b2d      	ldr	r3, [pc, #180]	@ (80010b4 <currBlock_Rotate+0x63c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	60da      	str	r2, [r3, #12]
					currBlock->BlockTwo[2] = testVar[2];
 8001006:	4b2b      	ldr	r3, [pc, #172]	@ (80010b4 <currBlock_Rotate+0x63c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	68ba      	ldr	r2, [r7, #8]
 800100c:	611a      	str	r2, [r3, #16]

					testVar[1] = currBlock->BlockThree[1] - 2;//  bottom right to bottom left
 800100e:	4b29      	ldr	r3, [pc, #164]	@ (80010b4 <currBlock_Rotate+0x63c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	695b      	ldr	r3, [r3, #20]
 8001014:	3b02      	subs	r3, #2
 8001016:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockThree[2];
 8001018:	4b26      	ldr	r3, [pc, #152]	@ (80010b4 <currBlock_Rotate+0x63c>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	60bb      	str	r3, [r7, #8]
					currBlock->BlockThree[1] = testVar[1];
 8001020:	4b24      	ldr	r3, [pc, #144]	@ (80010b4 <currBlock_Rotate+0x63c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	615a      	str	r2, [r3, #20]
					currBlock->BlockThree[2] = testVar[2];
 8001028:	4b22      	ldr	r3, [pc, #136]	@ (80010b4 <currBlock_Rotate+0x63c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	68ba      	ldr	r2, [r7, #8]
 800102e:	619a      	str	r2, [r3, #24]

					currBlock->state = state3;
 8001030:	4b20      	ldr	r3, [pc, #128]	@ (80010b4 <currBlock_Rotate+0x63c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2202      	movs	r2, #2
 8001036:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
					break;
 800103a:	e079      	b.n	8001130 <currBlock_Rotate+0x6b8>
				case state3:
					testVar[1] = currBlock->BlockOne[1] - 1;//    mid right mid bottom
 800103c:	4b1d      	ldr	r3, [pc, #116]	@ (80010b4 <currBlock_Rotate+0x63c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	3b01      	subs	r3, #1
 8001044:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockOne[2] - 1;
 8001046:	4b1b      	ldr	r3, [pc, #108]	@ (80010b4 <currBlock_Rotate+0x63c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	3b01      	subs	r3, #1
 800104e:	60bb      	str	r3, [r7, #8]
					currBlock->BlockOne[1] = testVar[1];
 8001050:	4b18      	ldr	r3, [pc, #96]	@ (80010b4 <currBlock_Rotate+0x63c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	605a      	str	r2, [r3, #4]
					currBlock->BlockOne[2] = testVar[2];
 8001058:	4b16      	ldr	r3, [pc, #88]	@ (80010b4 <currBlock_Rotate+0x63c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	68ba      	ldr	r2, [r7, #8]
 800105e:	609a      	str	r2, [r3, #8]

					testVar[1] = currBlock->BlockTwo[1] + 1;//   middle left to middle top
 8001060:	4b14      	ldr	r3, [pc, #80]	@ (80010b4 <currBlock_Rotate+0x63c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	3301      	adds	r3, #1
 8001068:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockTwo[2] + 1;
 800106a:	4b12      	ldr	r3, [pc, #72]	@ (80010b4 <currBlock_Rotate+0x63c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	691b      	ldr	r3, [r3, #16]
 8001070:	3301      	adds	r3, #1
 8001072:	60bb      	str	r3, [r7, #8]
					currBlock->BlockTwo[1] = testVar[1];
 8001074:	4b0f      	ldr	r3, [pc, #60]	@ (80010b4 <currBlock_Rotate+0x63c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	60da      	str	r2, [r3, #12]
					currBlock->BlockTwo[2] = testVar[2];
 800107c:	4b0d      	ldr	r3, [pc, #52]	@ (80010b4 <currBlock_Rotate+0x63c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	68ba      	ldr	r2, [r7, #8]
 8001082:	611a      	str	r2, [r3, #16]

					testVar[1] = currBlock->BlockThree[1];//   bottom left to top left
 8001084:	4b0b      	ldr	r3, [pc, #44]	@ (80010b4 <currBlock_Rotate+0x63c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	695b      	ldr	r3, [r3, #20]
 800108a:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockThree[2] + 2;
 800108c:	4b09      	ldr	r3, [pc, #36]	@ (80010b4 <currBlock_Rotate+0x63c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	3302      	adds	r3, #2
 8001094:	60bb      	str	r3, [r7, #8]
					currBlock->BlockThree[1] = testVar[1];
 8001096:	4b07      	ldr	r3, [pc, #28]	@ (80010b4 <currBlock_Rotate+0x63c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	615a      	str	r2, [r3, #20]
					currBlock->BlockThree[2] = testVar[2];
 800109e:	4b05      	ldr	r3, [pc, #20]	@ (80010b4 <currBlock_Rotate+0x63c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	68ba      	ldr	r2, [r7, #8]
 80010a4:	619a      	str	r2, [r3, #24]

					currBlock->state = state4;
 80010a6:	4b03      	ldr	r3, [pc, #12]	@ (80010b4 <currBlock_Rotate+0x63c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2203      	movs	r2, #3
 80010ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
					break;
 80010b0:	e03e      	b.n	8001130 <currBlock_Rotate+0x6b8>
 80010b2:	bf00      	nop
 80010b4:	200000d4 	.word	0x200000d4
				case state4:
					testVar[1] = currBlock->BlockOne[1] - 1;//   mid bottom to mid left
 80010b8:	4b7e      	ldr	r3, [pc, #504]	@ (80012b4 <currBlock_Rotate+0x83c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	3b01      	subs	r3, #1
 80010c0:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockOne[2] + 1;
 80010c2:	4b7c      	ldr	r3, [pc, #496]	@ (80012b4 <currBlock_Rotate+0x83c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	3301      	adds	r3, #1
 80010ca:	60bb      	str	r3, [r7, #8]
					currBlock->BlockOne[1] = testVar[1];
 80010cc:	4b79      	ldr	r3, [pc, #484]	@ (80012b4 <currBlock_Rotate+0x83c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	605a      	str	r2, [r3, #4]
					currBlock->BlockOne[2] = testVar[2];
 80010d4:	4b77      	ldr	r3, [pc, #476]	@ (80012b4 <currBlock_Rotate+0x83c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	68ba      	ldr	r2, [r7, #8]
 80010da:	609a      	str	r2, [r3, #8]

					testVar[1] = currBlock->BlockTwo[1] + 1;//    middle top to mid right
 80010dc:	4b75      	ldr	r3, [pc, #468]	@ (80012b4 <currBlock_Rotate+0x83c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	3301      	adds	r3, #1
 80010e4:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockTwo[2] - 1;
 80010e6:	4b73      	ldr	r3, [pc, #460]	@ (80012b4 <currBlock_Rotate+0x83c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	691b      	ldr	r3, [r3, #16]
 80010ec:	3b01      	subs	r3, #1
 80010ee:	60bb      	str	r3, [r7, #8]
					currBlock->BlockTwo[1] = testVar[1];
 80010f0:	4b70      	ldr	r3, [pc, #448]	@ (80012b4 <currBlock_Rotate+0x83c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	60da      	str	r2, [r3, #12]
					currBlock->BlockTwo[2] = testVar[2];
 80010f8:	4b6e      	ldr	r3, [pc, #440]	@ (80012b4 <currBlock_Rotate+0x83c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	68ba      	ldr	r2, [r7, #8]
 80010fe:	611a      	str	r2, [r3, #16]

					testVar[1] = currBlock->BlockThree[1] + 2;//   top left to top right
 8001100:	4b6c      	ldr	r3, [pc, #432]	@ (80012b4 <currBlock_Rotate+0x83c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	3302      	adds	r3, #2
 8001108:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockThree[2];
 800110a:	4b6a      	ldr	r3, [pc, #424]	@ (80012b4 <currBlock_Rotate+0x83c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	60bb      	str	r3, [r7, #8]
					currBlock->BlockThree[1] = testVar[1];
 8001112:	4b68      	ldr	r3, [pc, #416]	@ (80012b4 <currBlock_Rotate+0x83c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	615a      	str	r2, [r3, #20]
					currBlock->BlockThree[2] = testVar[2];
 800111a:	4b66      	ldr	r3, [pc, #408]	@ (80012b4 <currBlock_Rotate+0x83c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	68ba      	ldr	r2, [r7, #8]
 8001120:	619a      	str	r2, [r3, #24]

					currBlock->state = state1;
 8001122:	4b64      	ldr	r3, [pc, #400]	@ (80012b4 <currBlock_Rotate+0x83c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2200      	movs	r2, #0
 8001128:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
					break;
 800112c:	e000      	b.n	8001130 <currBlock_Rotate+0x6b8>
				default:
					break;
 800112e:	bf00      	nop
				}
			}
			break;
 8001130:	e0ff      	b.n	8001332 <currBlock_Rotate+0x8ba>
			case smollPP:{
				switch(currBlock->state){// 4rotations only 3 blocks as center is centered
 8001132:	4b60      	ldr	r3, [pc, #384]	@ (80012b4 <currBlock_Rotate+0x83c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800113a:	2b03      	cmp	r3, #3
 800113c:	f200 80f8 	bhi.w	8001330 <currBlock_Rotate+0x8b8>
 8001140:	a201      	add	r2, pc, #4	@ (adr r2, 8001148 <currBlock_Rotate+0x6d0>)
 8001142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001146:	bf00      	nop
 8001148:	08001159 	.word	0x08001159
 800114c:	080011cd 	.word	0x080011cd
 8001150:	08001241 	.word	0x08001241
 8001154:	080012b9 	.word	0x080012b9
				case state1:
					testVar[1] = currBlock->BlockOne[1];//  bottom left to top left
 8001158:	4b56      	ldr	r3, [pc, #344]	@ (80012b4 <currBlock_Rotate+0x83c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockOne[2] + 2;
 8001160:	4b54      	ldr	r3, [pc, #336]	@ (80012b4 <currBlock_Rotate+0x83c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	3302      	adds	r3, #2
 8001168:	60bb      	str	r3, [r7, #8]
					currBlock->BlockOne[1] = testVar[1];
 800116a:	4b52      	ldr	r3, [pc, #328]	@ (80012b4 <currBlock_Rotate+0x83c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	605a      	str	r2, [r3, #4]
					currBlock->BlockOne[2] = testVar[2];
 8001172:	4b50      	ldr	r3, [pc, #320]	@ (80012b4 <currBlock_Rotate+0x83c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	68ba      	ldr	r2, [r7, #8]
 8001178:	609a      	str	r2, [r3, #8]

					testVar[1] = currBlock->BlockTwo[1] + 1;// middle left to top middle
 800117a:	4b4e      	ldr	r3, [pc, #312]	@ (80012b4 <currBlock_Rotate+0x83c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	3301      	adds	r3, #1
 8001182:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockTwo[2] + 1;
 8001184:	4b4b      	ldr	r3, [pc, #300]	@ (80012b4 <currBlock_Rotate+0x83c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	691b      	ldr	r3, [r3, #16]
 800118a:	3301      	adds	r3, #1
 800118c:	60bb      	str	r3, [r7, #8]
					currBlock->BlockTwo[1] = testVar[1];
 800118e:	4b49      	ldr	r3, [pc, #292]	@ (80012b4 <currBlock_Rotate+0x83c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	60da      	str	r2, [r3, #12]
					currBlock->BlockTwo[2] = testVar[2];
 8001196:	4b47      	ldr	r3, [pc, #284]	@ (80012b4 <currBlock_Rotate+0x83c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	68ba      	ldr	r2, [r7, #8]
 800119c:	611a      	str	r2, [r3, #16]

					testVar[1] = currBlock->BlockThree[1] + 2;// top left to top right
 800119e:	4b45      	ldr	r3, [pc, #276]	@ (80012b4 <currBlock_Rotate+0x83c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	695b      	ldr	r3, [r3, #20]
 80011a4:	3302      	adds	r3, #2
 80011a6:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockThree[2];
 80011a8:	4b42      	ldr	r3, [pc, #264]	@ (80012b4 <currBlock_Rotate+0x83c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	60bb      	str	r3, [r7, #8]
					currBlock->BlockThree[1] = testVar[1];
 80011b0:	4b40      	ldr	r3, [pc, #256]	@ (80012b4 <currBlock_Rotate+0x83c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	615a      	str	r2, [r3, #20]
					currBlock->BlockThree[2] = testVar[2];
 80011b8:	4b3e      	ldr	r3, [pc, #248]	@ (80012b4 <currBlock_Rotate+0x83c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	68ba      	ldr	r2, [r7, #8]
 80011be:	619a      	str	r2, [r3, #24]

					currBlock->state = state2;
 80011c0:	4b3c      	ldr	r3, [pc, #240]	@ (80012b4 <currBlock_Rotate+0x83c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2201      	movs	r2, #1
 80011c6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
					break;
 80011ca:	e0b2      	b.n	8001332 <currBlock_Rotate+0x8ba>
				case state2:
					testVar[1] = currBlock->BlockOne[1] + 2;// top left to top right
 80011cc:	4b39      	ldr	r3, [pc, #228]	@ (80012b4 <currBlock_Rotate+0x83c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	3302      	adds	r3, #2
 80011d4:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockOne[2];
 80011d6:	4b37      	ldr	r3, [pc, #220]	@ (80012b4 <currBlock_Rotate+0x83c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	60bb      	str	r3, [r7, #8]
					currBlock->BlockOne[1] = testVar[1];
 80011de:	4b35      	ldr	r3, [pc, #212]	@ (80012b4 <currBlock_Rotate+0x83c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	605a      	str	r2, [r3, #4]
					currBlock->BlockOne[2] = testVar[2];
 80011e6:	4b33      	ldr	r3, [pc, #204]	@ (80012b4 <currBlock_Rotate+0x83c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	609a      	str	r2, [r3, #8]

					testVar[1] = currBlock->BlockTwo[1] + 1;// middle top to  middle right
 80011ee:	4b31      	ldr	r3, [pc, #196]	@ (80012b4 <currBlock_Rotate+0x83c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	3301      	adds	r3, #1
 80011f6:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockTwo[2] - 1;
 80011f8:	4b2e      	ldr	r3, [pc, #184]	@ (80012b4 <currBlock_Rotate+0x83c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	3b01      	subs	r3, #1
 8001200:	60bb      	str	r3, [r7, #8]
					currBlock->BlockTwo[1] = testVar[1];
 8001202:	4b2c      	ldr	r3, [pc, #176]	@ (80012b4 <currBlock_Rotate+0x83c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	60da      	str	r2, [r3, #12]
					currBlock->BlockTwo[2] = testVar[2];
 800120a:	4b2a      	ldr	r3, [pc, #168]	@ (80012b4 <currBlock_Rotate+0x83c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	611a      	str	r2, [r3, #16]

					testVar[1] = currBlock->BlockThree[1];// top right to bottom right
 8001212:	4b28      	ldr	r3, [pc, #160]	@ (80012b4 <currBlock_Rotate+0x83c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	695b      	ldr	r3, [r3, #20]
 8001218:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockThree[2] - 2;
 800121a:	4b26      	ldr	r3, [pc, #152]	@ (80012b4 <currBlock_Rotate+0x83c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	3b02      	subs	r3, #2
 8001222:	60bb      	str	r3, [r7, #8]
					currBlock->BlockThree[1] = testVar[1];
 8001224:	4b23      	ldr	r3, [pc, #140]	@ (80012b4 <currBlock_Rotate+0x83c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	615a      	str	r2, [r3, #20]
					currBlock->BlockThree[2] = testVar[2];
 800122c:	4b21      	ldr	r3, [pc, #132]	@ (80012b4 <currBlock_Rotate+0x83c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	68ba      	ldr	r2, [r7, #8]
 8001232:	619a      	str	r2, [r3, #24]

					currBlock->state = state3;
 8001234:	4b1f      	ldr	r3, [pc, #124]	@ (80012b4 <currBlock_Rotate+0x83c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2202      	movs	r2, #2
 800123a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
					break;
 800123e:	e078      	b.n	8001332 <currBlock_Rotate+0x8ba>
				case state3:
					testVar[1] = currBlock->BlockOne[1];//top right to bottom right
 8001240:	4b1c      	ldr	r3, [pc, #112]	@ (80012b4 <currBlock_Rotate+0x83c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockOne[2] - 2;
 8001248:	4b1a      	ldr	r3, [pc, #104]	@ (80012b4 <currBlock_Rotate+0x83c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	3b02      	subs	r3, #2
 8001250:	60bb      	str	r3, [r7, #8]
					currBlock->BlockOne[1] = testVar[1];
 8001252:	4b18      	ldr	r3, [pc, #96]	@ (80012b4 <currBlock_Rotate+0x83c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	605a      	str	r2, [r3, #4]
					currBlock->BlockOne[2] = testVar[2];
 800125a:	4b16      	ldr	r3, [pc, #88]	@ (80012b4 <currBlock_Rotate+0x83c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	68ba      	ldr	r2, [r7, #8]
 8001260:	609a      	str	r2, [r3, #8]

					testVar[1] = currBlock->BlockTwo[1] - 1;// middle right to  middle bottom
 8001262:	4b14      	ldr	r3, [pc, #80]	@ (80012b4 <currBlock_Rotate+0x83c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	3b01      	subs	r3, #1
 800126a:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockTwo[2] - 1;
 800126c:	4b11      	ldr	r3, [pc, #68]	@ (80012b4 <currBlock_Rotate+0x83c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	3b01      	subs	r3, #1
 8001274:	60bb      	str	r3, [r7, #8]
					currBlock->BlockTwo[1] = testVar[1];
 8001276:	4b0f      	ldr	r3, [pc, #60]	@ (80012b4 <currBlock_Rotate+0x83c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	60da      	str	r2, [r3, #12]
					currBlock->BlockTwo[2] = testVar[2];
 800127e:	4b0d      	ldr	r3, [pc, #52]	@ (80012b4 <currBlock_Rotate+0x83c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	68ba      	ldr	r2, [r7, #8]
 8001284:	611a      	str	r2, [r3, #16]

					testVar[1] = currBlock->BlockThree[1] - 2;// bottom right to bottom left
 8001286:	4b0b      	ldr	r3, [pc, #44]	@ (80012b4 <currBlock_Rotate+0x83c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	695b      	ldr	r3, [r3, #20]
 800128c:	3b02      	subs	r3, #2
 800128e:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockThree[2];
 8001290:	4b08      	ldr	r3, [pc, #32]	@ (80012b4 <currBlock_Rotate+0x83c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	60bb      	str	r3, [r7, #8]
					currBlock->BlockThree[1] = testVar[1];
 8001298:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <currBlock_Rotate+0x83c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	615a      	str	r2, [r3, #20]
					currBlock->BlockThree[2] = testVar[2];
 80012a0:	4b04      	ldr	r3, [pc, #16]	@ (80012b4 <currBlock_Rotate+0x83c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	68ba      	ldr	r2, [r7, #8]
 80012a6:	619a      	str	r2, [r3, #24]

					currBlock->state = state4;
 80012a8:	4b02      	ldr	r3, [pc, #8]	@ (80012b4 <currBlock_Rotate+0x83c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2203      	movs	r2, #3
 80012ae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
					break;
 80012b2:	e03e      	b.n	8001332 <currBlock_Rotate+0x8ba>
 80012b4:	200000d4 	.word	0x200000d4
				case state4:
					testVar[1] = currBlock->BlockOne[1] - 2;// bottom right to bottom left
 80012b8:	4b20      	ldr	r3, [pc, #128]	@ (800133c <currBlock_Rotate+0x8c4>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	3b02      	subs	r3, #2
 80012c0:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockOne[2];
 80012c2:	4b1e      	ldr	r3, [pc, #120]	@ (800133c <currBlock_Rotate+0x8c4>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	60bb      	str	r3, [r7, #8]
					currBlock->BlockOne[1] = testVar[1];
 80012ca:	4b1c      	ldr	r3, [pc, #112]	@ (800133c <currBlock_Rotate+0x8c4>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	605a      	str	r2, [r3, #4]
					currBlock->BlockOne[2] = testVar[2];
 80012d2:	4b1a      	ldr	r3, [pc, #104]	@ (800133c <currBlock_Rotate+0x8c4>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	609a      	str	r2, [r3, #8]

					testVar[1] = currBlock->BlockTwo[1] - 1;// middle bottom to  middle left
 80012da:	4b18      	ldr	r3, [pc, #96]	@ (800133c <currBlock_Rotate+0x8c4>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	3b01      	subs	r3, #1
 80012e2:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockTwo[2] + 1;
 80012e4:	4b15      	ldr	r3, [pc, #84]	@ (800133c <currBlock_Rotate+0x8c4>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	3301      	adds	r3, #1
 80012ec:	60bb      	str	r3, [r7, #8]
					currBlock->BlockTwo[1] = testVar[1];
 80012ee:	4b13      	ldr	r3, [pc, #76]	@ (800133c <currBlock_Rotate+0x8c4>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	60da      	str	r2, [r3, #12]
					currBlock->BlockTwo[2] = testVar[2];
 80012f6:	4b11      	ldr	r3, [pc, #68]	@ (800133c <currBlock_Rotate+0x8c4>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	611a      	str	r2, [r3, #16]

					testVar[1] = currBlock->BlockThree[1];// bottom left to top left
 80012fe:	4b0f      	ldr	r3, [pc, #60]	@ (800133c <currBlock_Rotate+0x8c4>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	695b      	ldr	r3, [r3, #20]
 8001304:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockThree[2] + 2;
 8001306:	4b0d      	ldr	r3, [pc, #52]	@ (800133c <currBlock_Rotate+0x8c4>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	3302      	adds	r3, #2
 800130e:	60bb      	str	r3, [r7, #8]
					currBlock->BlockThree[1] = testVar[1];
 8001310:	4b0a      	ldr	r3, [pc, #40]	@ (800133c <currBlock_Rotate+0x8c4>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	615a      	str	r2, [r3, #20]
					currBlock->BlockThree[2] = testVar[2];
 8001318:	4b08      	ldr	r3, [pc, #32]	@ (800133c <currBlock_Rotate+0x8c4>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	68ba      	ldr	r2, [r7, #8]
 800131e:	619a      	str	r2, [r3, #24]

					currBlock->state = state1;
 8001320:	4b06      	ldr	r3, [pc, #24]	@ (800133c <currBlock_Rotate+0x8c4>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
					break;
 800132a:	e002      	b.n	8001332 <currBlock_Rotate+0x8ba>
				break;
 800132c:	bf00      	nop
 800132e:	e000      	b.n	8001332 <currBlock_Rotate+0x8ba>
				default:
					break;
 8001330:	bf00      	nop
				}
			}
		}
	}
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	200000d4 	.word	0x200000d4

08001340 <currBlock_verifyRotate>:


bool currBlock_verifyRotate(void){
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
	int testVar[2];
	switch(currBlock->type){
 8001346:	4b9e      	ldr	r3, [pc, #632]	@ (80015c0 <currBlock_verifyRotate+0x280>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800134e:	2b06      	cmp	r3, #6
 8001350:	f200 8577 	bhi.w	8001e42 <currBlock_verifyRotate+0xb02>
 8001354:	a201      	add	r2, pc, #4	@ (adr r2, 800135c <currBlock_verifyRotate+0x1c>)
 8001356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800135a:	bf00      	nop
 800135c:	08001379 	.word	0x08001379
 8001360:	08001e43 	.word	0x08001e43
 8001364:	080014cf 	.word	0x080014cf
 8001368:	080015af 	.word	0x080015af
 800136c:	08001693 	.word	0x08001693
 8001370:	08001927 	.word	0x08001927
 8001374:	08001bbd 	.word	0x08001bbd
	case line:{
		switch(currBlock->state){// one block doest move
 8001378:	4b91      	ldr	r3, [pc, #580]	@ (80015c0 <currBlock_verifyRotate+0x280>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001380:	2b00      	cmp	r3, #0
 8001382:	d002      	beq.n	800138a <currBlock_verifyRotate+0x4a>
 8001384:	2b01      	cmp	r3, #1
 8001386:	d04e      	beq.n	8001426 <currBlock_verifyRotate+0xe6>
			if(board[testVar[1]][testVar[2]] != Free){
				return false;
			}
			break;
		default:
			break;
 8001388:	e09f      	b.n	80014ca <currBlock_verifyRotate+0x18a>
			testVar[1] = currBlock->BlockOne[1] + 3;
 800138a:	4b8d      	ldr	r3, [pc, #564]	@ (80015c0 <currBlock_verifyRotate+0x280>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	3303      	adds	r3, #3
 8001392:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockOne[2] - 3;
 8001394:	4b8a      	ldr	r3, [pc, #552]	@ (80015c0 <currBlock_verifyRotate+0x280>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	3b03      	subs	r3, #3
 800139c:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	68b9      	ldr	r1, [r7, #8]
 80013a2:	4888      	ldr	r0, [pc, #544]	@ (80015c4 <currBlock_verifyRotate+0x284>)
 80013a4:	4613      	mov	r3, r2
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	4413      	add	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4413      	add	r3, r2
 80013ae:	4403      	add	r3, r0
 80013b0:	440b      	add	r3, r1
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d002      	beq.n	80013be <currBlock_verifyRotate+0x7e>
				return false;
 80013b8:	2300      	movs	r3, #0
 80013ba:	f000 bd44 	b.w	8001e46 <currBlock_verifyRotate+0xb06>
			testVar[1] = currBlock->BlockTwo[1] + 2;
 80013be:	4b80      	ldr	r3, [pc, #512]	@ (80015c0 <currBlock_verifyRotate+0x280>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	3302      	adds	r3, #2
 80013c6:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockTwo[2] - 2;
 80013c8:	4b7d      	ldr	r3, [pc, #500]	@ (80015c0 <currBlock_verifyRotate+0x280>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	691b      	ldr	r3, [r3, #16]
 80013ce:	3b02      	subs	r3, #2
 80013d0:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	68b9      	ldr	r1, [r7, #8]
 80013d6:	487b      	ldr	r0, [pc, #492]	@ (80015c4 <currBlock_verifyRotate+0x284>)
 80013d8:	4613      	mov	r3, r2
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	4413      	add	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	4403      	add	r3, r0
 80013e4:	440b      	add	r3, r1
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d002      	beq.n	80013f2 <currBlock_verifyRotate+0xb2>
				return false;
 80013ec:	2300      	movs	r3, #0
 80013ee:	f000 bd2a 	b.w	8001e46 <currBlock_verifyRotate+0xb06>
			testVar[1] = currBlock->BlockThree[1] + 1;
 80013f2:	4b73      	ldr	r3, [pc, #460]	@ (80015c0 <currBlock_verifyRotate+0x280>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	695b      	ldr	r3, [r3, #20]
 80013f8:	3301      	adds	r3, #1
 80013fa:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockThree[2] - 1;
 80013fc:	4b70      	ldr	r3, [pc, #448]	@ (80015c0 <currBlock_verifyRotate+0x280>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	3b01      	subs	r3, #1
 8001404:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	68b9      	ldr	r1, [r7, #8]
 800140a:	486e      	ldr	r0, [pc, #440]	@ (80015c4 <currBlock_verifyRotate+0x284>)
 800140c:	4613      	mov	r3, r2
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	4413      	add	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	4403      	add	r3, r0
 8001418:	440b      	add	r3, r1
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d050      	beq.n	80014c2 <currBlock_verifyRotate+0x182>
				return false;
 8001420:	2300      	movs	r3, #0
 8001422:	f000 bd10 	b.w	8001e46 <currBlock_verifyRotate+0xb06>
			testVar[1] = currBlock->BlockOne[1] - 3;
 8001426:	4b66      	ldr	r3, [pc, #408]	@ (80015c0 <currBlock_verifyRotate+0x280>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	3b03      	subs	r3, #3
 800142e:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockOne[2] + 3;
 8001430:	4b63      	ldr	r3, [pc, #396]	@ (80015c0 <currBlock_verifyRotate+0x280>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	3303      	adds	r3, #3
 8001438:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	68b9      	ldr	r1, [r7, #8]
 800143e:	4861      	ldr	r0, [pc, #388]	@ (80015c4 <currBlock_verifyRotate+0x284>)
 8001440:	4613      	mov	r3, r2
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	4413      	add	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4413      	add	r3, r2
 800144a:	4403      	add	r3, r0
 800144c:	440b      	add	r3, r1
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d002      	beq.n	800145a <currBlock_verifyRotate+0x11a>
				return false;
 8001454:	2300      	movs	r3, #0
 8001456:	f000 bcf6 	b.w	8001e46 <currBlock_verifyRotate+0xb06>
			testVar[1] = currBlock->BlockTwo[1] - 2;
 800145a:	4b59      	ldr	r3, [pc, #356]	@ (80015c0 <currBlock_verifyRotate+0x280>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	3b02      	subs	r3, #2
 8001462:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockTwo[2] + 2;
 8001464:	4b56      	ldr	r3, [pc, #344]	@ (80015c0 <currBlock_verifyRotate+0x280>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	3302      	adds	r3, #2
 800146c:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	68b9      	ldr	r1, [r7, #8]
 8001472:	4854      	ldr	r0, [pc, #336]	@ (80015c4 <currBlock_verifyRotate+0x284>)
 8001474:	4613      	mov	r3, r2
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	4413      	add	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	4403      	add	r3, r0
 8001480:	440b      	add	r3, r1
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d002      	beq.n	800148e <currBlock_verifyRotate+0x14e>
				return false;
 8001488:	2300      	movs	r3, #0
 800148a:	f000 bcdc 	b.w	8001e46 <currBlock_verifyRotate+0xb06>
			testVar[1] = currBlock->BlockThree[1] - 1;
 800148e:	4b4c      	ldr	r3, [pc, #304]	@ (80015c0 <currBlock_verifyRotate+0x280>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	695b      	ldr	r3, [r3, #20]
 8001494:	3b01      	subs	r3, #1
 8001496:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockThree[2] + 1;
 8001498:	4b49      	ldr	r3, [pc, #292]	@ (80015c0 <currBlock_verifyRotate+0x280>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	3301      	adds	r3, #1
 80014a0:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	68b9      	ldr	r1, [r7, #8]
 80014a6:	4847      	ldr	r0, [pc, #284]	@ (80015c4 <currBlock_verifyRotate+0x284>)
 80014a8:	4613      	mov	r3, r2
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	4413      	add	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	4403      	add	r3, r0
 80014b4:	440b      	add	r3, r1
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d005      	beq.n	80014c8 <currBlock_verifyRotate+0x188>
				return false;
 80014bc:	2300      	movs	r3, #0
 80014be:	f000 bcc2 	b.w	8001e46 <currBlock_verifyRotate+0xb06>
			break;
 80014c2:	bf00      	nop
 80014c4:	f000 bcbe 	b.w	8001e44 <currBlock_verifyRotate+0xb04>
			break;
 80014c8:	bf00      	nop
		}
	}

	case Square:{
		//no work
		break;
 80014ca:	f000 bcbb 	b.w	8001e44 <currBlock_verifyRotate+0xb04>
	}
	break;
	case LeftZigZag:{
		switch(currBlock->state){// only two rotations
 80014ce:	4b3c      	ldr	r3, [pc, #240]	@ (80015c0 <currBlock_verifyRotate+0x280>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d002      	beq.n	80014e0 <currBlock_verifyRotate+0x1a0>
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d032      	beq.n	8001544 <currBlock_verifyRotate+0x204>
			if(board[testVar[1]][testVar[2]] != Free){
				return false;
			}
			break;
		default:
			break;
 80014de:	e066      	b.n	80015ae <currBlock_verifyRotate+0x26e>
			testVar[1] = currBlock->BlockOne[1];
 80014e0:	4b37      	ldr	r3, [pc, #220]	@ (80015c0 <currBlock_verifyRotate+0x280>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockOne[2] - 2;
 80014e8:	4b35      	ldr	r3, [pc, #212]	@ (80015c0 <currBlock_verifyRotate+0x280>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	3b02      	subs	r3, #2
 80014f0:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	68b9      	ldr	r1, [r7, #8]
 80014f6:	4833      	ldr	r0, [pc, #204]	@ (80015c4 <currBlock_verifyRotate+0x284>)
 80014f8:	4613      	mov	r3, r2
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	4413      	add	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	4403      	add	r3, r0
 8001504:	440b      	add	r3, r1
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d002      	beq.n	8001512 <currBlock_verifyRotate+0x1d2>
				return false;
 800150c:	2300      	movs	r3, #0
 800150e:	f000 bc9a 	b.w	8001e46 <currBlock_verifyRotate+0xb06>
			testVar[1] = currBlock->BlockTwo[1] - 2;
 8001512:	4b2b      	ldr	r3, [pc, #172]	@ (80015c0 <currBlock_verifyRotate+0x280>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	3b02      	subs	r3, #2
 800151a:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockTwo[2];
 800151c:	4b28      	ldr	r3, [pc, #160]	@ (80015c0 <currBlock_verifyRotate+0x280>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	68b9      	ldr	r1, [r7, #8]
 8001528:	4826      	ldr	r0, [pc, #152]	@ (80015c4 <currBlock_verifyRotate+0x284>)
 800152a:	4613      	mov	r3, r2
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	4413      	add	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	4403      	add	r3, r0
 8001536:	440b      	add	r3, r1
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d034      	beq.n	80015a8 <currBlock_verifyRotate+0x268>
				return false;
 800153e:	2300      	movs	r3, #0
 8001540:	f000 bc81 	b.w	8001e46 <currBlock_verifyRotate+0xb06>
			testVar[1] = currBlock->BlockOne[1];
 8001544:	4b1e      	ldr	r3, [pc, #120]	@ (80015c0 <currBlock_verifyRotate+0x280>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockOne[2] + 2;
 800154c:	4b1c      	ldr	r3, [pc, #112]	@ (80015c0 <currBlock_verifyRotate+0x280>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	3302      	adds	r3, #2
 8001554:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	68b9      	ldr	r1, [r7, #8]
 800155a:	481a      	ldr	r0, [pc, #104]	@ (80015c4 <currBlock_verifyRotate+0x284>)
 800155c:	4613      	mov	r3, r2
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	4413      	add	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	4403      	add	r3, r0
 8001568:	440b      	add	r3, r1
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d002      	beq.n	8001576 <currBlock_verifyRotate+0x236>
				return false;
 8001570:	2300      	movs	r3, #0
 8001572:	f000 bc68 	b.w	8001e46 <currBlock_verifyRotate+0xb06>
			testVar[1] = currBlock->BlockTwo[1] + 2;
 8001576:	4b12      	ldr	r3, [pc, #72]	@ (80015c0 <currBlock_verifyRotate+0x280>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	3302      	adds	r3, #2
 800157e:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockTwo[2];
 8001580:	4b0f      	ldr	r3, [pc, #60]	@ (80015c0 <currBlock_verifyRotate+0x280>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	68b9      	ldr	r1, [r7, #8]
 800158c:	480d      	ldr	r0, [pc, #52]	@ (80015c4 <currBlock_verifyRotate+0x284>)
 800158e:	4613      	mov	r3, r2
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	4413      	add	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	4413      	add	r3, r2
 8001598:	4403      	add	r3, r0
 800159a:	440b      	add	r3, r1
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d004      	beq.n	80015ac <currBlock_verifyRotate+0x26c>
				return false;
 80015a2:	2300      	movs	r3, #0
 80015a4:	f000 bc4f 	b.w	8001e46 <currBlock_verifyRotate+0xb06>
			break;
 80015a8:	bf00      	nop
 80015aa:	e000      	b.n	80015ae <currBlock_verifyRotate+0x26e>
			break;
 80015ac:	bf00      	nop
		}
	}
	case RightZigZag:{
		switch(currBlock->state){//only two rotations
 80015ae:	4b04      	ldr	r3, [pc, #16]	@ (80015c0 <currBlock_verifyRotate+0x280>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d006      	beq.n	80015c8 <currBlock_verifyRotate+0x288>
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d036      	beq.n	800162c <currBlock_verifyRotate+0x2ec>
			if(board[testVar[1]][testVar[2]] != Free){
				return false;
			}
			break;
		default:
			break;
 80015be:	e068      	b.n	8001692 <currBlock_verifyRotate+0x352>
 80015c0:	200000d4 	.word	0x200000d4
 80015c4:	2000005c 	.word	0x2000005c
			testVar[1] = currBlock->BlockOne[1] - 2;// rightmost most block top to top left
 80015c8:	4b9f      	ldr	r3, [pc, #636]	@ (8001848 <currBlock_verifyRotate+0x508>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	3b02      	subs	r3, #2
 80015d0:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockOne[2];
 80015d2:	4b9d      	ldr	r3, [pc, #628]	@ (8001848 <currBlock_verifyRotate+0x508>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	68b9      	ldr	r1, [r7, #8]
 80015de:	489b      	ldr	r0, [pc, #620]	@ (800184c <currBlock_verifyRotate+0x50c>)
 80015e0:	4613      	mov	r3, r2
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	4413      	add	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4413      	add	r3, r2
 80015ea:	4403      	add	r3, r0
 80015ec:	440b      	add	r3, r1
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d002      	beq.n	80015fa <currBlock_verifyRotate+0x2ba>
				return false;
 80015f4:	2300      	movs	r3, #0
 80015f6:	f000 bc26 	b.w	8001e46 <currBlock_verifyRotate+0xb06>
			testVar[1] = currBlock->BlockTwo[1];// top middle to bottom middle
 80015fa:	4b93      	ldr	r3, [pc, #588]	@ (8001848 <currBlock_verifyRotate+0x508>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockTwo[2] - 2;
 8001602:	4b91      	ldr	r3, [pc, #580]	@ (8001848 <currBlock_verifyRotate+0x508>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	3b02      	subs	r3, #2
 800160a:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	68b9      	ldr	r1, [r7, #8]
 8001610:	488e      	ldr	r0, [pc, #568]	@ (800184c <currBlock_verifyRotate+0x50c>)
 8001612:	4613      	mov	r3, r2
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	4413      	add	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	4403      	add	r3, r0
 800161e:	440b      	add	r3, r1
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d032      	beq.n	800168c <currBlock_verifyRotate+0x34c>
				return false;
 8001626:	2300      	movs	r3, #0
 8001628:	f000 bc0d 	b.w	8001e46 <currBlock_verifyRotate+0xb06>
			testVar[1] = currBlock->BlockOne[1] + 2;// rightmost most block top to top left inverse
 800162c:	4b86      	ldr	r3, [pc, #536]	@ (8001848 <currBlock_verifyRotate+0x508>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	3302      	adds	r3, #2
 8001634:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockOne[2];
 8001636:	4b84      	ldr	r3, [pc, #528]	@ (8001848 <currBlock_verifyRotate+0x508>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	68b9      	ldr	r1, [r7, #8]
 8001642:	4882      	ldr	r0, [pc, #520]	@ (800184c <currBlock_verifyRotate+0x50c>)
 8001644:	4613      	mov	r3, r2
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	4413      	add	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4413      	add	r3, r2
 800164e:	4403      	add	r3, r0
 8001650:	440b      	add	r3, r1
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <currBlock_verifyRotate+0x31c>
				return false;
 8001658:	2300      	movs	r3, #0
 800165a:	e3f4      	b.n	8001e46 <currBlock_verifyRotate+0xb06>
			testVar[1] = currBlock->BlockTwo[1];// top middle to bottom middle inverse
 800165c:	4b7a      	ldr	r3, [pc, #488]	@ (8001848 <currBlock_verifyRotate+0x508>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockTwo[2] + 2;
 8001664:	4b78      	ldr	r3, [pc, #480]	@ (8001848 <currBlock_verifyRotate+0x508>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	3302      	adds	r3, #2
 800166c:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	68b9      	ldr	r1, [r7, #8]
 8001672:	4876      	ldr	r0, [pc, #472]	@ (800184c <currBlock_verifyRotate+0x50c>)
 8001674:	4613      	mov	r3, r2
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	4413      	add	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	4403      	add	r3, r0
 8001680:	440b      	add	r3, r1
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d003      	beq.n	8001690 <currBlock_verifyRotate+0x350>
				return false;
 8001688:	2300      	movs	r3, #0
 800168a:	e3dc      	b.n	8001e46 <currBlock_verifyRotate+0xb06>
			break;
 800168c:	bf00      	nop
 800168e:	e000      	b.n	8001692 <currBlock_verifyRotate+0x352>
			break;
 8001690:	bf00      	nop
		}
	}
	case RightL:{
		switch(currBlock->state){// 4 rotations
 8001692:	4b6d      	ldr	r3, [pc, #436]	@ (8001848 <currBlock_verifyRotate+0x508>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800169a:	2b03      	cmp	r3, #3
 800169c:	f200 813a 	bhi.w	8001914 <currBlock_verifyRotate+0x5d4>
 80016a0:	a201      	add	r2, pc, #4	@ (adr r2, 80016a8 <currBlock_verifyRotate+0x368>)
 80016a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a6:	bf00      	nop
 80016a8:	080016b9 	.word	0x080016b9
 80016ac:	0800174f 	.word	0x0800174f
 80016b0:	080017e5 	.word	0x080017e5
 80016b4:	08001881 	.word	0x08001881
		case state1:
			testVar[1] = currBlock->BlockOne[1] - 1;//  mid right to mid bottom
 80016b8:	4b63      	ldr	r3, [pc, #396]	@ (8001848 <currBlock_verifyRotate+0x508>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	3b01      	subs	r3, #1
 80016c0:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockOne[2] - 1;
 80016c2:	4b61      	ldr	r3, [pc, #388]	@ (8001848 <currBlock_verifyRotate+0x508>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	3b01      	subs	r3, #1
 80016ca:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	68b9      	ldr	r1, [r7, #8]
 80016d0:	485e      	ldr	r0, [pc, #376]	@ (800184c <currBlock_verifyRotate+0x50c>)
 80016d2:	4613      	mov	r3, r2
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	4413      	add	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4413      	add	r3, r2
 80016dc:	4403      	add	r3, r0
 80016de:	440b      	add	r3, r1
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <currBlock_verifyRotate+0x3aa>
				return false;
 80016e6:	2300      	movs	r3, #0
 80016e8:	e3ad      	b.n	8001e46 <currBlock_verifyRotate+0xb06>
			}
			testVar[1] = currBlock->BlockTwo[1] + 1;// middle left to top middle
 80016ea:	4b57      	ldr	r3, [pc, #348]	@ (8001848 <currBlock_verifyRotate+0x508>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	3301      	adds	r3, #1
 80016f2:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockTwo[2] + 1;
 80016f4:	4b54      	ldr	r3, [pc, #336]	@ (8001848 <currBlock_verifyRotate+0x508>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	3301      	adds	r3, #1
 80016fc:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	68b9      	ldr	r1, [r7, #8]
 8001702:	4852      	ldr	r0, [pc, #328]	@ (800184c <currBlock_verifyRotate+0x50c>)
 8001704:	4613      	mov	r3, r2
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	4413      	add	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	4403      	add	r3, r0
 8001710:	440b      	add	r3, r1
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <currBlock_verifyRotate+0x3dc>
				return false;
 8001718:	2300      	movs	r3, #0
 800171a:	e394      	b.n	8001e46 <currBlock_verifyRotate+0xb06>
			}
			testVar[1] = currBlock->BlockThree[1] + 2;// top left to top right
 800171c:	4b4a      	ldr	r3, [pc, #296]	@ (8001848 <currBlock_verifyRotate+0x508>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	3302      	adds	r3, #2
 8001724:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockThree[2];
 8001726:	4b48      	ldr	r3, [pc, #288]	@ (8001848 <currBlock_verifyRotate+0x508>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	68b9      	ldr	r1, [r7, #8]
 8001732:	4846      	ldr	r0, [pc, #280]	@ (800184c <currBlock_verifyRotate+0x50c>)
 8001734:	4613      	mov	r3, r2
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	4413      	add	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	4403      	add	r3, r0
 8001740:	440b      	add	r3, r1
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	f000 80e7 	beq.w	8001918 <currBlock_verifyRotate+0x5d8>
				return false;
 800174a:	2300      	movs	r3, #0
 800174c:	e37b      	b.n	8001e46 <currBlock_verifyRotate+0xb06>
			}
			break;
		case state2:
			testVar[1] = currBlock->BlockOne[1] - 1;//  mid bottom to mid left
 800174e:	4b3e      	ldr	r3, [pc, #248]	@ (8001848 <currBlock_verifyRotate+0x508>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	3b01      	subs	r3, #1
 8001756:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockOne[2] + 1;
 8001758:	4b3b      	ldr	r3, [pc, #236]	@ (8001848 <currBlock_verifyRotate+0x508>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	3301      	adds	r3, #1
 8001760:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	68b9      	ldr	r1, [r7, #8]
 8001766:	4839      	ldr	r0, [pc, #228]	@ (800184c <currBlock_verifyRotate+0x50c>)
 8001768:	4613      	mov	r3, r2
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	4413      	add	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	4403      	add	r3, r0
 8001774:	440b      	add	r3, r1
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <currBlock_verifyRotate+0x440>
				return false;
 800177c:	2300      	movs	r3, #0
 800177e:	e362      	b.n	8001e46 <currBlock_verifyRotate+0xb06>
			}
			testVar[1] = currBlock->BlockTwo[1] + 1;//  top middle to middle right
 8001780:	4b31      	ldr	r3, [pc, #196]	@ (8001848 <currBlock_verifyRotate+0x508>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	3301      	adds	r3, #1
 8001788:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockTwo[2] - 1;
 800178a:	4b2f      	ldr	r3, [pc, #188]	@ (8001848 <currBlock_verifyRotate+0x508>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	3b01      	subs	r3, #1
 8001792:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	68b9      	ldr	r1, [r7, #8]
 8001798:	482c      	ldr	r0, [pc, #176]	@ (800184c <currBlock_verifyRotate+0x50c>)
 800179a:	4613      	mov	r3, r2
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	4413      	add	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	4403      	add	r3, r0
 80017a6:	440b      	add	r3, r1
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <currBlock_verifyRotate+0x472>
				return false;
 80017ae:	2300      	movs	r3, #0
 80017b0:	e349      	b.n	8001e46 <currBlock_verifyRotate+0xb06>
			}
			testVar[1] = currBlock->BlockThree[1];//  top right to bottom right
 80017b2:	4b25      	ldr	r3, [pc, #148]	@ (8001848 <currBlock_verifyRotate+0x508>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	695b      	ldr	r3, [r3, #20]
 80017b8:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockThree[2] - 2;
 80017ba:	4b23      	ldr	r3, [pc, #140]	@ (8001848 <currBlock_verifyRotate+0x508>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	3b02      	subs	r3, #2
 80017c2:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	68b9      	ldr	r1, [r7, #8]
 80017c8:	4820      	ldr	r0, [pc, #128]	@ (800184c <currBlock_verifyRotate+0x50c>)
 80017ca:	4613      	mov	r3, r2
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	4413      	add	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	4403      	add	r3, r0
 80017d6:	440b      	add	r3, r1
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f000 809e 	beq.w	800191c <currBlock_verifyRotate+0x5dc>
				return false;
 80017e0:	2300      	movs	r3, #0
 80017e2:	e330      	b.n	8001e46 <currBlock_verifyRotate+0xb06>
			}
			break;
		case state3:
			testVar[1] = currBlock->BlockOne[1] + 1;//  mid left to mid top
 80017e4:	4b18      	ldr	r3, [pc, #96]	@ (8001848 <currBlock_verifyRotate+0x508>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	3301      	adds	r3, #1
 80017ec:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockOne[2] + 1;
 80017ee:	4b16      	ldr	r3, [pc, #88]	@ (8001848 <currBlock_verifyRotate+0x508>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	3301      	adds	r3, #1
 80017f6:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	68b9      	ldr	r1, [r7, #8]
 80017fc:	4813      	ldr	r0, [pc, #76]	@ (800184c <currBlock_verifyRotate+0x50c>)
 80017fe:	4613      	mov	r3, r2
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	4413      	add	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4413      	add	r3, r2
 8001808:	4403      	add	r3, r0
 800180a:	440b      	add	r3, r1
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <currBlock_verifyRotate+0x4d6>
				return false;
 8001812:	2300      	movs	r3, #0
 8001814:	e317      	b.n	8001e46 <currBlock_verifyRotate+0xb06>
			}
			testVar[1] = currBlock->BlockTwo[1] - 1;//  middle right mid bottom
 8001816:	4b0c      	ldr	r3, [pc, #48]	@ (8001848 <currBlock_verifyRotate+0x508>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	3b01      	subs	r3, #1
 800181e:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockTwo[2] - 1;
 8001820:	4b09      	ldr	r3, [pc, #36]	@ (8001848 <currBlock_verifyRotate+0x508>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	3b01      	subs	r3, #1
 8001828:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	68b9      	ldr	r1, [r7, #8]
 800182e:	4807      	ldr	r0, [pc, #28]	@ (800184c <currBlock_verifyRotate+0x50c>)
 8001830:	4613      	mov	r3, r2
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	4413      	add	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	4403      	add	r3, r0
 800183c:	440b      	add	r3, r1
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d005      	beq.n	8001850 <currBlock_verifyRotate+0x510>
				return false;
 8001844:	2300      	movs	r3, #0
 8001846:	e2fe      	b.n	8001e46 <currBlock_verifyRotate+0xb06>
 8001848:	200000d4 	.word	0x200000d4
 800184c:	2000005c 	.word	0x2000005c
			}
			testVar[1] = currBlock->BlockThree[1] - 2;//  bottom right to bottom left
 8001850:	4b96      	ldr	r3, [pc, #600]	@ (8001aac <currBlock_verifyRotate+0x76c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	3b02      	subs	r3, #2
 8001858:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockThree[2];
 800185a:	4b94      	ldr	r3, [pc, #592]	@ (8001aac <currBlock_verifyRotate+0x76c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	68b9      	ldr	r1, [r7, #8]
 8001866:	4892      	ldr	r0, [pc, #584]	@ (8001ab0 <currBlock_verifyRotate+0x770>)
 8001868:	4613      	mov	r3, r2
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	4413      	add	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	4403      	add	r3, r0
 8001874:	440b      	add	r3, r1
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d051      	beq.n	8001920 <currBlock_verifyRotate+0x5e0>
				return false;
 800187c:	2300      	movs	r3, #0
 800187e:	e2e2      	b.n	8001e46 <currBlock_verifyRotate+0xb06>
			}
			break;
		case state4:
			testVar[1] = currBlock->BlockOne[1] + 1;//  mid top to mid right
 8001880:	4b8a      	ldr	r3, [pc, #552]	@ (8001aac <currBlock_verifyRotate+0x76c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	3301      	adds	r3, #1
 8001888:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockOne[2] - 1;
 800188a:	4b88      	ldr	r3, [pc, #544]	@ (8001aac <currBlock_verifyRotate+0x76c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	3b01      	subs	r3, #1
 8001892:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	68b9      	ldr	r1, [r7, #8]
 8001898:	4885      	ldr	r0, [pc, #532]	@ (8001ab0 <currBlock_verifyRotate+0x770>)
 800189a:	4613      	mov	r3, r2
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	4413      	add	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	4403      	add	r3, r0
 80018a6:	440b      	add	r3, r1
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <currBlock_verifyRotate+0x572>
				return false;
 80018ae:	2300      	movs	r3, #0
 80018b0:	e2c9      	b.n	8001e46 <currBlock_verifyRotate+0xb06>
			}
			testVar[1] = currBlock->BlockTwo[1] - 1;//  middle right mid bottom
 80018b2:	4b7e      	ldr	r3, [pc, #504]	@ (8001aac <currBlock_verifyRotate+0x76c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	3b01      	subs	r3, #1
 80018ba:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockTwo[2] - 1;
 80018bc:	4b7b      	ldr	r3, [pc, #492]	@ (8001aac <currBlock_verifyRotate+0x76c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	68b9      	ldr	r1, [r7, #8]
 80018ca:	4879      	ldr	r0, [pc, #484]	@ (8001ab0 <currBlock_verifyRotate+0x770>)
 80018cc:	4613      	mov	r3, r2
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	4413      	add	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4413      	add	r3, r2
 80018d6:	4403      	add	r3, r0
 80018d8:	440b      	add	r3, r1
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <currBlock_verifyRotate+0x5a4>
				return false;
 80018e0:	2300      	movs	r3, #0
 80018e2:	e2b0      	b.n	8001e46 <currBlock_verifyRotate+0xb06>
			}
			testVar[1] = currBlock->BlockThree[1] - 2;//  bottom right to bottom left
 80018e4:	4b71      	ldr	r3, [pc, #452]	@ (8001aac <currBlock_verifyRotate+0x76c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	3b02      	subs	r3, #2
 80018ec:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockThree[2];
 80018ee:	4b6f      	ldr	r3, [pc, #444]	@ (8001aac <currBlock_verifyRotate+0x76c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	68b9      	ldr	r1, [r7, #8]
 80018fa:	486d      	ldr	r0, [pc, #436]	@ (8001ab0 <currBlock_verifyRotate+0x770>)
 80018fc:	4613      	mov	r3, r2
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	4413      	add	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	4403      	add	r3, r0
 8001908:	440b      	add	r3, r1
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d009      	beq.n	8001924 <currBlock_verifyRotate+0x5e4>
				return false;
 8001910:	2300      	movs	r3, #0
 8001912:	e298      	b.n	8001e46 <currBlock_verifyRotate+0xb06>
			}
			break;
		default:
			break;
 8001914:	bf00      	nop
 8001916:	e006      	b.n	8001926 <currBlock_verifyRotate+0x5e6>
			break;
 8001918:	bf00      	nop
 800191a:	e004      	b.n	8001926 <currBlock_verifyRotate+0x5e6>
			break;
 800191c:	bf00      	nop
 800191e:	e002      	b.n	8001926 <currBlock_verifyRotate+0x5e6>
			break;
 8001920:	bf00      	nop
 8001922:	e000      	b.n	8001926 <currBlock_verifyRotate+0x5e6>
			break;
 8001924:	bf00      	nop
		}
	}
	case LeftL:{
		switch(currBlock->state){// 4 rotations
 8001926:	4b61      	ldr	r3, [pc, #388]	@ (8001aac <currBlock_verifyRotate+0x76c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800192e:	2b03      	cmp	r3, #3
 8001930:	f200 813b 	bhi.w	8001baa <currBlock_verifyRotate+0x86a>
 8001934:	a201      	add	r2, pc, #4	@ (adr r2, 800193c <currBlock_verifyRotate+0x5fc>)
 8001936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800193a:	bf00      	nop
 800193c:	0800194d 	.word	0x0800194d
 8001940:	080019e3 	.word	0x080019e3
 8001944:	08001a79 	.word	0x08001a79
 8001948:	08001b17 	.word	0x08001b17
		case state1:
			testVar[1] = currBlock->BlockOne[1] + 1;//  mid left to mid top
 800194c:	4b57      	ldr	r3, [pc, #348]	@ (8001aac <currBlock_verifyRotate+0x76c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	3301      	adds	r3, #1
 8001954:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockOne[2] + 1;
 8001956:	4b55      	ldr	r3, [pc, #340]	@ (8001aac <currBlock_verifyRotate+0x76c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	3301      	adds	r3, #1
 800195e:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	68b9      	ldr	r1, [r7, #8]
 8001964:	4852      	ldr	r0, [pc, #328]	@ (8001ab0 <currBlock_verifyRotate+0x770>)
 8001966:	4613      	mov	r3, r2
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	4413      	add	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4413      	add	r3, r2
 8001970:	4403      	add	r3, r0
 8001972:	440b      	add	r3, r1
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <currBlock_verifyRotate+0x63e>
				return false;
 800197a:	2300      	movs	r3, #0
 800197c:	e263      	b.n	8001e46 <currBlock_verifyRotate+0xb06>
			}
			testVar[1] = currBlock->BlockTwo[1] - 1;// middle right to bottom middle
 800197e:	4b4b      	ldr	r3, [pc, #300]	@ (8001aac <currBlock_verifyRotate+0x76c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	3b01      	subs	r3, #1
 8001986:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockTwo[2] - 1;
 8001988:	4b48      	ldr	r3, [pc, #288]	@ (8001aac <currBlock_verifyRotate+0x76c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	3b01      	subs	r3, #1
 8001990:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	68b9      	ldr	r1, [r7, #8]
 8001996:	4846      	ldr	r0, [pc, #280]	@ (8001ab0 <currBlock_verifyRotate+0x770>)
 8001998:	4613      	mov	r3, r2
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	4413      	add	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	4403      	add	r3, r0
 80019a4:	440b      	add	r3, r1
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <currBlock_verifyRotate+0x670>
				return false;
 80019ac:	2300      	movs	r3, #0
 80019ae:	e24a      	b.n	8001e46 <currBlock_verifyRotate+0xb06>
			}
			testVar[1] = currBlock->BlockThree[1];// top right to bottom right
 80019b0:	4b3e      	ldr	r3, [pc, #248]	@ (8001aac <currBlock_verifyRotate+0x76c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockThree[2] - 2;
 80019b8:	4b3c      	ldr	r3, [pc, #240]	@ (8001aac <currBlock_verifyRotate+0x76c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	3b02      	subs	r3, #2
 80019c0:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	68b9      	ldr	r1, [r7, #8]
 80019c6:	483a      	ldr	r0, [pc, #232]	@ (8001ab0 <currBlock_verifyRotate+0x770>)
 80019c8:	4613      	mov	r3, r2
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	4413      	add	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4413      	add	r3, r2
 80019d2:	4403      	add	r3, r0
 80019d4:	440b      	add	r3, r1
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f000 80e8 	beq.w	8001bae <currBlock_verifyRotate+0x86e>
				return false;
 80019de:	2300      	movs	r3, #0
 80019e0:	e231      	b.n	8001e46 <currBlock_verifyRotate+0xb06>
			}
			break;
		case state2:
			testVar[1] = currBlock->BlockOne[1] + 1;//   mid top to mid right
 80019e2:	4b32      	ldr	r3, [pc, #200]	@ (8001aac <currBlock_verifyRotate+0x76c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	3301      	adds	r3, #1
 80019ea:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockOne[2] - 1;
 80019ec:	4b2f      	ldr	r3, [pc, #188]	@ (8001aac <currBlock_verifyRotate+0x76c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	68b9      	ldr	r1, [r7, #8]
 80019fa:	482d      	ldr	r0, [pc, #180]	@ (8001ab0 <currBlock_verifyRotate+0x770>)
 80019fc:	4613      	mov	r3, r2
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	4413      	add	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	4403      	add	r3, r0
 8001a08:	440b      	add	r3, r1
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <currBlock_verifyRotate+0x6d4>
				return false;
 8001a10:	2300      	movs	r3, #0
 8001a12:	e218      	b.n	8001e46 <currBlock_verifyRotate+0xb06>
			}
			testVar[1] = currBlock->BlockTwo[1] - 1;//  bottom middle to middle left
 8001a14:	4b25      	ldr	r3, [pc, #148]	@ (8001aac <currBlock_verifyRotate+0x76c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockTwo[2] + 1;
 8001a1e:	4b23      	ldr	r3, [pc, #140]	@ (8001aac <currBlock_verifyRotate+0x76c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	3301      	adds	r3, #1
 8001a26:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	68b9      	ldr	r1, [r7, #8]
 8001a2c:	4820      	ldr	r0, [pc, #128]	@ (8001ab0 <currBlock_verifyRotate+0x770>)
 8001a2e:	4613      	mov	r3, r2
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	4413      	add	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	4403      	add	r3, r0
 8001a3a:	440b      	add	r3, r1
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <currBlock_verifyRotate+0x706>
				return false;
 8001a42:	2300      	movs	r3, #0
 8001a44:	e1ff      	b.n	8001e46 <currBlock_verifyRotate+0xb06>
			}
			testVar[1] = currBlock->BlockThree[1] - 2;//  bottom right to bottom left
 8001a46:	4b19      	ldr	r3, [pc, #100]	@ (8001aac <currBlock_verifyRotate+0x76c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	3b02      	subs	r3, #2
 8001a4e:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockThree[2];
 8001a50:	4b16      	ldr	r3, [pc, #88]	@ (8001aac <currBlock_verifyRotate+0x76c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	68b9      	ldr	r1, [r7, #8]
 8001a5c:	4814      	ldr	r0, [pc, #80]	@ (8001ab0 <currBlock_verifyRotate+0x770>)
 8001a5e:	4613      	mov	r3, r2
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	4413      	add	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4413      	add	r3, r2
 8001a68:	4403      	add	r3, r0
 8001a6a:	440b      	add	r3, r1
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f000 809f 	beq.w	8001bb2 <currBlock_verifyRotate+0x872>
				return false;
 8001a74:	2300      	movs	r3, #0
 8001a76:	e1e6      	b.n	8001e46 <currBlock_verifyRotate+0xb06>
			}
			break;
		case state3:
			testVar[1] = currBlock->BlockOne[1] - 1;//    mid right mid bottom
 8001a78:	4b0c      	ldr	r3, [pc, #48]	@ (8001aac <currBlock_verifyRotate+0x76c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockOne[2] - 1;
 8001a82:	4b0a      	ldr	r3, [pc, #40]	@ (8001aac <currBlock_verifyRotate+0x76c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	68b9      	ldr	r1, [r7, #8]
 8001a90:	4807      	ldr	r0, [pc, #28]	@ (8001ab0 <currBlock_verifyRotate+0x770>)
 8001a92:	4613      	mov	r3, r2
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	4413      	add	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	4403      	add	r3, r0
 8001a9e:	440b      	add	r3, r1
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d006      	beq.n	8001ab4 <currBlock_verifyRotate+0x774>
				return false;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	e1cd      	b.n	8001e46 <currBlock_verifyRotate+0xb06>
 8001aaa:	bf00      	nop
 8001aac:	200000d4 	.word	0x200000d4
 8001ab0:	2000005c 	.word	0x2000005c
			}
			testVar[1] = currBlock->BlockTwo[1] + 1;//   middle left to middle top
 8001ab4:	4b94      	ldr	r3, [pc, #592]	@ (8001d08 <currBlock_verifyRotate+0x9c8>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	3301      	adds	r3, #1
 8001abc:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockTwo[2] + 1;
 8001abe:	4b92      	ldr	r3, [pc, #584]	@ (8001d08 <currBlock_verifyRotate+0x9c8>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	68b9      	ldr	r1, [r7, #8]
 8001acc:	488f      	ldr	r0, [pc, #572]	@ (8001d0c <currBlock_verifyRotate+0x9cc>)
 8001ace:	4613      	mov	r3, r2
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	4413      	add	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	4403      	add	r3, r0
 8001ada:	440b      	add	r3, r1
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <currBlock_verifyRotate+0x7a6>
				return false;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	e1af      	b.n	8001e46 <currBlock_verifyRotate+0xb06>
			}
			testVar[1] = currBlock->BlockThree[1];//   bottom left to top left
 8001ae6:	4b88      	ldr	r3, [pc, #544]	@ (8001d08 <currBlock_verifyRotate+0x9c8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	695b      	ldr	r3, [r3, #20]
 8001aec:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockThree[2] + 2;
 8001aee:	4b86      	ldr	r3, [pc, #536]	@ (8001d08 <currBlock_verifyRotate+0x9c8>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	3302      	adds	r3, #2
 8001af6:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	68b9      	ldr	r1, [r7, #8]
 8001afc:	4883      	ldr	r0, [pc, #524]	@ (8001d0c <currBlock_verifyRotate+0x9cc>)
 8001afe:	4613      	mov	r3, r2
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	4413      	add	r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	4413      	add	r3, r2
 8001b08:	4403      	add	r3, r0
 8001b0a:	440b      	add	r3, r1
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d051      	beq.n	8001bb6 <currBlock_verifyRotate+0x876>
				return false;
 8001b12:	2300      	movs	r3, #0
 8001b14:	e197      	b.n	8001e46 <currBlock_verifyRotate+0xb06>
			}
			break;
		case state4:
			testVar[1] = currBlock->BlockOne[1] - 1;//   mid bottom to mid left
 8001b16:	4b7c      	ldr	r3, [pc, #496]	@ (8001d08 <currBlock_verifyRotate+0x9c8>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockOne[2] + 1;
 8001b20:	4b79      	ldr	r3, [pc, #484]	@ (8001d08 <currBlock_verifyRotate+0x9c8>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	3301      	adds	r3, #1
 8001b28:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	68b9      	ldr	r1, [r7, #8]
 8001b2e:	4877      	ldr	r0, [pc, #476]	@ (8001d0c <currBlock_verifyRotate+0x9cc>)
 8001b30:	4613      	mov	r3, r2
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	4413      	add	r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	4413      	add	r3, r2
 8001b3a:	4403      	add	r3, r0
 8001b3c:	440b      	add	r3, r1
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <currBlock_verifyRotate+0x808>
				return false;
 8001b44:	2300      	movs	r3, #0
 8001b46:	e17e      	b.n	8001e46 <currBlock_verifyRotate+0xb06>
			}
			testVar[1] = currBlock->BlockTwo[1] + 1;//    middle top to mid right
 8001b48:	4b6f      	ldr	r3, [pc, #444]	@ (8001d08 <currBlock_verifyRotate+0x9c8>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockTwo[2] - 1;
 8001b52:	4b6d      	ldr	r3, [pc, #436]	@ (8001d08 <currBlock_verifyRotate+0x9c8>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	68b9      	ldr	r1, [r7, #8]
 8001b60:	486a      	ldr	r0, [pc, #424]	@ (8001d0c <currBlock_verifyRotate+0x9cc>)
 8001b62:	4613      	mov	r3, r2
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	4413      	add	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	4403      	add	r3, r0
 8001b6e:	440b      	add	r3, r1
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <currBlock_verifyRotate+0x83a>
				return false;
 8001b76:	2300      	movs	r3, #0
 8001b78:	e165      	b.n	8001e46 <currBlock_verifyRotate+0xb06>
			}
			testVar[1] = currBlock->BlockThree[1] + 2;//   top left to top right
 8001b7a:	4b63      	ldr	r3, [pc, #396]	@ (8001d08 <currBlock_verifyRotate+0x9c8>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	695b      	ldr	r3, [r3, #20]
 8001b80:	3302      	adds	r3, #2
 8001b82:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockThree[2];
 8001b84:	4b60      	ldr	r3, [pc, #384]	@ (8001d08 <currBlock_verifyRotate+0x9c8>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	68b9      	ldr	r1, [r7, #8]
 8001b90:	485e      	ldr	r0, [pc, #376]	@ (8001d0c <currBlock_verifyRotate+0x9cc>)
 8001b92:	4613      	mov	r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	4413      	add	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	4403      	add	r3, r0
 8001b9e:	440b      	add	r3, r1
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d009      	beq.n	8001bba <currBlock_verifyRotate+0x87a>
				return false;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	e14d      	b.n	8001e46 <currBlock_verifyRotate+0xb06>
			}
			break;
		default:
			break;
 8001baa:	bf00      	nop
 8001bac:	e006      	b.n	8001bbc <currBlock_verifyRotate+0x87c>
			break;
 8001bae:	bf00      	nop
 8001bb0:	e004      	b.n	8001bbc <currBlock_verifyRotate+0x87c>
			break;
 8001bb2:	bf00      	nop
 8001bb4:	e002      	b.n	8001bbc <currBlock_verifyRotate+0x87c>
			break;
 8001bb6:	bf00      	nop
 8001bb8:	e000      	b.n	8001bbc <currBlock_verifyRotate+0x87c>
			break;
 8001bba:	bf00      	nop
		}
	}
	case smollPP:{
		switch(currBlock->state){// 4rotations only 3 blocks as center is centered
 8001bbc:	4b52      	ldr	r3, [pc, #328]	@ (8001d08 <currBlock_verifyRotate+0x9c8>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001bc4:	2b03      	cmp	r3, #3
 8001bc6:	f200 8135 	bhi.w	8001e34 <currBlock_verifyRotate+0xaf4>
 8001bca:	a201      	add	r2, pc, #4	@ (adr r2, 8001bd0 <currBlock_verifyRotate+0x890>)
 8001bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bd0:	08001be1 	.word	0x08001be1
 8001bd4:	08001c75 	.word	0x08001c75
 8001bd8:	08001d11 	.word	0x08001d11
 8001bdc:	08001da3 	.word	0x08001da3
		case state1:
			testVar[1] = currBlock->BlockOne[1];//  bottom left to top left
 8001be0:	4b49      	ldr	r3, [pc, #292]	@ (8001d08 <currBlock_verifyRotate+0x9c8>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockOne[2] + 2;
 8001be8:	4b47      	ldr	r3, [pc, #284]	@ (8001d08 <currBlock_verifyRotate+0x9c8>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	3302      	adds	r3, #2
 8001bf0:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	68b9      	ldr	r1, [r7, #8]
 8001bf6:	4845      	ldr	r0, [pc, #276]	@ (8001d0c <currBlock_verifyRotate+0x9cc>)
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	4413      	add	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	4403      	add	r3, r0
 8001c04:	440b      	add	r3, r1
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <currBlock_verifyRotate+0x8d0>
				return false;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	e11a      	b.n	8001e46 <currBlock_verifyRotate+0xb06>
			}
			testVar[1] = currBlock->BlockTwo[1] + 1;// middle left to top middle
 8001c10:	4b3d      	ldr	r3, [pc, #244]	@ (8001d08 <currBlock_verifyRotate+0x9c8>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	3301      	adds	r3, #1
 8001c18:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockTwo[2] + 1;
 8001c1a:	4b3b      	ldr	r3, [pc, #236]	@ (8001d08 <currBlock_verifyRotate+0x9c8>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	3301      	adds	r3, #1
 8001c22:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	68b9      	ldr	r1, [r7, #8]
 8001c28:	4838      	ldr	r0, [pc, #224]	@ (8001d0c <currBlock_verifyRotate+0x9cc>)
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	4413      	add	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	4403      	add	r3, r0
 8001c36:	440b      	add	r3, r1
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <currBlock_verifyRotate+0x902>
				return false;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	e101      	b.n	8001e46 <currBlock_verifyRotate+0xb06>
			}
			testVar[1] = currBlock->BlockThree[1] + 2;// top left to top right
 8001c42:	4b31      	ldr	r3, [pc, #196]	@ (8001d08 <currBlock_verifyRotate+0x9c8>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	695b      	ldr	r3, [r3, #20]
 8001c48:	3302      	adds	r3, #2
 8001c4a:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockThree[2];
 8001c4c:	4b2e      	ldr	r3, [pc, #184]	@ (8001d08 <currBlock_verifyRotate+0x9c8>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	68b9      	ldr	r1, [r7, #8]
 8001c58:	482c      	ldr	r0, [pc, #176]	@ (8001d0c <currBlock_verifyRotate+0x9cc>)
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	4413      	add	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4413      	add	r3, r2
 8001c64:	4403      	add	r3, r0
 8001c66:	440b      	add	r3, r1
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 80e4 	beq.w	8001e38 <currBlock_verifyRotate+0xaf8>
				return false;
 8001c70:	2300      	movs	r3, #0
 8001c72:	e0e8      	b.n	8001e46 <currBlock_verifyRotate+0xb06>
			}
			break;
		case state2:
			testVar[1] = currBlock->BlockOne[1] + 2;// top left to top right
 8001c74:	4b24      	ldr	r3, [pc, #144]	@ (8001d08 <currBlock_verifyRotate+0x9c8>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	3302      	adds	r3, #2
 8001c7c:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockOne[2];
 8001c7e:	4b22      	ldr	r3, [pc, #136]	@ (8001d08 <currBlock_verifyRotate+0x9c8>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	68b9      	ldr	r1, [r7, #8]
 8001c8a:	4820      	ldr	r0, [pc, #128]	@ (8001d0c <currBlock_verifyRotate+0x9cc>)
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	4413      	add	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	4403      	add	r3, r0
 8001c98:	440b      	add	r3, r1
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <currBlock_verifyRotate+0x964>
				return false;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	e0d0      	b.n	8001e46 <currBlock_verifyRotate+0xb06>
			}
			testVar[1] = currBlock->BlockTwo[1] + 1;// middle top to  middle right
 8001ca4:	4b18      	ldr	r3, [pc, #96]	@ (8001d08 <currBlock_verifyRotate+0x9c8>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	3301      	adds	r3, #1
 8001cac:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockTwo[2] - 1;
 8001cae:	4b16      	ldr	r3, [pc, #88]	@ (8001d08 <currBlock_verifyRotate+0x9c8>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	68b9      	ldr	r1, [r7, #8]
 8001cbc:	4813      	ldr	r0, [pc, #76]	@ (8001d0c <currBlock_verifyRotate+0x9cc>)
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	4413      	add	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	4403      	add	r3, r0
 8001cca:	440b      	add	r3, r1
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <currBlock_verifyRotate+0x996>
				return false;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	e0b7      	b.n	8001e46 <currBlock_verifyRotate+0xb06>
			}
			testVar[1] = currBlock->BlockThree[1];// top right to bottom right
 8001cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8001d08 <currBlock_verifyRotate+0x9c8>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	695b      	ldr	r3, [r3, #20]
 8001cdc:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockThree[2] - 2;
 8001cde:	4b0a      	ldr	r3, [pc, #40]	@ (8001d08 <currBlock_verifyRotate+0x9c8>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	3b02      	subs	r3, #2
 8001ce6:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	68b9      	ldr	r1, [r7, #8]
 8001cec:	4807      	ldr	r0, [pc, #28]	@ (8001d0c <currBlock_verifyRotate+0x9cc>)
 8001cee:	4613      	mov	r3, r2
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	4413      	add	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	4403      	add	r3, r0
 8001cfa:	440b      	add	r3, r1
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 809c 	beq.w	8001e3c <currBlock_verifyRotate+0xafc>
				return false;
 8001d04:	2300      	movs	r3, #0
 8001d06:	e09e      	b.n	8001e46 <currBlock_verifyRotate+0xb06>
 8001d08:	200000d4 	.word	0x200000d4
 8001d0c:	2000005c 	.word	0x2000005c
			}
			break;
		case state3:
			testVar[1] = currBlock->BlockOne[1];//top right to bottom right
 8001d10:	4b50      	ldr	r3, [pc, #320]	@ (8001e54 <currBlock_verifyRotate+0xb14>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockOne[2] - 2;
 8001d18:	4b4e      	ldr	r3, [pc, #312]	@ (8001e54 <currBlock_verifyRotate+0xb14>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	3b02      	subs	r3, #2
 8001d20:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	68b9      	ldr	r1, [r7, #8]
 8001d26:	484c      	ldr	r0, [pc, #304]	@ (8001e58 <currBlock_verifyRotate+0xb18>)
 8001d28:	4613      	mov	r3, r2
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	4413      	add	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	4403      	add	r3, r0
 8001d34:	440b      	add	r3, r1
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <currBlock_verifyRotate+0xa00>
				return false;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	e082      	b.n	8001e46 <currBlock_verifyRotate+0xb06>
			}
			testVar[1] = currBlock->BlockTwo[1] - 1;// middle right to  middle bottom
 8001d40:	4b44      	ldr	r3, [pc, #272]	@ (8001e54 <currBlock_verifyRotate+0xb14>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockTwo[2] - 1;
 8001d4a:	4b42      	ldr	r3, [pc, #264]	@ (8001e54 <currBlock_verifyRotate+0xb14>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	3b01      	subs	r3, #1
 8001d52:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	68b9      	ldr	r1, [r7, #8]
 8001d58:	483f      	ldr	r0, [pc, #252]	@ (8001e58 <currBlock_verifyRotate+0xb18>)
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	4413      	add	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	4403      	add	r3, r0
 8001d66:	440b      	add	r3, r1
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <currBlock_verifyRotate+0xa32>
				return false;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	e069      	b.n	8001e46 <currBlock_verifyRotate+0xb06>
			}
			testVar[1] = currBlock->BlockThree[1] - 2;// bottom right to bottom left
 8001d72:	4b38      	ldr	r3, [pc, #224]	@ (8001e54 <currBlock_verifyRotate+0xb14>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	695b      	ldr	r3, [r3, #20]
 8001d78:	3b02      	subs	r3, #2
 8001d7a:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockThree[2];
 8001d7c:	4b35      	ldr	r3, [pc, #212]	@ (8001e54 <currBlock_verifyRotate+0xb14>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	68b9      	ldr	r1, [r7, #8]
 8001d88:	4833      	ldr	r0, [pc, #204]	@ (8001e58 <currBlock_verifyRotate+0xb18>)
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	4413      	add	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4413      	add	r3, r2
 8001d94:	4403      	add	r3, r0
 8001d96:	440b      	add	r3, r1
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d050      	beq.n	8001e40 <currBlock_verifyRotate+0xb00>
				return false;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	e051      	b.n	8001e46 <currBlock_verifyRotate+0xb06>
			}
			break;
		case state4:
			testVar[1] = currBlock->BlockOne[1] - 2;// bottom right to bottom left
 8001da2:	4b2c      	ldr	r3, [pc, #176]	@ (8001e54 <currBlock_verifyRotate+0xb14>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	3b02      	subs	r3, #2
 8001daa:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockOne[2];
 8001dac:	4b29      	ldr	r3, [pc, #164]	@ (8001e54 <currBlock_verifyRotate+0xb14>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	68b9      	ldr	r1, [r7, #8]
 8001db8:	4827      	ldr	r0, [pc, #156]	@ (8001e58 <currBlock_verifyRotate+0xb18>)
 8001dba:	4613      	mov	r3, r2
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	4413      	add	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	4403      	add	r3, r0
 8001dc6:	440b      	add	r3, r1
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <currBlock_verifyRotate+0xa92>
				return false;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	e039      	b.n	8001e46 <currBlock_verifyRotate+0xb06>
			}
			testVar[1] = currBlock->BlockTwo[1] - 1;// middle bottom to  middle left
 8001dd2:	4b20      	ldr	r3, [pc, #128]	@ (8001e54 <currBlock_verifyRotate+0xb14>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockTwo[2] + 1;
 8001ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8001e54 <currBlock_verifyRotate+0xb14>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	3301      	adds	r3, #1
 8001de4:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	68b9      	ldr	r1, [r7, #8]
 8001dea:	481b      	ldr	r0, [pc, #108]	@ (8001e58 <currBlock_verifyRotate+0xb18>)
 8001dec:	4613      	mov	r3, r2
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	4413      	add	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	4403      	add	r3, r0
 8001df8:	440b      	add	r3, r1
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <currBlock_verifyRotate+0xac4>
				return false;
 8001e00:	2300      	movs	r3, #0
 8001e02:	e020      	b.n	8001e46 <currBlock_verifyRotate+0xb06>
			}
			testVar[1] = currBlock->BlockThree[1];// bottom left to top left
 8001e04:	4b13      	ldr	r3, [pc, #76]	@ (8001e54 <currBlock_verifyRotate+0xb14>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockThree[2] + 2;
 8001e0c:	4b11      	ldr	r3, [pc, #68]	@ (8001e54 <currBlock_verifyRotate+0xb14>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	3302      	adds	r3, #2
 8001e14:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	68b9      	ldr	r1, [r7, #8]
 8001e1a:	480f      	ldr	r0, [pc, #60]	@ (8001e58 <currBlock_verifyRotate+0xb18>)
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	4413      	add	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	4403      	add	r3, r0
 8001e28:	440b      	add	r3, r1
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <currBlock_verifyRotate+0xaf4>
				return false;
 8001e30:	2300      	movs	r3, #0
 8001e32:	e008      	b.n	8001e46 <currBlock_verifyRotate+0xb06>
			}
		default:
			break;
 8001e34:	bf00      	nop
 8001e36:	e004      	b.n	8001e42 <currBlock_verifyRotate+0xb02>
			break;
 8001e38:	bf00      	nop
 8001e3a:	e002      	b.n	8001e42 <currBlock_verifyRotate+0xb02>
			break;
 8001e3c:	bf00      	nop
 8001e3e:	e000      	b.n	8001e42 <currBlock_verifyRotate+0xb02>
			break;
 8001e40:	bf00      	nop
		}
	}
	default:
		break;
 8001e42:	bf00      	nop

	}
	return true;
 8001e44:	2301      	movs	r3, #1
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	200000d4 	.word	0x200000d4
 8001e58:	2000005c 	.word	0x2000005c

08001e5c <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08c      	sub	sp, #48	@ 0x30
 8001e60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	61bb      	str	r3, [r7, #24]
 8001e66:	4b5a      	ldr	r3, [pc, #360]	@ (8001fd0 <LCD_GPIO_Init+0x174>)
 8001e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e6a:	4a59      	ldr	r2, [pc, #356]	@ (8001fd0 <LCD_GPIO_Init+0x174>)
 8001e6c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001e70:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e72:	4b57      	ldr	r3, [pc, #348]	@ (8001fd0 <LCD_GPIO_Init+0x174>)
 8001e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e76:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e7a:	61bb      	str	r3, [r7, #24]
 8001e7c:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
 8001e82:	4b53      	ldr	r3, [pc, #332]	@ (8001fd0 <LCD_GPIO_Init+0x174>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e86:	4a52      	ldr	r2, [pc, #328]	@ (8001fd0 <LCD_GPIO_Init+0x174>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e8e:	4b50      	ldr	r3, [pc, #320]	@ (8001fd0 <LCD_GPIO_Init+0x174>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	613b      	str	r3, [r7, #16]
 8001e9e:	4b4c      	ldr	r3, [pc, #304]	@ (8001fd0 <LCD_GPIO_Init+0x174>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea2:	4a4b      	ldr	r2, [pc, #300]	@ (8001fd0 <LCD_GPIO_Init+0x174>)
 8001ea4:	f043 0302 	orr.w	r3, r3, #2
 8001ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eaa:	4b49      	ldr	r3, [pc, #292]	@ (8001fd0 <LCD_GPIO_Init+0x174>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	4b45      	ldr	r3, [pc, #276]	@ (8001fd0 <LCD_GPIO_Init+0x174>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ebe:	4a44      	ldr	r2, [pc, #272]	@ (8001fd0 <LCD_GPIO_Init+0x174>)
 8001ec0:	f043 0304 	orr.w	r3, r3, #4
 8001ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ec6:	4b42      	ldr	r3, [pc, #264]	@ (8001fd0 <LCD_GPIO_Init+0x174>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eca:	f003 0304 	and.w	r3, r3, #4
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60bb      	str	r3, [r7, #8]
 8001ed6:	4b3e      	ldr	r3, [pc, #248]	@ (8001fd0 <LCD_GPIO_Init+0x174>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eda:	4a3d      	ldr	r2, [pc, #244]	@ (8001fd0 <LCD_GPIO_Init+0x174>)
 8001edc:	f043 0308 	orr.w	r3, r3, #8
 8001ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ee2:	4b3b      	ldr	r3, [pc, #236]	@ (8001fd0 <LCD_GPIO_Init+0x174>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee6:	f003 0308 	and.w	r3, r3, #8
 8001eea:	60bb      	str	r3, [r7, #8]
 8001eec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	607b      	str	r3, [r7, #4]
 8001ef2:	4b37      	ldr	r3, [pc, #220]	@ (8001fd0 <LCD_GPIO_Init+0x174>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef6:	4a36      	ldr	r2, [pc, #216]	@ (8001fd0 <LCD_GPIO_Init+0x174>)
 8001ef8:	f043 0320 	orr.w	r3, r3, #32
 8001efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001efe:	4b34      	ldr	r3, [pc, #208]	@ (8001fd0 <LCD_GPIO_Init+0x174>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f02:	f003 0320 	and.w	r3, r3, #32
 8001f06:	607b      	str	r3, [r7, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	603b      	str	r3, [r7, #0]
 8001f0e:	4b30      	ldr	r3, [pc, #192]	@ (8001fd0 <LCD_GPIO_Init+0x174>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f12:	4a2f      	ldr	r2, [pc, #188]	@ (8001fd0 <LCD_GPIO_Init+0x174>)
 8001f14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f1a:	4b2d      	ldr	r3, [pc, #180]	@ (8001fd0 <LCD_GPIO_Init+0x174>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f22:	603b      	str	r3, [r7, #0]
 8001f24:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8001f26:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001f2a:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001f34:	2302      	movs	r3, #2
 8001f36:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8001f38:	230e      	movs	r3, #14
 8001f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001f3c:	f107 031c 	add.w	r3, r7, #28
 8001f40:	4619      	mov	r1, r3
 8001f42:	4824      	ldr	r0, [pc, #144]	@ (8001fd4 <LCD_GPIO_Init+0x178>)
 8001f44:	f002 fae0 	bl	8004508 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001f48:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001f4c:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001f4e:	f107 031c 	add.w	r3, r7, #28
 8001f52:	4619      	mov	r1, r3
 8001f54:	4820      	ldr	r0, [pc, #128]	@ (8001fd8 <LCD_GPIO_Init+0x17c>)
 8001f56:	f002 fad7 	bl	8004508 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001f5a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001f5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001f60:	f107 031c 	add.w	r3, r7, #28
 8001f64:	4619      	mov	r1, r3
 8001f66:	481d      	ldr	r0, [pc, #116]	@ (8001fdc <LCD_GPIO_Init+0x180>)
 8001f68:	f002 face 	bl	8004508 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001f6c:	2348      	movs	r3, #72	@ 0x48
 8001f6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001f70:	f107 031c 	add.w	r3, r7, #28
 8001f74:	4619      	mov	r1, r3
 8001f76:	481a      	ldr	r0, [pc, #104]	@ (8001fe0 <LCD_GPIO_Init+0x184>)
 8001f78:	f002 fac6 	bl	8004508 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001f7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001f82:	f107 031c 	add.w	r3, r7, #28
 8001f86:	4619      	mov	r1, r3
 8001f88:	4816      	ldr	r0, [pc, #88]	@ (8001fe4 <LCD_GPIO_Init+0x188>)
 8001f8a:	f002 fabd 	bl	8004508 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8001f8e:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001f92:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001f94:	f107 031c 	add.w	r3, r7, #28
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4813      	ldr	r0, [pc, #76]	@ (8001fe8 <LCD_GPIO_Init+0x18c>)
 8001f9c:	f002 fab4 	bl	8004508 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8001fa4:	2309      	movs	r3, #9
 8001fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001fa8:	f107 031c 	add.w	r3, r7, #28
 8001fac:	4619      	mov	r1, r3
 8001fae:	480a      	ldr	r0, [pc, #40]	@ (8001fd8 <LCD_GPIO_Init+0x17c>)
 8001fb0:	f002 faaa 	bl	8004508 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001fb4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001fb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001fba:	f107 031c 	add.w	r3, r7, #28
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4809      	ldr	r0, [pc, #36]	@ (8001fe8 <LCD_GPIO_Init+0x18c>)
 8001fc2:	f002 faa1 	bl	8004508 <HAL_GPIO_Init>
}
 8001fc6:	bf00      	nop
 8001fc8:	3730      	adds	r7, #48	@ 0x30
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40020000 	.word	0x40020000
 8001fd8:	40020400 	.word	0x40020400
 8001fdc:	40020800 	.word	0x40020800
 8001fe0:	40020c00 	.word	0x40020c00
 8001fe4:	40021400 	.word	0x40021400
 8001fe8:	40021800 	.word	0x40021800

08001fec <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b090      	sub	sp, #64	@ 0x40
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8001ffa:	23f0      	movs	r3, #240	@ 0xf0
 8001ffc:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8001ffe:	2300      	movs	r3, #0
 8002000:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8002002:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002006:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8002008:	2302      	movs	r3, #2
 800200a:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 800200c:	23ff      	movs	r3, #255	@ 0xff
 800200e:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8002010:	2300      	movs	r3, #0
 8002012:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002014:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002018:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800201a:	2305      	movs	r3, #5
 800201c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 800201e:	79fb      	ldrb	r3, [r7, #7]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8002024:	4b0f      	ldr	r3, [pc, #60]	@ (8002064 <LTCD_Layer_Init+0x78>)
 8002026:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8002028:	23f0      	movs	r3, #240	@ 0xf0
 800202a:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 800202c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002030:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8002038:	2300      	movs	r3, #0
 800203a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 800203e:	2300      	movs	r3, #0
 8002040:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8002044:	79fa      	ldrb	r2, [r7, #7]
 8002046:	f107 030c 	add.w	r3, r7, #12
 800204a:	4619      	mov	r1, r3
 800204c:	4806      	ldr	r0, [pc, #24]	@ (8002068 <LTCD_Layer_Init+0x7c>)
 800204e:	f003 fe21 	bl	8005c94 <HAL_LTDC_ConfigLayer>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8002058:	f000 fea4 	bl	8002da4 <LCD_Error_Handler>
	}
}
 800205c:	bf00      	nop
 800205e:	3740      	adds	r7, #64	@ 0x40
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	200001b4 	.word	0x200001b4
 8002068:	200000d8 	.word	0x200000d8

0800206c <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8002070:	4b2a      	ldr	r3, [pc, #168]	@ (800211c <LTCD__Init+0xb0>)
 8002072:	4a2b      	ldr	r2, [pc, #172]	@ (8002120 <LTCD__Init+0xb4>)
 8002074:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8002076:	4b29      	ldr	r3, [pc, #164]	@ (800211c <LTCD__Init+0xb0>)
 8002078:	2209      	movs	r2, #9
 800207a:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 800207c:	4b27      	ldr	r3, [pc, #156]	@ (800211c <LTCD__Init+0xb0>)
 800207e:	2201      	movs	r2, #1
 8002080:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8002082:	4b26      	ldr	r3, [pc, #152]	@ (800211c <LTCD__Init+0xb0>)
 8002084:	221d      	movs	r2, #29
 8002086:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8002088:	4b24      	ldr	r3, [pc, #144]	@ (800211c <LTCD__Init+0xb0>)
 800208a:	2203      	movs	r2, #3
 800208c:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 800208e:	4b23      	ldr	r3, [pc, #140]	@ (800211c <LTCD__Init+0xb0>)
 8002090:	f240 120d 	movw	r2, #269	@ 0x10d
 8002094:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8002096:	4b21      	ldr	r3, [pc, #132]	@ (800211c <LTCD__Init+0xb0>)
 8002098:	f240 1243 	movw	r2, #323	@ 0x143
 800209c:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 800209e:	4b1f      	ldr	r3, [pc, #124]	@ (800211c <LTCD__Init+0xb0>)
 80020a0:	f240 1217 	movw	r2, #279	@ 0x117
 80020a4:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 80020a6:	4b1d      	ldr	r3, [pc, #116]	@ (800211c <LTCD__Init+0xb0>)
 80020a8:	f240 1247 	movw	r2, #327	@ 0x147
 80020ac:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 80020ae:	4b1b      	ldr	r3, [pc, #108]	@ (800211c <LTCD__Init+0xb0>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 80020b6:	4b19      	ldr	r3, [pc, #100]	@ (800211c <LTCD__Init+0xb0>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 80020be:	4b17      	ldr	r3, [pc, #92]	@ (800211c <LTCD__Init+0xb0>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80020c6:	4b17      	ldr	r3, [pc, #92]	@ (8002124 <LTCD__Init+0xb8>)
 80020c8:	2208      	movs	r2, #8
 80020ca:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80020cc:	4b15      	ldr	r3, [pc, #84]	@ (8002124 <LTCD__Init+0xb8>)
 80020ce:	22c0      	movs	r2, #192	@ 0xc0
 80020d0:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80020d2:	4b14      	ldr	r3, [pc, #80]	@ (8002124 <LTCD__Init+0xb8>)
 80020d4:	2204      	movs	r2, #4
 80020d6:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80020d8:	4b12      	ldr	r3, [pc, #72]	@ (8002124 <LTCD__Init+0xb8>)
 80020da:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80020de:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80020e0:	4810      	ldr	r0, [pc, #64]	@ (8002124 <LTCD__Init+0xb8>)
 80020e2:	f004 fc31 	bl	8006948 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80020e6:	4b0d      	ldr	r3, [pc, #52]	@ (800211c <LTCD__Init+0xb0>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80020ec:	4b0b      	ldr	r3, [pc, #44]	@ (800211c <LTCD__Init+0xb0>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80020f2:	4b0a      	ldr	r3, [pc, #40]	@ (800211c <LTCD__Init+0xb0>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80020f8:	4b08      	ldr	r3, [pc, #32]	@ (800211c <LTCD__Init+0xb0>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 80020fe:	f7ff fead 	bl	8001e5c <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002102:	4806      	ldr	r0, [pc, #24]	@ (800211c <LTCD__Init+0xb0>)
 8002104:	f003 fcf6 	bl	8005af4 <HAL_LTDC_Init>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 800210e:	f000 fe49 	bl	8002da4 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8002112:	f000 ff3d 	bl	8002f90 <ili9341_Init>
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	200000d8 	.word	0x200000d8
 8002120:	40016800 	.word	0x40016800
 8002124:	20000180 	.word	0x20000180

08002128 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	80fb      	strh	r3, [r7, #6]
 8002132:	460b      	mov	r3, r1
 8002134:	80bb      	strh	r3, [r7, #4]
 8002136:	4613      	mov	r3, r2
 8002138:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 800213a:	88ba      	ldrh	r2, [r7, #4]
 800213c:	4613      	mov	r3, r2
 800213e:	011b      	lsls	r3, r3, #4
 8002140:	1a9b      	subs	r3, r3, r2
 8002142:	011b      	lsls	r3, r3, #4
 8002144:	461a      	mov	r2, r3
 8002146:	88fb      	ldrh	r3, [r7, #6]
 8002148:	4413      	add	r3, r2
 800214a:	4905      	ldr	r1, [pc, #20]	@ (8002160 <LCD_Draw_Pixel+0x38>)
 800214c:	887a      	ldrh	r2, [r7, #2]
 800214e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	200001b4 	.word	0x200001b4

08002164 <LCD_Draw_Vertical_Line>:
        }
    }
}

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8002164:	b590      	push	{r4, r7, lr}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	4604      	mov	r4, r0
 800216c:	4608      	mov	r0, r1
 800216e:	4611      	mov	r1, r2
 8002170:	461a      	mov	r2, r3
 8002172:	4623      	mov	r3, r4
 8002174:	80fb      	strh	r3, [r7, #6]
 8002176:	4603      	mov	r3, r0
 8002178:	80bb      	strh	r3, [r7, #4]
 800217a:	460b      	mov	r3, r1
 800217c:	807b      	strh	r3, [r7, #2]
 800217e:	4613      	mov	r3, r2
 8002180:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8002182:	2300      	movs	r3, #0
 8002184:	81fb      	strh	r3, [r7, #14]
 8002186:	e00b      	b.n	80021a0 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8002188:	89fa      	ldrh	r2, [r7, #14]
 800218a:	88bb      	ldrh	r3, [r7, #4]
 800218c:	4413      	add	r3, r2
 800218e:	b299      	uxth	r1, r3
 8002190:	883a      	ldrh	r2, [r7, #0]
 8002192:	88fb      	ldrh	r3, [r7, #6]
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff ffc7 	bl	8002128 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 800219a:	89fb      	ldrh	r3, [r7, #14]
 800219c:	3301      	adds	r3, #1
 800219e:	81fb      	strh	r3, [r7, #14]
 80021a0:	89fa      	ldrh	r2, [r7, #14]
 80021a2:	887b      	ldrh	r3, [r7, #2]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d3ef      	bcc.n	8002188 <LCD_Draw_Vertical_Line+0x24>
  }
}
 80021a8:	bf00      	nop
 80021aa:	bf00      	nop
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd90      	pop	{r4, r7, pc}

080021b2 <LCD_Draw_Horizontal_Line>:
void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 80021b2:	b590      	push	{r4, r7, lr}
 80021b4:	b085      	sub	sp, #20
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	4604      	mov	r4, r0
 80021ba:	4608      	mov	r0, r1
 80021bc:	4611      	mov	r1, r2
 80021be:	461a      	mov	r2, r3
 80021c0:	4623      	mov	r3, r4
 80021c2:	80fb      	strh	r3, [r7, #6]
 80021c4:	4603      	mov	r3, r0
 80021c6:	80bb      	strh	r3, [r7, #4]
 80021c8:	460b      	mov	r3, r1
 80021ca:	807b      	strh	r3, [r7, #2]
 80021cc:	4613      	mov	r3, r2
 80021ce:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 80021d0:	2300      	movs	r3, #0
 80021d2:	81fb      	strh	r3, [r7, #14]
 80021d4:	e00b      	b.n	80021ee <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(x+i, y, color);
 80021d6:	88fa      	ldrh	r2, [r7, #6]
 80021d8:	89fb      	ldrh	r3, [r7, #14]
 80021da:	4413      	add	r3, r2
 80021dc:	b29b      	uxth	r3, r3
 80021de:	883a      	ldrh	r2, [r7, #0]
 80021e0:	88b9      	ldrh	r1, [r7, #4]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff ffa0 	bl	8002128 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 80021e8:	89fb      	ldrh	r3, [r7, #14]
 80021ea:	3301      	adds	r3, #1
 80021ec:	81fb      	strh	r3, [r7, #14]
 80021ee:	89fa      	ldrh	r2, [r7, #14]
 80021f0:	887b      	ldrh	r3, [r7, #2]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d3ef      	bcc.n	80021d6 <LCD_Draw_Horizontal_Line+0x24>
  }
}
 80021f6:	bf00      	nop
 80021f8:	bf00      	nop
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd90      	pop	{r4, r7, pc}

08002200 <LCD_Draw_Box>:
void LCD_Draw_Box(uint16_t x, uint16_t y,uint16_t len, uint16_t color){
 8002200:	b590      	push	{r4, r7, lr}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	4604      	mov	r4, r0
 8002208:	4608      	mov	r0, r1
 800220a:	4611      	mov	r1, r2
 800220c:	461a      	mov	r2, r3
 800220e:	4623      	mov	r3, r4
 8002210:	80fb      	strh	r3, [r7, #6]
 8002212:	4603      	mov	r3, r0
 8002214:	80bb      	strh	r3, [r7, #4]
 8002216:	460b      	mov	r3, r1
 8002218:	807b      	strh	r3, [r7, #2]
 800221a:	4613      	mov	r3, r2
 800221c:	803b      	strh	r3, [r7, #0]
	for (uint16_t i = 0; i < len; i++){
 800221e:	2300      	movs	r3, #0
 8002220:	81fb      	strh	r3, [r7, #14]
 8002222:	e00b      	b.n	800223c <LCD_Draw_Box+0x3c>
		LCD_Draw_Vertical_Line(x+i,y,len,color);
 8002224:	88fa      	ldrh	r2, [r7, #6]
 8002226:	89fb      	ldrh	r3, [r7, #14]
 8002228:	4413      	add	r3, r2
 800222a:	b298      	uxth	r0, r3
 800222c:	883b      	ldrh	r3, [r7, #0]
 800222e:	887a      	ldrh	r2, [r7, #2]
 8002230:	88b9      	ldrh	r1, [r7, #4]
 8002232:	f7ff ff97 	bl	8002164 <LCD_Draw_Vertical_Line>
	for (uint16_t i = 0; i < len; i++){
 8002236:	89fb      	ldrh	r3, [r7, #14]
 8002238:	3301      	adds	r3, #1
 800223a:	81fb      	strh	r3, [r7, #14]
 800223c:	89fa      	ldrh	r2, [r7, #14]
 800223e:	887b      	ldrh	r3, [r7, #2]
 8002240:	429a      	cmp	r2, r3
 8002242:	d3ef      	bcc.n	8002224 <LCD_Draw_Box+0x24>
	}

}
 8002244:	bf00      	nop
 8002246:	bf00      	nop
 8002248:	3714      	adds	r7, #20
 800224a:	46bd      	mov	sp, r7
 800224c:	bd90      	pop	{r4, r7, pc}
	...

08002250 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	460a      	mov	r2, r1
 800225a:	71fb      	strb	r3, [r7, #7]
 800225c:	4613      	mov	r3, r2
 800225e:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8002260:	79fb      	ldrb	r3, [r7, #7]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10e      	bne.n	8002284 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8002266:	2300      	movs	r3, #0
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	e007      	b.n	800227c <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 800226c:	4908      	ldr	r1, [pc, #32]	@ (8002290 <LCD_Clear+0x40>)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	88ba      	ldrh	r2, [r7, #4]
 8002272:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	3301      	adds	r3, #1
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8002282:	d3f3      	bcc.n	800226c <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8002284:	bf00      	nop
 8002286:	3714      	adds	r7, #20
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	200001b4 	.word	0x200001b4

08002294 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 800229e:	4a04      	ldr	r2, [pc, #16]	@ (80022b0 <LCD_SetTextColor+0x1c>)
 80022a0:	88fb      	ldrh	r3, [r7, #6]
 80022a2:	8013      	strh	r3, [r2, #0]
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	20000000 	.word	0x20000000

080022b4 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 80022bc:	4a04      	ldr	r2, [pc, #16]	@ (80022d0 <LCD_SetFont+0x1c>)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6013      	str	r3, [r2, #0]
}
 80022c2:	bf00      	nop
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	200001b0 	.word	0x200001b0

080022d4 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	603a      	str	r2, [r7, #0]
 80022de:	80fb      	strh	r3, [r7, #6]
 80022e0:	460b      	mov	r3, r1
 80022e2:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	2300      	movs	r3, #0
 80022ea:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80022ec:	2300      	movs	r3, #0
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	e04c      	b.n	800238c <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80022f2:	2300      	movs	r3, #0
 80022f4:	60bb      	str	r3, [r7, #8]
 80022f6:	e03f      	b.n	8002378 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	4413      	add	r3, r2
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	4619      	mov	r1, r3
 8002304:	4b27      	ldr	r3, [pc, #156]	@ (80023a4 <LCD_Draw_Char+0xd0>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	889b      	ldrh	r3, [r3, #4]
 800230a:	4a27      	ldr	r2, [pc, #156]	@ (80023a8 <LCD_Draw_Char+0xd4>)
 800230c:	fba2 2303 	umull	r2, r3, r2, r3
 8002310:	08db      	lsrs	r3, r3, #3
 8002312:	b29b      	uxth	r3, r3
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	2280      	movs	r2, #128	@ 0x80
 8002318:	409a      	lsls	r2, r3
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	fa42 f303 	asr.w	r3, r2, r3
 8002320:	400b      	ands	r3, r1
 8002322:	2b00      	cmp	r3, #0
 8002324:	d104      	bne.n	8002330 <LCD_Draw_Char+0x5c>
 8002326:	4b1f      	ldr	r3, [pc, #124]	@ (80023a4 <LCD_Draw_Char+0xd0>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	889b      	ldrh	r3, [r3, #4]
 800232c:	2b0c      	cmp	r3, #12
 800232e:	d920      	bls.n	8002372 <LCD_Draw_Char+0x9e>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	4413      	add	r3, r2
 8002338:	881b      	ldrh	r3, [r3, #0]
 800233a:	461a      	mov	r2, r3
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	fa42 f303 	asr.w	r3, r2, r3
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	d104      	bne.n	8002354 <LCD_Draw_Char+0x80>
 800234a:	4b16      	ldr	r3, [pc, #88]	@ (80023a4 <LCD_Draw_Char+0xd0>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	889b      	ldrh	r3, [r3, #4]
 8002350:	2b0c      	cmp	r3, #12
 8002352:	d80e      	bhi.n	8002372 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	b29a      	uxth	r2, r3
 8002358:	88fb      	ldrh	r3, [r7, #6]
 800235a:	4413      	add	r3, r2
 800235c:	b298      	uxth	r0, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	b29a      	uxth	r2, r3
 8002362:	88bb      	ldrh	r3, [r7, #4]
 8002364:	4413      	add	r3, r2
 8002366:	b29b      	uxth	r3, r3
 8002368:	4a10      	ldr	r2, [pc, #64]	@ (80023ac <LCD_Draw_Char+0xd8>)
 800236a:	8812      	ldrh	r2, [r2, #0]
 800236c:	4619      	mov	r1, r3
 800236e:	f7ff fedb 	bl	8002128 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	3301      	adds	r3, #1
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	4b0a      	ldr	r3, [pc, #40]	@ (80023a4 <LCD_Draw_Char+0xd0>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	889b      	ldrh	r3, [r3, #4]
 800237e:	461a      	mov	r2, r3
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	4293      	cmp	r3, r2
 8002384:	d3b8      	bcc.n	80022f8 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	3301      	adds	r3, #1
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	4b05      	ldr	r3, [pc, #20]	@ (80023a4 <LCD_Draw_Char+0xd0>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	88db      	ldrh	r3, [r3, #6]
 8002392:	461a      	mov	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	4293      	cmp	r3, r2
 8002398:	d3ab      	bcc.n	80022f2 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 800239a:	bf00      	nop
 800239c:	bf00      	nop
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	200001b0 	.word	0x200001b0
 80023a8:	aaaaaaab 	.word	0xaaaaaaab
 80023ac:	20000000 	.word	0x20000000

080023b0 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	80fb      	strh	r3, [r7, #6]
 80023ba:	460b      	mov	r3, r1
 80023bc:	80bb      	strh	r3, [r7, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 80023c2:	78fb      	ldrb	r3, [r7, #3]
 80023c4:	3b20      	subs	r3, #32
 80023c6:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 80023c8:	4b09      	ldr	r3, [pc, #36]	@ (80023f0 <LCD_DisplayChar+0x40>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	78fb      	ldrb	r3, [r7, #3]
 80023d0:	4907      	ldr	r1, [pc, #28]	@ (80023f0 <LCD_DisplayChar+0x40>)
 80023d2:	6809      	ldr	r1, [r1, #0]
 80023d4:	88c9      	ldrh	r1, [r1, #6]
 80023d6:	fb01 f303 	mul.w	r3, r1, r3
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	441a      	add	r2, r3
 80023de:	88b9      	ldrh	r1, [r7, #4]
 80023e0:	88fb      	ldrh	r3, [r7, #6]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff ff76 	bl	80022d4 <LCD_Draw_Char>
}
 80023e8:	bf00      	nop
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	200001b0 	.word	0x200001b0

080023f4 <PrintTimeLCD>:
void PrintTimeLCD(uint32_t time_elapsed){
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]

	if(time_elapsed > 100){
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b64      	cmp	r3, #100	@ 0x64
 8002400:	d916      	bls.n	8002430 <PrintTimeLCD+0x3c>
	int Sec100s = time_elapsed / 100; // x
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a38      	ldr	r2, [pc, #224]	@ (80024e8 <PrintTimeLCD+0xf4>)
 8002406:	fba2 2303 	umull	r2, r3, r2, r3
 800240a:	095b      	lsrs	r3, r3, #5
 800240c:	617b      	str	r3, [r7, #20]
	LCD_Draw_Box(155+5,270,30,LCD_COLOR_BLACK);
 800240e:	2300      	movs	r3, #0
 8002410:	221e      	movs	r2, #30
 8002412:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002416:	20a0      	movs	r0, #160	@ 0xa0
 8002418:	f7ff fef2 	bl	8002200 <LCD_Draw_Box>
	LCD_DisplayChar(155, 270, Sec100s + 48);
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	b2db      	uxtb	r3, r3
 8002420:	3330      	adds	r3, #48	@ 0x30
 8002422:	b2db      	uxtb	r3, r3
 8002424:	461a      	mov	r2, r3
 8002426:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 800242a:	209b      	movs	r0, #155	@ 0x9b
 800242c:	f7ff ffc0 	bl	80023b0 <LCD_DisplayChar>
	}
	time_elapsed = time_elapsed % 100; // now holds xx
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a2d      	ldr	r2, [pc, #180]	@ (80024e8 <PrintTimeLCD+0xf4>)
 8002434:	fba2 1203 	umull	r1, r2, r2, r3
 8002438:	0952      	lsrs	r2, r2, #5
 800243a:	2164      	movs	r1, #100	@ 0x64
 800243c:	fb01 f202 	mul.w	r2, r1, r2
 8002440:	1a9b      	subs	r3, r3, r2
 8002442:	607b      	str	r3, [r7, #4]
	int Sec_10s = time_elapsed / 10; // x
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a29      	ldr	r2, [pc, #164]	@ (80024ec <PrintTimeLCD+0xf8>)
 8002448:	fba2 2303 	umull	r2, r3, r2, r3
 800244c:	08db      	lsrs	r3, r3, #3
 800244e:	613b      	str	r3, [r7, #16]
	int Sec_1s = time_elapsed % 10; // x
 8002450:	6879      	ldr	r1, [r7, #4]
 8002452:	4b26      	ldr	r3, [pc, #152]	@ (80024ec <PrintTimeLCD+0xf8>)
 8002454:	fba3 2301 	umull	r2, r3, r3, r1
 8002458:	08da      	lsrs	r2, r3, #3
 800245a:	4613      	mov	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	1aca      	subs	r2, r1, r3
 8002464:	60fa      	str	r2, [r7, #12]

	LCD_Draw_Box(155+15,270,30,LCD_COLOR_BLACK);
 8002466:	2300      	movs	r3, #0
 8002468:	221e      	movs	r2, #30
 800246a:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 800246e:	20aa      	movs	r0, #170	@ 0xaa
 8002470:	f7ff fec6 	bl	8002200 <LCD_Draw_Box>
	LCD_Draw_Box(155+30,270,30,LCD_COLOR_BLACK);
 8002474:	2300      	movs	r3, #0
 8002476:	221e      	movs	r2, #30
 8002478:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 800247c:	20b9      	movs	r0, #185	@ 0xb9
 800247e:	f7ff febf 	bl	8002200 <LCD_Draw_Box>

	LCD_SetFont(&Font16x24);
 8002482:	481b      	ldr	r0, [pc, #108]	@ (80024f0 <PrintTimeLCD+0xfc>)
 8002484:	f7ff ff16 	bl	80022b4 <LCD_SetFont>
	LCD_DisplayChar(110,270,'T');
 8002488:	2254      	movs	r2, #84	@ 0x54
 800248a:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 800248e:	206e      	movs	r0, #110	@ 0x6e
 8002490:	f7ff ff8e 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(120,270,'i');
 8002494:	2269      	movs	r2, #105	@ 0x69
 8002496:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 800249a:	2078      	movs	r0, #120	@ 0x78
 800249c:	f7ff ff88 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(130,270,'m');
 80024a0:	226d      	movs	r2, #109	@ 0x6d
 80024a2:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80024a6:	2082      	movs	r0, #130	@ 0x82
 80024a8:	f7ff ff82 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(146,270,'e');
 80024ac:	2265      	movs	r2, #101	@ 0x65
 80024ae:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80024b2:	2092      	movs	r0, #146	@ 0x92
 80024b4:	f7ff ff7c 	bl	80023b0 <LCD_DisplayChar>

	LCD_DisplayChar(155+15, 270, Sec_10s + 48);
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	3330      	adds	r3, #48	@ 0x30
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	461a      	mov	r2, r3
 80024c2:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80024c6:	20aa      	movs	r0, #170	@ 0xaa
 80024c8:	f7ff ff72 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(155+30, 270, Sec_1s + 48);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	3330      	adds	r3, #48	@ 0x30
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	461a      	mov	r2, r3
 80024d6:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80024da:	20b9      	movs	r0, #185	@ 0xb9
 80024dc:	f7ff ff68 	bl	80023b0 <LCD_DisplayChar>
}
 80024e0:	bf00      	nop
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	51eb851f 	.word	0x51eb851f
 80024ec:	cccccccd 	.word	0xcccccccd
 80024f0:	20000004 	.word	0x20000004

080024f4 <PrintDownLCD>:
void PrintDownLCD(void){
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
	LCD_DisplayChar(110 - 70,270,'D');
 80024f8:	2244      	movs	r2, #68	@ 0x44
 80024fa:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80024fe:	2028      	movs	r0, #40	@ 0x28
 8002500:	f7ff ff56 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(120 - 70,270,'o');
 8002504:	226f      	movs	r2, #111	@ 0x6f
 8002506:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 800250a:	2032      	movs	r0, #50	@ 0x32
 800250c:	f7ff ff50 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(130 - 70,270,'w');
 8002510:	2277      	movs	r2, #119	@ 0x77
 8002512:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002516:	203c      	movs	r0, #60	@ 0x3c
 8002518:	f7ff ff4a 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(146 - 70,270,'n');
 800251c:	226e      	movs	r2, #110	@ 0x6e
 800251e:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002522:	204c      	movs	r0, #76	@ 0x4c
 8002524:	f7ff ff44 	bl	80023b0 <LCD_DisplayChar>
}
 8002528:	bf00      	nop
 800252a:	bd80      	pop	{r7, pc}

0800252c <title_screen>:
void title_screen(void){
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0

	LCD_SetFont(&Font16x24);
 8002530:	48fd      	ldr	r0, [pc, #1012]	@ (8002928 <title_screen+0x3fc>)
 8002532:	f7ff febf 	bl	80022b4 <LCD_SetFont>

	LCD_SetTextColor(LCD_COLOR_BLACK);
 8002536:	2000      	movs	r0, #0
 8002538:	f7ff feac 	bl	8002294 <LCD_SetTextColor>
	LCD_DisplayChar(100,140,'T');
 800253c:	2254      	movs	r2, #84	@ 0x54
 800253e:	218c      	movs	r1, #140	@ 0x8c
 8002540:	2064      	movs	r0, #100	@ 0x64
 8002542:	f7ff ff35 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(115,140,'E');
 8002546:	2245      	movs	r2, #69	@ 0x45
 8002548:	218c      	movs	r1, #140	@ 0x8c
 800254a:	2073      	movs	r0, #115	@ 0x73
 800254c:	f7ff ff30 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(130,140,'T');
 8002550:	2254      	movs	r2, #84	@ 0x54
 8002552:	218c      	movs	r1, #140	@ 0x8c
 8002554:	2082      	movs	r0, #130	@ 0x82
 8002556:	f7ff ff2b 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(145,140,'R');
 800255a:	2252      	movs	r2, #82	@ 0x52
 800255c:	218c      	movs	r1, #140	@ 0x8c
 800255e:	2091      	movs	r0, #145	@ 0x91
 8002560:	f7ff ff26 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(155,140,'I');
 8002564:	2249      	movs	r2, #73	@ 0x49
 8002566:	218c      	movs	r1, #140	@ 0x8c
 8002568:	209b      	movs	r0, #155	@ 0x9b
 800256a:	f7ff ff21 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(165,140,'S');
 800256e:	2253      	movs	r2, #83	@ 0x53
 8002570:	218c      	movs	r1, #140	@ 0x8c
 8002572:	20a5      	movs	r0, #165	@ 0xa5
 8002574:	f7ff ff1c 	bl	80023b0 <LCD_DisplayChar>

	//line
	LCD_Draw_Box(20,80,20,LCD_COLOR_CYAN);
 8002578:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800257c:	2214      	movs	r2, #20
 800257e:	2150      	movs	r1, #80	@ 0x50
 8002580:	2014      	movs	r0, #20
 8002582:	f7ff fe3d 	bl	8002200 <LCD_Draw_Box>
	LCD_Draw_Box(20,60,20,LCD_COLOR_CYAN);
 8002586:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800258a:	2214      	movs	r2, #20
 800258c:	213c      	movs	r1, #60	@ 0x3c
 800258e:	2014      	movs	r0, #20
 8002590:	f7ff fe36 	bl	8002200 <LCD_Draw_Box>
	LCD_Draw_Box(20,20,20,LCD_COLOR_CYAN);
 8002594:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8002598:	2214      	movs	r2, #20
 800259a:	2114      	movs	r1, #20
 800259c:	2014      	movs	r0, #20
 800259e:	f7ff fe2f 	bl	8002200 <LCD_Draw_Box>
	LCD_Draw_Box(20,40,20,LCD_COLOR_CYAN);
 80025a2:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80025a6:	2214      	movs	r2, #20
 80025a8:	2128      	movs	r1, #40	@ 0x28
 80025aa:	2014      	movs	r0, #20
 80025ac:	f7ff fe28 	bl	8002200 <LCD_Draw_Box>

	HAL_Delay(500);
 80025b0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80025b4:	f001 fdfc 	bl	80041b0 <HAL_Delay>
	LCD_Clear(0, LCD_COLOR_BLACK);
 80025b8:	2100      	movs	r1, #0
 80025ba:	2000      	movs	r0, #0
 80025bc:	f7ff fe48 	bl	8002250 <LCD_Clear>

	LCD_SetTextColor(LCD_COLOR_WHITE);
 80025c0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80025c4:	f7ff fe66 	bl	8002294 <LCD_SetTextColor>
	LCD_DisplayChar(100,140,'T');
 80025c8:	2254      	movs	r2, #84	@ 0x54
 80025ca:	218c      	movs	r1, #140	@ 0x8c
 80025cc:	2064      	movs	r0, #100	@ 0x64
 80025ce:	f7ff feef 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(115,140,'E');
 80025d2:	2245      	movs	r2, #69	@ 0x45
 80025d4:	218c      	movs	r1, #140	@ 0x8c
 80025d6:	2073      	movs	r0, #115	@ 0x73
 80025d8:	f7ff feea 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(130,140,'T');
 80025dc:	2254      	movs	r2, #84	@ 0x54
 80025de:	218c      	movs	r1, #140	@ 0x8c
 80025e0:	2082      	movs	r0, #130	@ 0x82
 80025e2:	f7ff fee5 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(145,140,'R');
 80025e6:	2252      	movs	r2, #82	@ 0x52
 80025e8:	218c      	movs	r1, #140	@ 0x8c
 80025ea:	2091      	movs	r0, #145	@ 0x91
 80025ec:	f7ff fee0 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(155,140,'I');
 80025f0:	2249      	movs	r2, #73	@ 0x49
 80025f2:	218c      	movs	r1, #140	@ 0x8c
 80025f4:	209b      	movs	r0, #155	@ 0x9b
 80025f6:	f7ff fedb 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(165,140,'S');
 80025fa:	2253      	movs	r2, #83	@ 0x53
 80025fc:	218c      	movs	r1, #140	@ 0x8c
 80025fe:	20a5      	movs	r0, #165	@ 0xa5
 8002600:	f7ff fed6 	bl	80023b0 <LCD_DisplayChar>
	//square
	LCD_Draw_Box(160,200,20,LCD_COLOR_RED);
 8002604:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002608:	2214      	movs	r2, #20
 800260a:	21c8      	movs	r1, #200	@ 0xc8
 800260c:	20a0      	movs	r0, #160	@ 0xa0
 800260e:	f7ff fdf7 	bl	8002200 <LCD_Draw_Box>
	LCD_Draw_Box(180,200,20,LCD_COLOR_RED);
 8002612:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002616:	2214      	movs	r2, #20
 8002618:	21c8      	movs	r1, #200	@ 0xc8
 800261a:	20b4      	movs	r0, #180	@ 0xb4
 800261c:	f7ff fdf0 	bl	8002200 <LCD_Draw_Box>
	LCD_Draw_Box(180,220,20,LCD_COLOR_RED);
 8002620:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002624:	2214      	movs	r2, #20
 8002626:	21dc      	movs	r1, #220	@ 0xdc
 8002628:	20b4      	movs	r0, #180	@ 0xb4
 800262a:	f7ff fde9 	bl	8002200 <LCD_Draw_Box>
	LCD_Draw_Box(160,220,20,LCD_COLOR_RED);
 800262e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002632:	2214      	movs	r2, #20
 8002634:	21dc      	movs	r1, #220	@ 0xdc
 8002636:	20a0      	movs	r0, #160	@ 0xa0
 8002638:	f7ff fde2 	bl	8002200 <LCD_Draw_Box>

	HAL_Delay(500);
 800263c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002640:	f001 fdb6 	bl	80041b0 <HAL_Delay>
	LCD_Clear(0, LCD_COLOR_WHITE);
 8002644:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002648:	2000      	movs	r0, #0
 800264a:	f7ff fe01 	bl	8002250 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 800264e:	2000      	movs	r0, #0
 8002650:	f7ff fe20 	bl	8002294 <LCD_SetTextColor>
	LCD_DisplayChar(100,140,'T');
 8002654:	2254      	movs	r2, #84	@ 0x54
 8002656:	218c      	movs	r1, #140	@ 0x8c
 8002658:	2064      	movs	r0, #100	@ 0x64
 800265a:	f7ff fea9 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(115,140,'E');
 800265e:	2245      	movs	r2, #69	@ 0x45
 8002660:	218c      	movs	r1, #140	@ 0x8c
 8002662:	2073      	movs	r0, #115	@ 0x73
 8002664:	f7ff fea4 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(130,140,'T');
 8002668:	2254      	movs	r2, #84	@ 0x54
 800266a:	218c      	movs	r1, #140	@ 0x8c
 800266c:	2082      	movs	r0, #130	@ 0x82
 800266e:	f7ff fe9f 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(145,140,'R');
 8002672:	2252      	movs	r2, #82	@ 0x52
 8002674:	218c      	movs	r1, #140	@ 0x8c
 8002676:	2091      	movs	r0, #145	@ 0x91
 8002678:	f7ff fe9a 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(155,140,'I');
 800267c:	2249      	movs	r2, #73	@ 0x49
 800267e:	218c      	movs	r1, #140	@ 0x8c
 8002680:	209b      	movs	r0, #155	@ 0x9b
 8002682:	f7ff fe95 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(165,140,'S');
 8002686:	2253      	movs	r2, #83	@ 0x53
 8002688:	218c      	movs	r1, #140	@ 0x8c
 800268a:	20a5      	movs	r0, #165	@ 0xa5
 800268c:	f7ff fe90 	bl	80023b0 <LCD_DisplayChar>
	//L
	LCD_Draw_Box(20,220,20,LCD_COLOR_BLUE);
 8002690:	231f      	movs	r3, #31
 8002692:	2214      	movs	r2, #20
 8002694:	21dc      	movs	r1, #220	@ 0xdc
 8002696:	2014      	movs	r0, #20
 8002698:	f7ff fdb2 	bl	8002200 <LCD_Draw_Box>
	LCD_Draw_Box(20,240,20,LCD_COLOR_BLUE);
 800269c:	231f      	movs	r3, #31
 800269e:	2214      	movs	r2, #20
 80026a0:	21f0      	movs	r1, #240	@ 0xf0
 80026a2:	2014      	movs	r0, #20
 80026a4:	f7ff fdac 	bl	8002200 <LCD_Draw_Box>
	LCD_Draw_Box(20,260,20,LCD_COLOR_BLUE);
 80026a8:	231f      	movs	r3, #31
 80026aa:	2214      	movs	r2, #20
 80026ac:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80026b0:	2014      	movs	r0, #20
 80026b2:	f7ff fda5 	bl	8002200 <LCD_Draw_Box>
	LCD_Draw_Box(40,260,20,LCD_COLOR_BLUE);
 80026b6:	231f      	movs	r3, #31
 80026b8:	2214      	movs	r2, #20
 80026ba:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80026be:	2028      	movs	r0, #40	@ 0x28
 80026c0:	f7ff fd9e 	bl	8002200 <LCD_Draw_Box>

	HAL_Delay(500);
 80026c4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80026c8:	f001 fd72 	bl	80041b0 <HAL_Delay>
	LCD_Clear(0, LCD_COLOR_BLACK);
 80026cc:	2100      	movs	r1, #0
 80026ce:	2000      	movs	r0, #0
 80026d0:	f7ff fdbe 	bl	8002250 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 80026d4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80026d8:	f7ff fddc 	bl	8002294 <LCD_SetTextColor>
	LCD_DisplayChar(100,140,'T');
 80026dc:	2254      	movs	r2, #84	@ 0x54
 80026de:	218c      	movs	r1, #140	@ 0x8c
 80026e0:	2064      	movs	r0, #100	@ 0x64
 80026e2:	f7ff fe65 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(115,140,'E');
 80026e6:	2245      	movs	r2, #69	@ 0x45
 80026e8:	218c      	movs	r1, #140	@ 0x8c
 80026ea:	2073      	movs	r0, #115	@ 0x73
 80026ec:	f7ff fe60 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(130,140,'T');
 80026f0:	2254      	movs	r2, #84	@ 0x54
 80026f2:	218c      	movs	r1, #140	@ 0x8c
 80026f4:	2082      	movs	r0, #130	@ 0x82
 80026f6:	f7ff fe5b 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(145,140,'R');
 80026fa:	2252      	movs	r2, #82	@ 0x52
 80026fc:	218c      	movs	r1, #140	@ 0x8c
 80026fe:	2091      	movs	r0, #145	@ 0x91
 8002700:	f7ff fe56 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(155,140,'I');
 8002704:	2249      	movs	r2, #73	@ 0x49
 8002706:	218c      	movs	r1, #140	@ 0x8c
 8002708:	209b      	movs	r0, #155	@ 0x9b
 800270a:	f7ff fe51 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(165,140,'S');
 800270e:	2253      	movs	r2, #83	@ 0x53
 8002710:	218c      	movs	r1, #140	@ 0x8c
 8002712:	20a5      	movs	r0, #165	@ 0xa5
 8002714:	f7ff fe4c 	bl	80023b0 <LCD_DisplayChar>

	//other L
	LCD_Draw_Box(80,80,20,LCD_COLOR_GREEN);
 8002718:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800271c:	2214      	movs	r2, #20
 800271e:	2150      	movs	r1, #80	@ 0x50
 8002720:	2050      	movs	r0, #80	@ 0x50
 8002722:	f7ff fd6d 	bl	8002200 <LCD_Draw_Box>
	LCD_Draw_Box(80,100,20,LCD_COLOR_GREEN);
 8002726:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800272a:	2214      	movs	r2, #20
 800272c:	2164      	movs	r1, #100	@ 0x64
 800272e:	2050      	movs	r0, #80	@ 0x50
 8002730:	f7ff fd66 	bl	8002200 <LCD_Draw_Box>
	LCD_Draw_Box(80,120,20,LCD_COLOR_GREEN);
 8002734:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002738:	2214      	movs	r2, #20
 800273a:	2178      	movs	r1, #120	@ 0x78
 800273c:	2050      	movs	r0, #80	@ 0x50
 800273e:	f7ff fd5f 	bl	8002200 <LCD_Draw_Box>
	LCD_Draw_Box(60,120,20,LCD_COLOR_GREEN);
 8002742:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002746:	2214      	movs	r2, #20
 8002748:	2178      	movs	r1, #120	@ 0x78
 800274a:	203c      	movs	r0, #60	@ 0x3c
 800274c:	f7ff fd58 	bl	8002200 <LCD_Draw_Box>

	HAL_Delay(500);
 8002750:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002754:	f001 fd2c 	bl	80041b0 <HAL_Delay>
	LCD_Clear(0, LCD_COLOR_WHITE);
 8002758:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800275c:	2000      	movs	r0, #0
 800275e:	f7ff fd77 	bl	8002250 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 8002762:	2000      	movs	r0, #0
 8002764:	f7ff fd96 	bl	8002294 <LCD_SetTextColor>
	LCD_DisplayChar(100,140,'T');
 8002768:	2254      	movs	r2, #84	@ 0x54
 800276a:	218c      	movs	r1, #140	@ 0x8c
 800276c:	2064      	movs	r0, #100	@ 0x64
 800276e:	f7ff fe1f 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(115,140,'E');
 8002772:	2245      	movs	r2, #69	@ 0x45
 8002774:	218c      	movs	r1, #140	@ 0x8c
 8002776:	2073      	movs	r0, #115	@ 0x73
 8002778:	f7ff fe1a 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(130,140,'T');
 800277c:	2254      	movs	r2, #84	@ 0x54
 800277e:	218c      	movs	r1, #140	@ 0x8c
 8002780:	2082      	movs	r0, #130	@ 0x82
 8002782:	f7ff fe15 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(145,140,'R');
 8002786:	2252      	movs	r2, #82	@ 0x52
 8002788:	218c      	movs	r1, #140	@ 0x8c
 800278a:	2091      	movs	r0, #145	@ 0x91
 800278c:	f7ff fe10 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(155,140,'I');
 8002790:	2249      	movs	r2, #73	@ 0x49
 8002792:	218c      	movs	r1, #140	@ 0x8c
 8002794:	209b      	movs	r0, #155	@ 0x9b
 8002796:	f7ff fe0b 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(165,140,'S');
 800279a:	2253      	movs	r2, #83	@ 0x53
 800279c:	218c      	movs	r1, #140	@ 0x8c
 800279e:	20a5      	movs	r0, #165	@ 0xa5
 80027a0:	f7ff fe06 	bl	80023b0 <LCD_DisplayChar>
	// smol pp
	LCD_Draw_Box(150,20,20,LCD_COLOR_BLUE2);
 80027a4:	f240 531f 	movw	r3, #1311	@ 0x51f
 80027a8:	2214      	movs	r2, #20
 80027aa:	2114      	movs	r1, #20
 80027ac:	2096      	movs	r0, #150	@ 0x96
 80027ae:	f7ff fd27 	bl	8002200 <LCD_Draw_Box>
	LCD_Draw_Box(150,40,20,LCD_COLOR_BLUE2);
 80027b2:	f240 531f 	movw	r3, #1311	@ 0x51f
 80027b6:	2214      	movs	r2, #20
 80027b8:	2128      	movs	r1, #40	@ 0x28
 80027ba:	2096      	movs	r0, #150	@ 0x96
 80027bc:	f7ff fd20 	bl	8002200 <LCD_Draw_Box>
	LCD_Draw_Box(170,20,20,LCD_COLOR_BLUE2);
 80027c0:	f240 531f 	movw	r3, #1311	@ 0x51f
 80027c4:	2214      	movs	r2, #20
 80027c6:	2114      	movs	r1, #20
 80027c8:	20aa      	movs	r0, #170	@ 0xaa
 80027ca:	f7ff fd19 	bl	8002200 <LCD_Draw_Box>
	LCD_Draw_Box(130,20,20,LCD_COLOR_BLUE2);
 80027ce:	f240 531f 	movw	r3, #1311	@ 0x51f
 80027d2:	2214      	movs	r2, #20
 80027d4:	2114      	movs	r1, #20
 80027d6:	2082      	movs	r0, #130	@ 0x82
 80027d8:	f7ff fd12 	bl	8002200 <LCD_Draw_Box>

	HAL_Delay(500);
 80027dc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80027e0:	f001 fce6 	bl	80041b0 <HAL_Delay>
	LCD_Clear(0, LCD_COLOR_BLACK);
 80027e4:	2100      	movs	r1, #0
 80027e6:	2000      	movs	r0, #0
 80027e8:	f7ff fd32 	bl	8002250 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 80027ec:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80027f0:	f7ff fd50 	bl	8002294 <LCD_SetTextColor>
	LCD_DisplayChar(100,140,'T');
 80027f4:	2254      	movs	r2, #84	@ 0x54
 80027f6:	218c      	movs	r1, #140	@ 0x8c
 80027f8:	2064      	movs	r0, #100	@ 0x64
 80027fa:	f7ff fdd9 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(115,140,'E');
 80027fe:	2245      	movs	r2, #69	@ 0x45
 8002800:	218c      	movs	r1, #140	@ 0x8c
 8002802:	2073      	movs	r0, #115	@ 0x73
 8002804:	f7ff fdd4 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(130,140,'T');
 8002808:	2254      	movs	r2, #84	@ 0x54
 800280a:	218c      	movs	r1, #140	@ 0x8c
 800280c:	2082      	movs	r0, #130	@ 0x82
 800280e:	f7ff fdcf 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(145,140,'R');
 8002812:	2252      	movs	r2, #82	@ 0x52
 8002814:	218c      	movs	r1, #140	@ 0x8c
 8002816:	2091      	movs	r0, #145	@ 0x91
 8002818:	f7ff fdca 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(155,140,'I');
 800281c:	2249      	movs	r2, #73	@ 0x49
 800281e:	218c      	movs	r1, #140	@ 0x8c
 8002820:	209b      	movs	r0, #155	@ 0x9b
 8002822:	f7ff fdc5 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(165,140,'S');
 8002826:	2253      	movs	r2, #83	@ 0x53
 8002828:	218c      	movs	r1, #140	@ 0x8c
 800282a:	20a5      	movs	r0, #165	@ 0xa5
 800282c:	f7ff fdc0 	bl	80023b0 <LCD_DisplayChar>
	//squiggle
	LCD_Draw_Box(70,170,20,LCD_COLOR_MAGENTA);
 8002830:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002834:	2214      	movs	r2, #20
 8002836:	21aa      	movs	r1, #170	@ 0xaa
 8002838:	2046      	movs	r0, #70	@ 0x46
 800283a:	f7ff fce1 	bl	8002200 <LCD_Draw_Box>
	LCD_Draw_Box(90,170,20,LCD_COLOR_MAGENTA);
 800283e:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002842:	2214      	movs	r2, #20
 8002844:	21aa      	movs	r1, #170	@ 0xaa
 8002846:	205a      	movs	r0, #90	@ 0x5a
 8002848:	f7ff fcda 	bl	8002200 <LCD_Draw_Box>
	LCD_Draw_Box(90,190,20,LCD_COLOR_MAGENTA);
 800284c:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002850:	2214      	movs	r2, #20
 8002852:	21be      	movs	r1, #190	@ 0xbe
 8002854:	205a      	movs	r0, #90	@ 0x5a
 8002856:	f7ff fcd3 	bl	8002200 <LCD_Draw_Box>
	LCD_Draw_Box(110,190,20,LCD_COLOR_MAGENTA);
 800285a:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800285e:	2214      	movs	r2, #20
 8002860:	21be      	movs	r1, #190	@ 0xbe
 8002862:	206e      	movs	r0, #110	@ 0x6e
 8002864:	f7ff fccc 	bl	8002200 <LCD_Draw_Box>

	HAL_Delay(500);
 8002868:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800286c:	f001 fca0 	bl	80041b0 <HAL_Delay>
	LCD_Clear(0, LCD_COLOR_WHITE);
 8002870:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002874:	2000      	movs	r0, #0
 8002876:	f7ff fceb 	bl	8002250 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 800287a:	2000      	movs	r0, #0
 800287c:	f7ff fd0a 	bl	8002294 <LCD_SetTextColor>
	LCD_DisplayChar(100,140,'T');
 8002880:	2254      	movs	r2, #84	@ 0x54
 8002882:	218c      	movs	r1, #140	@ 0x8c
 8002884:	2064      	movs	r0, #100	@ 0x64
 8002886:	f7ff fd93 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(115,140,'E');
 800288a:	2245      	movs	r2, #69	@ 0x45
 800288c:	218c      	movs	r1, #140	@ 0x8c
 800288e:	2073      	movs	r0, #115	@ 0x73
 8002890:	f7ff fd8e 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(130,140,'T');
 8002894:	2254      	movs	r2, #84	@ 0x54
 8002896:	218c      	movs	r1, #140	@ 0x8c
 8002898:	2082      	movs	r0, #130	@ 0x82
 800289a:	f7ff fd89 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(145,140,'R');
 800289e:	2252      	movs	r2, #82	@ 0x52
 80028a0:	218c      	movs	r1, #140	@ 0x8c
 80028a2:	2091      	movs	r0, #145	@ 0x91
 80028a4:	f7ff fd84 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(155,140,'I');
 80028a8:	2249      	movs	r2, #73	@ 0x49
 80028aa:	218c      	movs	r1, #140	@ 0x8c
 80028ac:	209b      	movs	r0, #155	@ 0x9b
 80028ae:	f7ff fd7f 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(165,140,'S');
 80028b2:	2253      	movs	r2, #83	@ 0x53
 80028b4:	218c      	movs	r1, #140	@ 0x8c
 80028b6:	20a5      	movs	r0, #165	@ 0xa5
 80028b8:	f7ff fd7a 	bl	80023b0 <LCD_DisplayChar>
	//other squiggle
	LCD_Draw_Box(160,270,20,LCD_COLOR_YELLOW);
 80028bc:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80028c0:	2214      	movs	r2, #20
 80028c2:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80028c6:	20a0      	movs	r0, #160	@ 0xa0
 80028c8:	f7ff fc9a 	bl	8002200 <LCD_Draw_Box>
	LCD_Draw_Box(180,270,20,LCD_COLOR_YELLOW);
 80028cc:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80028d0:	2214      	movs	r2, #20
 80028d2:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80028d6:	20b4      	movs	r0, #180	@ 0xb4
 80028d8:	f7ff fc92 	bl	8002200 <LCD_Draw_Box>
	LCD_Draw_Box(160,290,20,LCD_COLOR_YELLOW);
 80028dc:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80028e0:	2214      	movs	r2, #20
 80028e2:	f44f 7191 	mov.w	r1, #290	@ 0x122
 80028e6:	20a0      	movs	r0, #160	@ 0xa0
 80028e8:	f7ff fc8a 	bl	8002200 <LCD_Draw_Box>
	LCD_Draw_Box(140,290,20,LCD_COLOR_YELLOW);
 80028ec:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80028f0:	2214      	movs	r2, #20
 80028f2:	f44f 7191 	mov.w	r1, #290	@ 0x122
 80028f6:	208c      	movs	r0, #140	@ 0x8c
 80028f8:	f7ff fc82 	bl	8002200 <LCD_Draw_Box>


	HAL_Delay(500);
 80028fc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002900:	f001 fc56 	bl	80041b0 <HAL_Delay>
	LCD_Clear(0, LCD_COLOR_BLACK);
 8002904:	2100      	movs	r1, #0
 8002906:	2000      	movs	r0, #0
 8002908:	f7ff fca2 	bl	8002250 <LCD_Clear>


	//line
	LCD_Draw_Box(20,80,20,LCD_COLOR_CYAN);
 800290c:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8002910:	2214      	movs	r2, #20
 8002912:	2150      	movs	r1, #80	@ 0x50
 8002914:	2014      	movs	r0, #20
 8002916:	f7ff fc73 	bl	8002200 <LCD_Draw_Box>
	LCD_Draw_Box(20,60,20,LCD_COLOR_CYAN);
 800291a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800291e:	2214      	movs	r2, #20
 8002920:	213c      	movs	r1, #60	@ 0x3c
 8002922:	2014      	movs	r0, #20
 8002924:	e002      	b.n	800292c <title_screen+0x400>
 8002926:	bf00      	nop
 8002928:	20000004 	.word	0x20000004
 800292c:	f7ff fc68 	bl	8002200 <LCD_Draw_Box>
	LCD_Draw_Box(20,20,20,LCD_COLOR_CYAN);
 8002930:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8002934:	2214      	movs	r2, #20
 8002936:	2114      	movs	r1, #20
 8002938:	2014      	movs	r0, #20
 800293a:	f7ff fc61 	bl	8002200 <LCD_Draw_Box>
	LCD_Draw_Box(20,40,20,LCD_COLOR_CYAN);
 800293e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8002942:	2214      	movs	r2, #20
 8002944:	2128      	movs	r1, #40	@ 0x28
 8002946:	2014      	movs	r0, #20
 8002948:	f7ff fc5a 	bl	8002200 <LCD_Draw_Box>



	//square
	LCD_Draw_Box(160,200,20,LCD_COLOR_RED);
 800294c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002950:	2214      	movs	r2, #20
 8002952:	21c8      	movs	r1, #200	@ 0xc8
 8002954:	20a0      	movs	r0, #160	@ 0xa0
 8002956:	f7ff fc53 	bl	8002200 <LCD_Draw_Box>
	LCD_Draw_Box(180,200,20,LCD_COLOR_RED);
 800295a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800295e:	2214      	movs	r2, #20
 8002960:	21c8      	movs	r1, #200	@ 0xc8
 8002962:	20b4      	movs	r0, #180	@ 0xb4
 8002964:	f7ff fc4c 	bl	8002200 <LCD_Draw_Box>
	LCD_Draw_Box(180,220,20,LCD_COLOR_RED);
 8002968:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800296c:	2214      	movs	r2, #20
 800296e:	21dc      	movs	r1, #220	@ 0xdc
 8002970:	20b4      	movs	r0, #180	@ 0xb4
 8002972:	f7ff fc45 	bl	8002200 <LCD_Draw_Box>
	LCD_Draw_Box(160,220,20,LCD_COLOR_RED);
 8002976:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800297a:	2214      	movs	r2, #20
 800297c:	21dc      	movs	r1, #220	@ 0xdc
 800297e:	20a0      	movs	r0, #160	@ 0xa0
 8002980:	f7ff fc3e 	bl	8002200 <LCD_Draw_Box>


	//L
	LCD_Draw_Box(20,220,20,LCD_COLOR_BLUE);
 8002984:	231f      	movs	r3, #31
 8002986:	2214      	movs	r2, #20
 8002988:	21dc      	movs	r1, #220	@ 0xdc
 800298a:	2014      	movs	r0, #20
 800298c:	f7ff fc38 	bl	8002200 <LCD_Draw_Box>
	LCD_Draw_Box(20,240,20,LCD_COLOR_BLUE);
 8002990:	231f      	movs	r3, #31
 8002992:	2214      	movs	r2, #20
 8002994:	21f0      	movs	r1, #240	@ 0xf0
 8002996:	2014      	movs	r0, #20
 8002998:	f7ff fc32 	bl	8002200 <LCD_Draw_Box>
	LCD_Draw_Box(20,260,20,LCD_COLOR_BLUE);
 800299c:	231f      	movs	r3, #31
 800299e:	2214      	movs	r2, #20
 80029a0:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80029a4:	2014      	movs	r0, #20
 80029a6:	f7ff fc2b 	bl	8002200 <LCD_Draw_Box>
	LCD_Draw_Box(40,260,20,LCD_COLOR_BLUE);
 80029aa:	231f      	movs	r3, #31
 80029ac:	2214      	movs	r2, #20
 80029ae:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80029b2:	2028      	movs	r0, #40	@ 0x28
 80029b4:	f7ff fc24 	bl	8002200 <LCD_Draw_Box>


	//other L
	LCD_Draw_Box(80,80,20,LCD_COLOR_GREEN);
 80029b8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80029bc:	2214      	movs	r2, #20
 80029be:	2150      	movs	r1, #80	@ 0x50
 80029c0:	2050      	movs	r0, #80	@ 0x50
 80029c2:	f7ff fc1d 	bl	8002200 <LCD_Draw_Box>
	LCD_Draw_Box(80,100,20,LCD_COLOR_GREEN);
 80029c6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80029ca:	2214      	movs	r2, #20
 80029cc:	2164      	movs	r1, #100	@ 0x64
 80029ce:	2050      	movs	r0, #80	@ 0x50
 80029d0:	f7ff fc16 	bl	8002200 <LCD_Draw_Box>
	LCD_Draw_Box(80,120,20,LCD_COLOR_GREEN);
 80029d4:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80029d8:	2214      	movs	r2, #20
 80029da:	2178      	movs	r1, #120	@ 0x78
 80029dc:	2050      	movs	r0, #80	@ 0x50
 80029de:	f7ff fc0f 	bl	8002200 <LCD_Draw_Box>
	LCD_Draw_Box(60,120,20,LCD_COLOR_GREEN);
 80029e2:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80029e6:	2214      	movs	r2, #20
 80029e8:	2178      	movs	r1, #120	@ 0x78
 80029ea:	203c      	movs	r0, #60	@ 0x3c
 80029ec:	f7ff fc08 	bl	8002200 <LCD_Draw_Box>


	// smol pp
	LCD_Draw_Box(150,20,20,LCD_COLOR_BLUE2);
 80029f0:	f240 531f 	movw	r3, #1311	@ 0x51f
 80029f4:	2214      	movs	r2, #20
 80029f6:	2114      	movs	r1, #20
 80029f8:	2096      	movs	r0, #150	@ 0x96
 80029fa:	f7ff fc01 	bl	8002200 <LCD_Draw_Box>
	LCD_Draw_Box(150,40,20,LCD_COLOR_BLUE2);
 80029fe:	f240 531f 	movw	r3, #1311	@ 0x51f
 8002a02:	2214      	movs	r2, #20
 8002a04:	2128      	movs	r1, #40	@ 0x28
 8002a06:	2096      	movs	r0, #150	@ 0x96
 8002a08:	f7ff fbfa 	bl	8002200 <LCD_Draw_Box>
	LCD_Draw_Box(170,20,20,LCD_COLOR_BLUE2);
 8002a0c:	f240 531f 	movw	r3, #1311	@ 0x51f
 8002a10:	2214      	movs	r2, #20
 8002a12:	2114      	movs	r1, #20
 8002a14:	20aa      	movs	r0, #170	@ 0xaa
 8002a16:	f7ff fbf3 	bl	8002200 <LCD_Draw_Box>
	LCD_Draw_Box(130,20,20,LCD_COLOR_BLUE2);
 8002a1a:	f240 531f 	movw	r3, #1311	@ 0x51f
 8002a1e:	2214      	movs	r2, #20
 8002a20:	2114      	movs	r1, #20
 8002a22:	2082      	movs	r0, #130	@ 0x82
 8002a24:	f7ff fbec 	bl	8002200 <LCD_Draw_Box>


	//squiggle
	LCD_Draw_Box(70,170,20,LCD_COLOR_MAGENTA);
 8002a28:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002a2c:	2214      	movs	r2, #20
 8002a2e:	21aa      	movs	r1, #170	@ 0xaa
 8002a30:	2046      	movs	r0, #70	@ 0x46
 8002a32:	f7ff fbe5 	bl	8002200 <LCD_Draw_Box>
	LCD_Draw_Box(90,170,20,LCD_COLOR_MAGENTA);
 8002a36:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002a3a:	2214      	movs	r2, #20
 8002a3c:	21aa      	movs	r1, #170	@ 0xaa
 8002a3e:	205a      	movs	r0, #90	@ 0x5a
 8002a40:	f7ff fbde 	bl	8002200 <LCD_Draw_Box>
	LCD_Draw_Box(90,190,20,LCD_COLOR_MAGENTA);
 8002a44:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002a48:	2214      	movs	r2, #20
 8002a4a:	21be      	movs	r1, #190	@ 0xbe
 8002a4c:	205a      	movs	r0, #90	@ 0x5a
 8002a4e:	f7ff fbd7 	bl	8002200 <LCD_Draw_Box>
	LCD_Draw_Box(110,190,20,LCD_COLOR_MAGENTA);
 8002a52:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002a56:	2214      	movs	r2, #20
 8002a58:	21be      	movs	r1, #190	@ 0xbe
 8002a5a:	206e      	movs	r0, #110	@ 0x6e
 8002a5c:	f7ff fbd0 	bl	8002200 <LCD_Draw_Box>


	//other squiggle
	LCD_Draw_Box(160,270,20,LCD_COLOR_YELLOW);
 8002a60:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002a64:	2214      	movs	r2, #20
 8002a66:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002a6a:	20a0      	movs	r0, #160	@ 0xa0
 8002a6c:	f7ff fbc8 	bl	8002200 <LCD_Draw_Box>
	LCD_Draw_Box(180,270,20,LCD_COLOR_YELLOW);
 8002a70:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002a74:	2214      	movs	r2, #20
 8002a76:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002a7a:	20b4      	movs	r0, #180	@ 0xb4
 8002a7c:	f7ff fbc0 	bl	8002200 <LCD_Draw_Box>
	LCD_Draw_Box(160,290,20,LCD_COLOR_YELLOW);
 8002a80:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002a84:	2214      	movs	r2, #20
 8002a86:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8002a8a:	20a0      	movs	r0, #160	@ 0xa0
 8002a8c:	f7ff fbb8 	bl	8002200 <LCD_Draw_Box>
	LCD_Draw_Box(140,290,20,LCD_COLOR_YELLOW);
 8002a90:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002a94:	2214      	movs	r2, #20
 8002a96:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8002a9a:	208c      	movs	r0, #140	@ 0x8c
 8002a9c:	f7ff fbb0 	bl	8002200 <LCD_Draw_Box>

	LCD_SetTextColor(LCD_COLOR_WHITE);
 8002aa0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002aa4:	f7ff fbf6 	bl	8002294 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8002aa8:	4811      	ldr	r0, [pc, #68]	@ (8002af0 <title_screen+0x5c4>)
 8002aaa:	f7ff fc03 	bl	80022b4 <LCD_SetFont>
	LCD_DisplayChar(100,140,'T');
 8002aae:	2254      	movs	r2, #84	@ 0x54
 8002ab0:	218c      	movs	r1, #140	@ 0x8c
 8002ab2:	2064      	movs	r0, #100	@ 0x64
 8002ab4:	f7ff fc7c 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(115,140,'E');
 8002ab8:	2245      	movs	r2, #69	@ 0x45
 8002aba:	218c      	movs	r1, #140	@ 0x8c
 8002abc:	2073      	movs	r0, #115	@ 0x73
 8002abe:	f7ff fc77 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(130,140,'T');
 8002ac2:	2254      	movs	r2, #84	@ 0x54
 8002ac4:	218c      	movs	r1, #140	@ 0x8c
 8002ac6:	2082      	movs	r0, #130	@ 0x82
 8002ac8:	f7ff fc72 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(145,140,'R');
 8002acc:	2252      	movs	r2, #82	@ 0x52
 8002ace:	218c      	movs	r1, #140	@ 0x8c
 8002ad0:	2091      	movs	r0, #145	@ 0x91
 8002ad2:	f7ff fc6d 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(155,140,'I');
 8002ad6:	2249      	movs	r2, #73	@ 0x49
 8002ad8:	218c      	movs	r1, #140	@ 0x8c
 8002ada:	209b      	movs	r0, #155	@ 0x9b
 8002adc:	f7ff fc68 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(165,140,'S');
 8002ae0:	2253      	movs	r2, #83	@ 0x53
 8002ae2:	218c      	movs	r1, #140	@ 0x8c
 8002ae4:	20a5      	movs	r0, #165	@ 0xa5
 8002ae6:	f7ff fc63 	bl	80023b0 <LCD_DisplayChar>

}
 8002aea:	bf00      	nop
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	20000004 	.word	0x20000004

08002af4 <grid>:
void grid(void){
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
	for(uint16_t i = 30;i < 230; i=i+20 ){
 8002afa:	231e      	movs	r3, #30
 8002afc:	80fb      	strh	r3, [r7, #6]
 8002afe:	e009      	b.n	8002b14 <grid+0x20>
		LCD_Draw_Vertical_Line(i, 40, 220,LCD_COLOR_WHITE);
 8002b00:	88f8      	ldrh	r0, [r7, #6]
 8002b02:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b06:	22dc      	movs	r2, #220	@ 0xdc
 8002b08:	2128      	movs	r1, #40	@ 0x28
 8002b0a:	f7ff fb2b 	bl	8002164 <LCD_Draw_Vertical_Line>
	for(uint16_t i = 30;i < 230; i=i+20 ){
 8002b0e:	88fb      	ldrh	r3, [r7, #6]
 8002b10:	3314      	adds	r3, #20
 8002b12:	80fb      	strh	r3, [r7, #6]
 8002b14:	88fb      	ldrh	r3, [r7, #6]
 8002b16:	2be5      	cmp	r3, #229	@ 0xe5
 8002b18:	d9f2      	bls.n	8002b00 <grid+0xc>

	}
	for(uint16_t i = 40;i < 280; i=i + 20){
 8002b1a:	2328      	movs	r3, #40	@ 0x28
 8002b1c:	80bb      	strh	r3, [r7, #4]
 8002b1e:	e009      	b.n	8002b34 <grid+0x40>
		LCD_Draw_Horizontal_Line(30, i, 180,LCD_COLOR_WHITE);
 8002b20:	88b9      	ldrh	r1, [r7, #4]
 8002b22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b26:	22b4      	movs	r2, #180	@ 0xb4
 8002b28:	201e      	movs	r0, #30
 8002b2a:	f7ff fb42 	bl	80021b2 <LCD_Draw_Horizontal_Line>
	for(uint16_t i = 40;i < 280; i=i + 20){
 8002b2e:	88bb      	ldrh	r3, [r7, #4]
 8002b30:	3314      	adds	r3, #20
 8002b32:	80bb      	strh	r3, [r7, #4]
 8002b34:	88bb      	ldrh	r3, [r7, #4]
 8002b36:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8002b3a:	d3f1      	bcc.n	8002b20 <grid+0x2c>

	}
}
 8002b3c:	bf00      	nop
 8002b3e:	bf00      	nop
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
	...

08002b48 <game_screen>:
void game_screen(void){
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
	LCD_Clear(0, LCD_COLOR_BLACK);
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	2000      	movs	r0, #0
 8002b50:	f7ff fb7e 	bl	8002250 <LCD_Clear>
	grid();
 8002b54:	f7ff ffce 	bl	8002af4 <grid>

	LCD_SetTextColor(LCD_COLOR_WHITE);
 8002b58:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002b5c:	f7ff fb9a 	bl	8002294 <LCD_SetTextColor>
	LCD_SetFont(&Font12x12);
 8002b60:	4811      	ldr	r0, [pc, #68]	@ (8002ba8 <game_screen+0x60>)
 8002b62:	f7ff fba7 	bl	80022b4 <LCD_SetFont>
	LCD_DisplayChar(100,25,'T');
 8002b66:	2254      	movs	r2, #84	@ 0x54
 8002b68:	2119      	movs	r1, #25
 8002b6a:	2064      	movs	r0, #100	@ 0x64
 8002b6c:	f7ff fc20 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(107,25,'E');
 8002b70:	2245      	movs	r2, #69	@ 0x45
 8002b72:	2119      	movs	r1, #25
 8002b74:	206b      	movs	r0, #107	@ 0x6b
 8002b76:	f7ff fc1b 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(114,25,'T');
 8002b7a:	2254      	movs	r2, #84	@ 0x54
 8002b7c:	2119      	movs	r1, #25
 8002b7e:	2072      	movs	r0, #114	@ 0x72
 8002b80:	f7ff fc16 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(120,25,'R');
 8002b84:	2252      	movs	r2, #82	@ 0x52
 8002b86:	2119      	movs	r1, #25
 8002b88:	2078      	movs	r0, #120	@ 0x78
 8002b8a:	f7ff fc11 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(127,25,'I');
 8002b8e:	2249      	movs	r2, #73	@ 0x49
 8002b90:	2119      	movs	r1, #25
 8002b92:	207f      	movs	r0, #127	@ 0x7f
 8002b94:	f7ff fc0c 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(130,25,'S');
 8002b98:	2253      	movs	r2, #83	@ 0x53
 8002b9a:	2119      	movs	r1, #25
 8002b9c:	2082      	movs	r0, #130	@ 0x82
 8002b9e:	f7ff fc07 	bl	80023b0 <LCD_DisplayChar>
}
 8002ba2:	bf00      	nop
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	2000000c 	.word	0x2000000c

08002bac <end_screen>:
void end_screen(void){
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
	LCD_Clear(0, LCD_COLOR_BLACK);
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	f7ff fb4c 	bl	8002250 <LCD_Clear>
	LCD_SetFont(&Font16x24);
 8002bb8:	4879      	ldr	r0, [pc, #484]	@ (8002da0 <end_screen+0x1f4>)
 8002bba:	f7ff fb7b 	bl	80022b4 <LCD_SetFont>
	LCD_DisplayChar(120,140,'G');
 8002bbe:	2247      	movs	r2, #71	@ 0x47
 8002bc0:	218c      	movs	r1, #140	@ 0x8c
 8002bc2:	2078      	movs	r0, #120	@ 0x78
 8002bc4:	f7ff fbf4 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(135,140,'A');
 8002bc8:	2241      	movs	r2, #65	@ 0x41
 8002bca:	218c      	movs	r1, #140	@ 0x8c
 8002bcc:	2087      	movs	r0, #135	@ 0x87
 8002bce:	f7ff fbef 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(150,140,'M');
 8002bd2:	224d      	movs	r2, #77	@ 0x4d
 8002bd4:	218c      	movs	r1, #140	@ 0x8c
 8002bd6:	2096      	movs	r0, #150	@ 0x96
 8002bd8:	f7ff fbea 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(165,140,'E');
 8002bdc:	2245      	movs	r2, #69	@ 0x45
 8002bde:	218c      	movs	r1, #140	@ 0x8c
 8002be0:	20a5      	movs	r0, #165	@ 0xa5
 8002be2:	f7ff fbe5 	bl	80023b0 <LCD_DisplayChar>

	LCD_DisplayChar(120,170,'O');
 8002be6:	224f      	movs	r2, #79	@ 0x4f
 8002be8:	21aa      	movs	r1, #170	@ 0xaa
 8002bea:	2078      	movs	r0, #120	@ 0x78
 8002bec:	f7ff fbe0 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(135,170,'V');
 8002bf0:	2256      	movs	r2, #86	@ 0x56
 8002bf2:	21aa      	movs	r1, #170	@ 0xaa
 8002bf4:	2087      	movs	r0, #135	@ 0x87
 8002bf6:	f7ff fbdb 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(150,170,'E');
 8002bfa:	2245      	movs	r2, #69	@ 0x45
 8002bfc:	21aa      	movs	r1, #170	@ 0xaa
 8002bfe:	2096      	movs	r0, #150	@ 0x96
 8002c00:	f7ff fbd6 	bl	80023b0 <LCD_DisplayChar>
	LCD_DisplayChar(165,170,'R');
 8002c04:	2252      	movs	r2, #82	@ 0x52
 8002c06:	21aa      	movs	r1, #170	@ 0xaa
 8002c08:	20a5      	movs	r0, #165	@ 0xa5
 8002c0a:	f7ff fbd1 	bl	80023b0 <LCD_DisplayChar>




	//line
		LCD_Draw_Box(20,80,20,LCD_COLOR_CYAN);
 8002c0e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8002c12:	2214      	movs	r2, #20
 8002c14:	2150      	movs	r1, #80	@ 0x50
 8002c16:	2014      	movs	r0, #20
 8002c18:	f7ff faf2 	bl	8002200 <LCD_Draw_Box>
		LCD_Draw_Box(20,60,20,LCD_COLOR_CYAN);
 8002c1c:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8002c20:	2214      	movs	r2, #20
 8002c22:	213c      	movs	r1, #60	@ 0x3c
 8002c24:	2014      	movs	r0, #20
 8002c26:	f7ff faeb 	bl	8002200 <LCD_Draw_Box>
		LCD_Draw_Box(20,20,20,LCD_COLOR_CYAN);
 8002c2a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8002c2e:	2214      	movs	r2, #20
 8002c30:	2114      	movs	r1, #20
 8002c32:	2014      	movs	r0, #20
 8002c34:	f7ff fae4 	bl	8002200 <LCD_Draw_Box>
		LCD_Draw_Box(20,40,20,LCD_COLOR_CYAN);
 8002c38:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8002c3c:	2214      	movs	r2, #20
 8002c3e:	2128      	movs	r1, #40	@ 0x28
 8002c40:	2014      	movs	r0, #20
 8002c42:	f7ff fadd 	bl	8002200 <LCD_Draw_Box>



		//square
		LCD_Draw_Box(160,200,20,LCD_COLOR_RED);
 8002c46:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002c4a:	2214      	movs	r2, #20
 8002c4c:	21c8      	movs	r1, #200	@ 0xc8
 8002c4e:	20a0      	movs	r0, #160	@ 0xa0
 8002c50:	f7ff fad6 	bl	8002200 <LCD_Draw_Box>
		LCD_Draw_Box(180,200,20,LCD_COLOR_RED);
 8002c54:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002c58:	2214      	movs	r2, #20
 8002c5a:	21c8      	movs	r1, #200	@ 0xc8
 8002c5c:	20b4      	movs	r0, #180	@ 0xb4
 8002c5e:	f7ff facf 	bl	8002200 <LCD_Draw_Box>
		LCD_Draw_Box(180,220,20,LCD_COLOR_RED);
 8002c62:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002c66:	2214      	movs	r2, #20
 8002c68:	21dc      	movs	r1, #220	@ 0xdc
 8002c6a:	20b4      	movs	r0, #180	@ 0xb4
 8002c6c:	f7ff fac8 	bl	8002200 <LCD_Draw_Box>
		LCD_Draw_Box(160,220,20,LCD_COLOR_RED);
 8002c70:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002c74:	2214      	movs	r2, #20
 8002c76:	21dc      	movs	r1, #220	@ 0xdc
 8002c78:	20a0      	movs	r0, #160	@ 0xa0
 8002c7a:	f7ff fac1 	bl	8002200 <LCD_Draw_Box>


		//L
		LCD_Draw_Box(20,220,20,LCD_COLOR_BLUE);
 8002c7e:	231f      	movs	r3, #31
 8002c80:	2214      	movs	r2, #20
 8002c82:	21dc      	movs	r1, #220	@ 0xdc
 8002c84:	2014      	movs	r0, #20
 8002c86:	f7ff fabb 	bl	8002200 <LCD_Draw_Box>
		LCD_Draw_Box(20,240,20,LCD_COLOR_BLUE);
 8002c8a:	231f      	movs	r3, #31
 8002c8c:	2214      	movs	r2, #20
 8002c8e:	21f0      	movs	r1, #240	@ 0xf0
 8002c90:	2014      	movs	r0, #20
 8002c92:	f7ff fab5 	bl	8002200 <LCD_Draw_Box>
		LCD_Draw_Box(20,260,20,LCD_COLOR_BLUE);
 8002c96:	231f      	movs	r3, #31
 8002c98:	2214      	movs	r2, #20
 8002c9a:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8002c9e:	2014      	movs	r0, #20
 8002ca0:	f7ff faae 	bl	8002200 <LCD_Draw_Box>
		LCD_Draw_Box(40,260,20,LCD_COLOR_BLUE);
 8002ca4:	231f      	movs	r3, #31
 8002ca6:	2214      	movs	r2, #20
 8002ca8:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8002cac:	2028      	movs	r0, #40	@ 0x28
 8002cae:	f7ff faa7 	bl	8002200 <LCD_Draw_Box>


		//other L
		LCD_Draw_Box(80,80,20,LCD_COLOR_GREEN);
 8002cb2:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002cb6:	2214      	movs	r2, #20
 8002cb8:	2150      	movs	r1, #80	@ 0x50
 8002cba:	2050      	movs	r0, #80	@ 0x50
 8002cbc:	f7ff faa0 	bl	8002200 <LCD_Draw_Box>
		LCD_Draw_Box(80,100,20,LCD_COLOR_GREEN);
 8002cc0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002cc4:	2214      	movs	r2, #20
 8002cc6:	2164      	movs	r1, #100	@ 0x64
 8002cc8:	2050      	movs	r0, #80	@ 0x50
 8002cca:	f7ff fa99 	bl	8002200 <LCD_Draw_Box>
		LCD_Draw_Box(80,120,20,LCD_COLOR_GREEN);
 8002cce:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002cd2:	2214      	movs	r2, #20
 8002cd4:	2178      	movs	r1, #120	@ 0x78
 8002cd6:	2050      	movs	r0, #80	@ 0x50
 8002cd8:	f7ff fa92 	bl	8002200 <LCD_Draw_Box>
		LCD_Draw_Box(60,120,20,LCD_COLOR_GREEN);
 8002cdc:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002ce0:	2214      	movs	r2, #20
 8002ce2:	2178      	movs	r1, #120	@ 0x78
 8002ce4:	203c      	movs	r0, #60	@ 0x3c
 8002ce6:	f7ff fa8b 	bl	8002200 <LCD_Draw_Box>


		// smol pp
		LCD_Draw_Box(150,20,20,LCD_COLOR_BLUE2);
 8002cea:	f240 531f 	movw	r3, #1311	@ 0x51f
 8002cee:	2214      	movs	r2, #20
 8002cf0:	2114      	movs	r1, #20
 8002cf2:	2096      	movs	r0, #150	@ 0x96
 8002cf4:	f7ff fa84 	bl	8002200 <LCD_Draw_Box>
		LCD_Draw_Box(150,40,20,LCD_COLOR_BLUE2);
 8002cf8:	f240 531f 	movw	r3, #1311	@ 0x51f
 8002cfc:	2214      	movs	r2, #20
 8002cfe:	2128      	movs	r1, #40	@ 0x28
 8002d00:	2096      	movs	r0, #150	@ 0x96
 8002d02:	f7ff fa7d 	bl	8002200 <LCD_Draw_Box>
		LCD_Draw_Box(170,20,20,LCD_COLOR_BLUE2);
 8002d06:	f240 531f 	movw	r3, #1311	@ 0x51f
 8002d0a:	2214      	movs	r2, #20
 8002d0c:	2114      	movs	r1, #20
 8002d0e:	20aa      	movs	r0, #170	@ 0xaa
 8002d10:	f7ff fa76 	bl	8002200 <LCD_Draw_Box>
		LCD_Draw_Box(130,20,20,LCD_COLOR_BLUE2);
 8002d14:	f240 531f 	movw	r3, #1311	@ 0x51f
 8002d18:	2214      	movs	r2, #20
 8002d1a:	2114      	movs	r1, #20
 8002d1c:	2082      	movs	r0, #130	@ 0x82
 8002d1e:	f7ff fa6f 	bl	8002200 <LCD_Draw_Box>


		//squiggle
		LCD_Draw_Box(70,170,20,LCD_COLOR_MAGENTA);
 8002d22:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002d26:	2214      	movs	r2, #20
 8002d28:	21aa      	movs	r1, #170	@ 0xaa
 8002d2a:	2046      	movs	r0, #70	@ 0x46
 8002d2c:	f7ff fa68 	bl	8002200 <LCD_Draw_Box>
		LCD_Draw_Box(90,170,20,LCD_COLOR_MAGENTA);
 8002d30:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002d34:	2214      	movs	r2, #20
 8002d36:	21aa      	movs	r1, #170	@ 0xaa
 8002d38:	205a      	movs	r0, #90	@ 0x5a
 8002d3a:	f7ff fa61 	bl	8002200 <LCD_Draw_Box>
		LCD_Draw_Box(90,190,20,LCD_COLOR_MAGENTA);
 8002d3e:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002d42:	2214      	movs	r2, #20
 8002d44:	21be      	movs	r1, #190	@ 0xbe
 8002d46:	205a      	movs	r0, #90	@ 0x5a
 8002d48:	f7ff fa5a 	bl	8002200 <LCD_Draw_Box>
		LCD_Draw_Box(110,190,20,LCD_COLOR_MAGENTA);
 8002d4c:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002d50:	2214      	movs	r2, #20
 8002d52:	21be      	movs	r1, #190	@ 0xbe
 8002d54:	206e      	movs	r0, #110	@ 0x6e
 8002d56:	f7ff fa53 	bl	8002200 <LCD_Draw_Box>


		//other squiggle
		LCD_Draw_Box(160,270,20,LCD_COLOR_YELLOW);
 8002d5a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002d5e:	2214      	movs	r2, #20
 8002d60:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002d64:	20a0      	movs	r0, #160	@ 0xa0
 8002d66:	f7ff fa4b 	bl	8002200 <LCD_Draw_Box>
		LCD_Draw_Box(180,270,20,LCD_COLOR_YELLOW);
 8002d6a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002d6e:	2214      	movs	r2, #20
 8002d70:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002d74:	20b4      	movs	r0, #180	@ 0xb4
 8002d76:	f7ff fa43 	bl	8002200 <LCD_Draw_Box>
		LCD_Draw_Box(160,290,20,LCD_COLOR_YELLOW);
 8002d7a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002d7e:	2214      	movs	r2, #20
 8002d80:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8002d84:	20a0      	movs	r0, #160	@ 0xa0
 8002d86:	f7ff fa3b 	bl	8002200 <LCD_Draw_Box>
		LCD_Draw_Box(140,290,20,LCD_COLOR_YELLOW);
 8002d8a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002d8e:	2214      	movs	r2, #20
 8002d90:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8002d94:	208c      	movs	r0, #140	@ 0x8c
 8002d96:	f7ff fa33 	bl	8002200 <LCD_Draw_Box>
}
 8002d9a:	bf00      	nop
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	20000004 	.word	0x20000004

08002da4 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002da8:	b672      	cpsid	i
}
 8002daa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002dac:	bf00      	nop
 8002dae:	e7fd      	b.n	8002dac <LCD_Error_Handler+0x8>

08002db0 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8002db4:	f000 ff16 	bl	8003be4 <STMPE811_Init>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d001      	beq.n	8002dc2 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8002dbe:	bf00      	nop
 8002dc0:	e7fd      	b.n	8002dbe <InitializeLCDTouch+0xe>
  }
}
 8002dc2:	bf00      	nop
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <ReadRegisterFromTouchModule>:
{
	STMPE811_DetermineTouchPosition(touchStruct);
}

uint8_t ReadRegisterFromTouchModule(uint8_t RegToRead)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b082      	sub	sp, #8
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	4603      	mov	r3, r0
 8002dce:	71fb      	strb	r3, [r7, #7]
	return STMPE811_Read(RegToRead);
 8002dd0:	79fb      	ldrb	r3, [r7, #7]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 ffcd 	bl	8003d72 <STMPE811_Read>
 8002dd8:	4603      	mov	r3, r0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <WriteDataToTouchModule>:

void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b082      	sub	sp, #8
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	4603      	mov	r3, r0
 8002dea:	460a      	mov	r2, r1
 8002dec:	71fb      	strb	r3, [r7, #7]
 8002dee:	4613      	mov	r3, r2
 8002df0:	71bb      	strb	r3, [r7, #6]
	STMPE811_Write(RegToWrite, writeData);
 8002df2:	79ba      	ldrb	r2, [r7, #6]
 8002df4:	79fb      	ldrb	r3, [r7, #7]
 8002df6:	4611      	mov	r1, r2
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f000 ffcb 	bl	8003d94 <STMPE811_Write>
}
 8002dfe:	bf00      	nop
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
	...

08002e08 <RNG_init>:
 *      Author: Ofhbr
 */
#include "RNG_Driver.h"
static RNG_HandleTypeDef hRNG;

void RNG_init(void){
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0

	hRNG.Instance = RNG;
 8002e0c:	4b06      	ldr	r3, [pc, #24]	@ (8002e28 <RNG_init+0x20>)
 8002e0e:	4a07      	ldr	r2, [pc, #28]	@ (8002e2c <RNG_init+0x24>)
 8002e10:	601a      	str	r2, [r3, #0]
	if(HAL_RNG_Init(&hRNG) != HAL_OK){
 8002e12:	4805      	ldr	r0, [pc, #20]	@ (8002e28 <RNG_init+0x20>)
 8002e14:	f003 ff58 	bl	8006cc8 <HAL_RNG_Init>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <RNG_init+0x1a>
			while(1){
 8002e1e:	bf00      	nop
 8002e20:	e7fd      	b.n	8002e1e <RNG_init+0x16>
			}
		}
}
 8002e22:	bf00      	nop
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	200259b4 	.word	0x200259b4
 8002e2c:	50060800 	.word	0x50060800

08002e30 <get_rand_num>:
uint32_t get_rand_num(void){
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
	RNG_init();
 8002e36:	f7ff ffe7 	bl	8002e08 <RNG_init>
	if(HAL_RNG_Init(&hRNG)!= HAL_OK){
 8002e3a:	4810      	ldr	r0, [pc, #64]	@ (8002e7c <get_rand_num+0x4c>)
 8002e3c:	f003 ff44 	bl	8006cc8 <HAL_RNG_Init>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <get_rand_num+0x1a>
			while(1){
 8002e46:	bf00      	nop
 8002e48:	e7fd      	b.n	8002e46 <get_rand_num+0x16>
			}
		}
	uint32_t num = 0;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	607b      	str	r3, [r7, #4]
	HAL_RNG_GenerateRandomNumber(&hRNG,&num);
 8002e4e:	1d3b      	adds	r3, r7, #4
 8002e50:	4619      	mov	r1, r3
 8002e52:	480a      	ldr	r0, [pc, #40]	@ (8002e7c <get_rand_num+0x4c>)
 8002e54:	f003 ff62 	bl	8006d1c <HAL_RNG_GenerateRandomNumber>
	num = num % 7;
 8002e58:	6879      	ldr	r1, [r7, #4]
 8002e5a:	4b09      	ldr	r3, [pc, #36]	@ (8002e80 <get_rand_num+0x50>)
 8002e5c:	fba3 2301 	umull	r2, r3, r3, r1
 8002e60:	1aca      	subs	r2, r1, r3
 8002e62:	0852      	lsrs	r2, r2, #1
 8002e64:	4413      	add	r3, r2
 8002e66:	089a      	lsrs	r2, r3, #2
 8002e68:	4613      	mov	r3, r2
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	1a9b      	subs	r3, r3, r2
 8002e6e:	1aca      	subs	r2, r1, r3
 8002e70:	607a      	str	r2, [r7, #4]
	return num;
 8002e72:	687b      	ldr	r3, [r7, #4]

}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	200259b4 	.word	0x200259b4
 8002e80:	24924925 	.word	0x24924925

08002e84 <getScheduledEvents>:
 */
#include "Scheduler.h"

static uint32_t scheduledEvents;

uint32_t getScheduledEvents(void){
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
	return scheduledEvents;
 8002e88:	4b03      	ldr	r3, [pc, #12]	@ (8002e98 <getScheduledEvents+0x14>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	200259c4 	.word	0x200259c4

08002e9c <addSchedulerEvent>:
void addSchedulerEvent(uint32_t fent){
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
	scheduledEvents |=  fent;
 8002ea4:	4b05      	ldr	r3, [pc, #20]	@ (8002ebc <addSchedulerEvent+0x20>)
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	4a03      	ldr	r2, [pc, #12]	@ (8002ebc <addSchedulerEvent+0x20>)
 8002eae:	6013      	str	r3, [r2, #0]
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	200259c4 	.word	0x200259c4

08002ec0 <removeSchedulerEvent>:
void removeSchedulerEvent(uint32_t fent){
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
	scheduledEvents &= ~ fent;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	43da      	mvns	r2, r3
 8002ecc:	4b05      	ldr	r3, [pc, #20]	@ (8002ee4 <removeSchedulerEvent+0x24>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	4a04      	ldr	r2, [pc, #16]	@ (8002ee4 <removeSchedulerEvent+0x24>)
 8002ed4:	6013      	str	r3, [r2, #0]
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	200259c4 	.word	0x200259c4

08002ee8 <timerInit>:

#include "TIMER.H"
TIM_HandleTypeDef timer = {0};


void timerInit(){
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
	//Clock Division
	//frequency 6.25 * 1000000; tim 2
	timer.Instance = TIM2;
 8002eec:	4b12      	ldr	r3, [pc, #72]	@ (8002f38 <timerInit+0x50>)
 8002eee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002ef2:	601a      	str	r2, [r3, #0]
	timer.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ef4:	4b10      	ldr	r3, [pc, #64]	@ (8002f38 <timerInit+0x50>)
 8002ef6:	2280      	movs	r2, #128	@ 0x80
 8002ef8:	619a      	str	r2, [r3, #24]
	timer.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002efa:	4b0f      	ldr	r3, [pc, #60]	@ (8002f38 <timerInit+0x50>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	611a      	str	r2, [r3, #16]
	timer.Init.Prescaler = 65331;
 8002f00:	4b0d      	ldr	r3, [pc, #52]	@ (8002f38 <timerInit+0x50>)
 8002f02:	f64f 7233 	movw	r2, #65331	@ 0xff33
 8002f06:	605a      	str	r2, [r3, #4]
	timer.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f08:	4b0b      	ldr	r3, [pc, #44]	@ (8002f38 <timerInit+0x50>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	609a      	str	r2, [r3, #8]
	timer.Init.Period = 1250;
 8002f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f38 <timerInit+0x50>)
 8002f10:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8002f14:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Init(&timer);
 8002f16:	4808      	ldr	r0, [pc, #32]	@ (8002f38 <timerInit+0x50>)
 8002f18:	f004 fa36 	bl	8007388 <HAL_TIM_Base_Init>
	__HAL_TIM_URS_ENABLE(&timer);
 8002f1c:	4b06      	ldr	r3, [pc, #24]	@ (8002f38 <timerInit+0x50>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	4b05      	ldr	r3, [pc, #20]	@ (8002f38 <timerInit+0x50>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0204 	orr.w	r2, r2, #4
 8002f2a:	601a      	str	r2, [r3, #0]
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f2c:	201c      	movs	r0, #28
 8002f2e:	f001 fa9c 	bl	800446a <HAL_NVIC_EnableIRQ>
}
 8002f32:	bf00      	nop
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	200259c8 	.word	0x200259c8

08002f3c <tim2Start>:
void tim2Start(){
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
	__HAL_TIM_ENABLE_IT( &timer,TIM_IT_UPDATE);
 8002f40:	4b08      	ldr	r3, [pc, #32]	@ (8002f64 <tim2Start+0x28>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68da      	ldr	r2, [r3, #12]
 8002f46:	4b07      	ldr	r3, [pc, #28]	@ (8002f64 <tim2Start+0x28>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f042 0201 	orr.w	r2, r2, #1
 8002f4e:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Start_IT(&timer);
 8002f50:	4804      	ldr	r0, [pc, #16]	@ (8002f64 <tim2Start+0x28>)
 8002f52:	f004 fa69 	bl	8007428 <HAL_TIM_Base_Start_IT>
	__HAL_TIM_CLEAR_IT(&timer,TIM_IT_UPDATE);
 8002f56:	4b03      	ldr	r3, [pc, #12]	@ (8002f64 <tim2Start+0x28>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f06f 0201 	mvn.w	r2, #1
 8002f5e:	611a      	str	r2, [r3, #16]
}
 8002f60:	bf00      	nop
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	200259c8 	.word	0x200259c8

08002f68 <TIM2_IRQHandler>:
void tim2Stop(){
	__HAL_TIM_ENABLE_IT( &timer,TIM_IT_UPDATE);
	HAL_TIM_Base_Stop_IT(&timer);
	__HAL_TIM_CLEAR_IT(&timer,TIM_IT_UPDATE);
}
void TIM2_IRQHandler(){
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f6c:	201c      	movs	r0, #28
 8002f6e:	f001 fa7c 	bl	800446a <HAL_NVIC_EnableIRQ>
	__HAL_TIM_CLEAR_IT(&timer,TIM_IT_UPDATE);
 8002f72:	4b06      	ldr	r3, [pc, #24]	@ (8002f8c <TIM2_IRQHandler+0x24>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f06f 0201 	mvn.w	r2, #1
 8002f7a:	611a      	str	r2, [r3, #16]
	// move down code
	addSchedulerEvent(BlockDown);
 8002f7c:	2001      	movs	r0, #1
 8002f7e:	f7ff ff8d 	bl	8002e9c <addSchedulerEvent>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f82:	201c      	movs	r0, #28
 8002f84:	f001 fa71 	bl	800446a <HAL_NVIC_EnableIRQ>
}
 8002f88:	bf00      	nop
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	200259c8 	.word	0x200259c8

08002f90 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002f94:	f000 f9fe 	bl	8003394 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8002f98:	20ca      	movs	r0, #202	@ 0xca
 8002f9a:	f000 f943 	bl	8003224 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8002f9e:	20c3      	movs	r0, #195	@ 0xc3
 8002fa0:	f000 f94d 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8002fa4:	2008      	movs	r0, #8
 8002fa6:	f000 f94a 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8002faa:	2050      	movs	r0, #80	@ 0x50
 8002fac:	f000 f947 	bl	800323e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8002fb0:	20cf      	movs	r0, #207	@ 0xcf
 8002fb2:	f000 f937 	bl	8003224 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8002fb6:	2000      	movs	r0, #0
 8002fb8:	f000 f941 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8002fbc:	20c1      	movs	r0, #193	@ 0xc1
 8002fbe:	f000 f93e 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8002fc2:	2030      	movs	r0, #48	@ 0x30
 8002fc4:	f000 f93b 	bl	800323e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8002fc8:	20ed      	movs	r0, #237	@ 0xed
 8002fca:	f000 f92b 	bl	8003224 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8002fce:	2064      	movs	r0, #100	@ 0x64
 8002fd0:	f000 f935 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8002fd4:	2003      	movs	r0, #3
 8002fd6:	f000 f932 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8002fda:	2012      	movs	r0, #18
 8002fdc:	f000 f92f 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8002fe0:	2081      	movs	r0, #129	@ 0x81
 8002fe2:	f000 f92c 	bl	800323e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8002fe6:	20e8      	movs	r0, #232	@ 0xe8
 8002fe8:	f000 f91c 	bl	8003224 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8002fec:	2085      	movs	r0, #133	@ 0x85
 8002fee:	f000 f926 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002ff2:	2000      	movs	r0, #0
 8002ff4:	f000 f923 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8002ff8:	2078      	movs	r0, #120	@ 0x78
 8002ffa:	f000 f920 	bl	800323e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8002ffe:	20cb      	movs	r0, #203	@ 0xcb
 8003000:	f000 f910 	bl	8003224 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8003004:	2039      	movs	r0, #57	@ 0x39
 8003006:	f000 f91a 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 800300a:	202c      	movs	r0, #44	@ 0x2c
 800300c:	f000 f917 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003010:	2000      	movs	r0, #0
 8003012:	f000 f914 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8003016:	2034      	movs	r0, #52	@ 0x34
 8003018:	f000 f911 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 800301c:	2002      	movs	r0, #2
 800301e:	f000 f90e 	bl	800323e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8003022:	20f7      	movs	r0, #247	@ 0xf7
 8003024:	f000 f8fe 	bl	8003224 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8003028:	2020      	movs	r0, #32
 800302a:	f000 f908 	bl	800323e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 800302e:	20ea      	movs	r0, #234	@ 0xea
 8003030:	f000 f8f8 	bl	8003224 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003034:	2000      	movs	r0, #0
 8003036:	f000 f902 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800303a:	2000      	movs	r0, #0
 800303c:	f000 f8ff 	bl	800323e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8003040:	20b1      	movs	r0, #177	@ 0xb1
 8003042:	f000 f8ef 	bl	8003224 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003046:	2000      	movs	r0, #0
 8003048:	f000 f8f9 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 800304c:	201b      	movs	r0, #27
 800304e:	f000 f8f6 	bl	800323e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8003052:	20b6      	movs	r0, #182	@ 0xb6
 8003054:	f000 f8e6 	bl	8003224 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8003058:	200a      	movs	r0, #10
 800305a:	f000 f8f0 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 800305e:	20a2      	movs	r0, #162	@ 0xa2
 8003060:	f000 f8ed 	bl	800323e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8003064:	20c0      	movs	r0, #192	@ 0xc0
 8003066:	f000 f8dd 	bl	8003224 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 800306a:	2010      	movs	r0, #16
 800306c:	f000 f8e7 	bl	800323e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8003070:	20c1      	movs	r0, #193	@ 0xc1
 8003072:	f000 f8d7 	bl	8003224 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8003076:	2010      	movs	r0, #16
 8003078:	f000 f8e1 	bl	800323e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 800307c:	20c5      	movs	r0, #197	@ 0xc5
 800307e:	f000 f8d1 	bl	8003224 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8003082:	2045      	movs	r0, #69	@ 0x45
 8003084:	f000 f8db 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8003088:	2015      	movs	r0, #21
 800308a:	f000 f8d8 	bl	800323e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 800308e:	20c7      	movs	r0, #199	@ 0xc7
 8003090:	f000 f8c8 	bl	8003224 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8003094:	2090      	movs	r0, #144	@ 0x90
 8003096:	f000 f8d2 	bl	800323e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 800309a:	2036      	movs	r0, #54	@ 0x36
 800309c:	f000 f8c2 	bl	8003224 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 80030a0:	20c8      	movs	r0, #200	@ 0xc8
 80030a2:	f000 f8cc 	bl	800323e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 80030a6:	20f2      	movs	r0, #242	@ 0xf2
 80030a8:	f000 f8bc 	bl	8003224 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80030ac:	2000      	movs	r0, #0
 80030ae:	f000 f8c6 	bl	800323e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 80030b2:	20b0      	movs	r0, #176	@ 0xb0
 80030b4:	f000 f8b6 	bl	8003224 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 80030b8:	20c2      	movs	r0, #194	@ 0xc2
 80030ba:	f000 f8c0 	bl	800323e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80030be:	20b6      	movs	r0, #182	@ 0xb6
 80030c0:	f000 f8b0 	bl	8003224 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80030c4:	200a      	movs	r0, #10
 80030c6:	f000 f8ba 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 80030ca:	20a7      	movs	r0, #167	@ 0xa7
 80030cc:	f000 f8b7 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 80030d0:	2027      	movs	r0, #39	@ 0x27
 80030d2:	f000 f8b4 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80030d6:	2004      	movs	r0, #4
 80030d8:	f000 f8b1 	bl	800323e <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 80030dc:	202a      	movs	r0, #42	@ 0x2a
 80030de:	f000 f8a1 	bl	8003224 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80030e2:	2000      	movs	r0, #0
 80030e4:	f000 f8ab 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80030e8:	2000      	movs	r0, #0
 80030ea:	f000 f8a8 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80030ee:	2000      	movs	r0, #0
 80030f0:	f000 f8a5 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 80030f4:	20ef      	movs	r0, #239	@ 0xef
 80030f6:	f000 f8a2 	bl	800323e <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 80030fa:	202b      	movs	r0, #43	@ 0x2b
 80030fc:	f000 f892 	bl	8003224 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003100:	2000      	movs	r0, #0
 8003102:	f000 f89c 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003106:	2000      	movs	r0, #0
 8003108:	f000 f899 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 800310c:	2001      	movs	r0, #1
 800310e:	f000 f896 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8003112:	203f      	movs	r0, #63	@ 0x3f
 8003114:	f000 f893 	bl	800323e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8003118:	20f6      	movs	r0, #246	@ 0xf6
 800311a:	f000 f883 	bl	8003224 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 800311e:	2001      	movs	r0, #1
 8003120:	f000 f88d 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003124:	2000      	movs	r0, #0
 8003126:	f000 f88a 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 800312a:	2006      	movs	r0, #6
 800312c:	f000 f887 	bl	800323e <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8003130:	202c      	movs	r0, #44	@ 0x2c
 8003132:	f000 f877 	bl	8003224 <ili9341_Write_Reg>
  LCD_Delay(200);
 8003136:	20c8      	movs	r0, #200	@ 0xc8
 8003138:	f000 f9e8 	bl	800350c <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 800313c:	2026      	movs	r0, #38	@ 0x26
 800313e:	f000 f871 	bl	8003224 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8003142:	2001      	movs	r0, #1
 8003144:	f000 f87b 	bl	800323e <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8003148:	20e0      	movs	r0, #224	@ 0xe0
 800314a:	f000 f86b 	bl	8003224 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 800314e:	200f      	movs	r0, #15
 8003150:	f000 f875 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8003154:	2029      	movs	r0, #41	@ 0x29
 8003156:	f000 f872 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 800315a:	2024      	movs	r0, #36	@ 0x24
 800315c:	f000 f86f 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8003160:	200c      	movs	r0, #12
 8003162:	f000 f86c 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8003166:	200e      	movs	r0, #14
 8003168:	f000 f869 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 800316c:	2009      	movs	r0, #9
 800316e:	f000 f866 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8003172:	204e      	movs	r0, #78	@ 0x4e
 8003174:	f000 f863 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8003178:	2078      	movs	r0, #120	@ 0x78
 800317a:	f000 f860 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 800317e:	203c      	movs	r0, #60	@ 0x3c
 8003180:	f000 f85d 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8003184:	2009      	movs	r0, #9
 8003186:	f000 f85a 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 800318a:	2013      	movs	r0, #19
 800318c:	f000 f857 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8003190:	2005      	movs	r0, #5
 8003192:	f000 f854 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8003196:	2017      	movs	r0, #23
 8003198:	f000 f851 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800319c:	2011      	movs	r0, #17
 800319e:	f000 f84e 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80031a2:	2000      	movs	r0, #0
 80031a4:	f000 f84b 	bl	800323e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 80031a8:	20e1      	movs	r0, #225	@ 0xe1
 80031aa:	f000 f83b 	bl	8003224 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80031ae:	2000      	movs	r0, #0
 80031b0:	f000 f845 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 80031b4:	2016      	movs	r0, #22
 80031b6:	f000 f842 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80031ba:	201b      	movs	r0, #27
 80031bc:	f000 f83f 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80031c0:	2004      	movs	r0, #4
 80031c2:	f000 f83c 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80031c6:	2011      	movs	r0, #17
 80031c8:	f000 f839 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 80031cc:	2007      	movs	r0, #7
 80031ce:	f000 f836 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 80031d2:	2031      	movs	r0, #49	@ 0x31
 80031d4:	f000 f833 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 80031d8:	2033      	movs	r0, #51	@ 0x33
 80031da:	f000 f830 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 80031de:	2042      	movs	r0, #66	@ 0x42
 80031e0:	f000 f82d 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80031e4:	2005      	movs	r0, #5
 80031e6:	f000 f82a 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80031ea:	200c      	movs	r0, #12
 80031ec:	f000 f827 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 80031f0:	200a      	movs	r0, #10
 80031f2:	f000 f824 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 80031f6:	2028      	movs	r0, #40	@ 0x28
 80031f8:	f000 f821 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 80031fc:	202f      	movs	r0, #47	@ 0x2f
 80031fe:	f000 f81e 	bl	800323e <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8003202:	200f      	movs	r0, #15
 8003204:	f000 f81b 	bl	800323e <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8003208:	2011      	movs	r0, #17
 800320a:	f000 f80b 	bl	8003224 <ili9341_Write_Reg>
  LCD_Delay(200);
 800320e:	20c8      	movs	r0, #200	@ 0xc8
 8003210:	f000 f97c 	bl	800350c <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8003214:	2029      	movs	r0, #41	@ 0x29
 8003216:	f000 f805 	bl	8003224 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 800321a:	202c      	movs	r0, #44	@ 0x2c
 800321c:	f000 f802 	bl	8003224 <ili9341_Write_Reg>
}
 8003220:	bf00      	nop
 8003222:	bd80      	pop	{r7, pc}

08003224 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	4603      	mov	r3, r0
 800322c:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 800322e:	79fb      	ldrb	r3, [r7, #7]
 8003230:	4618      	mov	r0, r3
 8003232:	f000 f949 	bl	80034c8 <LCD_IO_WriteReg>
}
 8003236:	bf00      	nop
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b082      	sub	sp, #8
 8003242:	af00      	add	r7, sp, #0
 8003244:	4603      	mov	r3, r0
 8003246:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8003248:	88fb      	ldrh	r3, [r7, #6]
 800324a:	4618      	mov	r0, r3
 800324c:	f000 f91a 	bl	8003484 <LCD_IO_WriteData>
}
 8003250:	bf00      	nop
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800325c:	4819      	ldr	r0, [pc, #100]	@ (80032c4 <SPI_Init+0x6c>)
 800325e:	f003 ffa8 	bl	80071b2 <HAL_SPI_GetState>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d12b      	bne.n	80032c0 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8003268:	4b16      	ldr	r3, [pc, #88]	@ (80032c4 <SPI_Init+0x6c>)
 800326a:	4a17      	ldr	r2, [pc, #92]	@ (80032c8 <SPI_Init+0x70>)
 800326c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800326e:	4b15      	ldr	r3, [pc, #84]	@ (80032c4 <SPI_Init+0x6c>)
 8003270:	2218      	movs	r2, #24
 8003272:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8003274:	4b13      	ldr	r3, [pc, #76]	@ (80032c4 <SPI_Init+0x6c>)
 8003276:	2200      	movs	r2, #0
 8003278:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800327a:	4b12      	ldr	r3, [pc, #72]	@ (80032c4 <SPI_Init+0x6c>)
 800327c:	2200      	movs	r2, #0
 800327e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8003280:	4b10      	ldr	r3, [pc, #64]	@ (80032c4 <SPI_Init+0x6c>)
 8003282:	2200      	movs	r2, #0
 8003284:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8003286:	4b0f      	ldr	r3, [pc, #60]	@ (80032c4 <SPI_Init+0x6c>)
 8003288:	2200      	movs	r2, #0
 800328a:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 800328c:	4b0d      	ldr	r3, [pc, #52]	@ (80032c4 <SPI_Init+0x6c>)
 800328e:	2207      	movs	r2, #7
 8003290:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8003292:	4b0c      	ldr	r3, [pc, #48]	@ (80032c4 <SPI_Init+0x6c>)
 8003294:	2200      	movs	r2, #0
 8003296:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8003298:	4b0a      	ldr	r3, [pc, #40]	@ (80032c4 <SPI_Init+0x6c>)
 800329a:	2200      	movs	r2, #0
 800329c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800329e:	4b09      	ldr	r3, [pc, #36]	@ (80032c4 <SPI_Init+0x6c>)
 80032a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032a4:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80032a6:	4b07      	ldr	r3, [pc, #28]	@ (80032c4 <SPI_Init+0x6c>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80032ac:	4b05      	ldr	r3, [pc, #20]	@ (80032c4 <SPI_Init+0x6c>)
 80032ae:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80032b2:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 80032b4:	4803      	ldr	r0, [pc, #12]	@ (80032c4 <SPI_Init+0x6c>)
 80032b6:	f000 f833 	bl	8003320 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80032ba:	4802      	ldr	r0, [pc, #8]	@ (80032c4 <SPI_Init+0x6c>)
 80032bc:	f003 fd84 	bl	8006dc8 <HAL_SPI_Init>
  }
}
 80032c0:	bf00      	nop
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	20025a10 	.word	0x20025a10
 80032c8:	40015000 	.word	0x40015000

080032cc <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	4603      	mov	r3, r0
 80032d4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 80032da:	4b09      	ldr	r3, [pc, #36]	@ (8003300 <SPI_Write+0x34>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	1db9      	adds	r1, r7, #6
 80032e0:	2201      	movs	r2, #1
 80032e2:	4808      	ldr	r0, [pc, #32]	@ (8003304 <SPI_Write+0x38>)
 80032e4:	f003 fe21 	bl	8006f2a <HAL_SPI_Transmit>
 80032e8:	4603      	mov	r3, r0
 80032ea:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 80032ec:	7bfb      	ldrb	r3, [r7, #15]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 80032f2:	f000 f809 	bl	8003308 <SPI_Error>
  }
}
 80032f6:	bf00      	nop
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	20000014 	.word	0x20000014
 8003304:	20025a10 	.word	0x20025a10

08003308 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 800330c:	4803      	ldr	r0, [pc, #12]	@ (800331c <SPI_Error+0x14>)
 800330e:	f003 fde4 	bl	8006eda <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8003312:	f7ff ffa1 	bl	8003258 <SPI_Init>
}
 8003316:	bf00      	nop
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	20025a10 	.word	0x20025a10

08003320 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b08a      	sub	sp, #40	@ 0x28
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8003328:	2300      	movs	r3, #0
 800332a:	613b      	str	r3, [r7, #16]
 800332c:	4b17      	ldr	r3, [pc, #92]	@ (800338c <SPI_MspInit+0x6c>)
 800332e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003330:	4a16      	ldr	r2, [pc, #88]	@ (800338c <SPI_MspInit+0x6c>)
 8003332:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003336:	6453      	str	r3, [r2, #68]	@ 0x44
 8003338:	4b14      	ldr	r3, [pc, #80]	@ (800338c <SPI_MspInit+0x6c>)
 800333a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800333c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003340:	613b      	str	r3, [r7, #16]
 8003342:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8003344:	2300      	movs	r3, #0
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	4b10      	ldr	r3, [pc, #64]	@ (800338c <SPI_MspInit+0x6c>)
 800334a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334c:	4a0f      	ldr	r2, [pc, #60]	@ (800338c <SPI_MspInit+0x6c>)
 800334e:	f043 0320 	orr.w	r3, r3, #32
 8003352:	6313      	str	r3, [r2, #48]	@ 0x30
 8003354:	4b0d      	ldr	r3, [pc, #52]	@ (800338c <SPI_MspInit+0x6c>)
 8003356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003358:	f003 0320 	and.w	r3, r3, #32
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8003360:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003364:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8003366:	2302      	movs	r3, #2
 8003368:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800336a:	2302      	movs	r3, #2
 800336c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800336e:	2301      	movs	r3, #1
 8003370:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8003372:	2305      	movs	r3, #5
 8003374:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8003376:	f107 0314 	add.w	r3, r7, #20
 800337a:	4619      	mov	r1, r3
 800337c:	4804      	ldr	r0, [pc, #16]	@ (8003390 <SPI_MspInit+0x70>)
 800337e:	f001 f8c3 	bl	8004508 <HAL_GPIO_Init>
}
 8003382:	bf00      	nop
 8003384:	3728      	adds	r7, #40	@ 0x28
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	40023800 	.word	0x40023800
 8003390:	40021400 	.word	0x40021400

08003394 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b088      	sub	sp, #32
 8003398:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 800339a:	4b36      	ldr	r3, [pc, #216]	@ (8003474 <LCD_IO_Init+0xe0>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d164      	bne.n	800346c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 80033a2:	4b34      	ldr	r3, [pc, #208]	@ (8003474 <LCD_IO_Init+0xe0>)
 80033a4:	2201      	movs	r2, #1
 80033a6:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80033a8:	2300      	movs	r3, #0
 80033aa:	60bb      	str	r3, [r7, #8]
 80033ac:	4b32      	ldr	r3, [pc, #200]	@ (8003478 <LCD_IO_Init+0xe4>)
 80033ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b0:	4a31      	ldr	r2, [pc, #196]	@ (8003478 <LCD_IO_Init+0xe4>)
 80033b2:	f043 0308 	orr.w	r3, r3, #8
 80033b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80033b8:	4b2f      	ldr	r3, [pc, #188]	@ (8003478 <LCD_IO_Init+0xe4>)
 80033ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033bc:	f003 0308 	and.w	r3, r3, #8
 80033c0:	60bb      	str	r3, [r7, #8]
 80033c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80033c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80033c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80033ca:	2301      	movs	r3, #1
 80033cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80033ce:	2300      	movs	r3, #0
 80033d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80033d2:	2302      	movs	r3, #2
 80033d4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80033d6:	f107 030c 	add.w	r3, r7, #12
 80033da:	4619      	mov	r1, r3
 80033dc:	4827      	ldr	r0, [pc, #156]	@ (800347c <LCD_IO_Init+0xe8>)
 80033de:	f001 f893 	bl	8004508 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 80033e2:	2300      	movs	r3, #0
 80033e4:	607b      	str	r3, [r7, #4]
 80033e6:	4b24      	ldr	r3, [pc, #144]	@ (8003478 <LCD_IO_Init+0xe4>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ea:	4a23      	ldr	r2, [pc, #140]	@ (8003478 <LCD_IO_Init+0xe4>)
 80033ec:	f043 0308 	orr.w	r3, r3, #8
 80033f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80033f2:	4b21      	ldr	r3, [pc, #132]	@ (8003478 <LCD_IO_Init+0xe4>)
 80033f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f6:	f003 0308 	and.w	r3, r3, #8
 80033fa:	607b      	str	r3, [r7, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80033fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003402:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003404:	2301      	movs	r3, #1
 8003406:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003408:	2300      	movs	r3, #0
 800340a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800340c:	2302      	movs	r3, #2
 800340e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8003410:	f107 030c 	add.w	r3, r7, #12
 8003414:	4619      	mov	r1, r3
 8003416:	4819      	ldr	r0, [pc, #100]	@ (800347c <LCD_IO_Init+0xe8>)
 8003418:	f001 f876 	bl	8004508 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 800341c:	2300      	movs	r3, #0
 800341e:	603b      	str	r3, [r7, #0]
 8003420:	4b15      	ldr	r3, [pc, #84]	@ (8003478 <LCD_IO_Init+0xe4>)
 8003422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003424:	4a14      	ldr	r2, [pc, #80]	@ (8003478 <LCD_IO_Init+0xe4>)
 8003426:	f043 0304 	orr.w	r3, r3, #4
 800342a:	6313      	str	r3, [r2, #48]	@ 0x30
 800342c:	4b12      	ldr	r3, [pc, #72]	@ (8003478 <LCD_IO_Init+0xe4>)
 800342e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	603b      	str	r3, [r7, #0]
 8003436:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8003438:	2304      	movs	r3, #4
 800343a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800343c:	2301      	movs	r3, #1
 800343e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003440:	2300      	movs	r3, #0
 8003442:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003444:	2302      	movs	r3, #2
 8003446:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8003448:	f107 030c 	add.w	r3, r7, #12
 800344c:	4619      	mov	r1, r3
 800344e:	480c      	ldr	r0, [pc, #48]	@ (8003480 <LCD_IO_Init+0xec>)
 8003450:	f001 f85a 	bl	8004508 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8003454:	2200      	movs	r2, #0
 8003456:	2104      	movs	r1, #4
 8003458:	4809      	ldr	r0, [pc, #36]	@ (8003480 <LCD_IO_Init+0xec>)
 800345a:	f001 fb0d 	bl	8004a78 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800345e:	2201      	movs	r2, #1
 8003460:	2104      	movs	r1, #4
 8003462:	4807      	ldr	r0, [pc, #28]	@ (8003480 <LCD_IO_Init+0xec>)
 8003464:	f001 fb08 	bl	8004a78 <HAL_GPIO_WritePin>

    SPI_Init();
 8003468:	f7ff fef6 	bl	8003258 <SPI_Init>
  }
}
 800346c:	bf00      	nop
 800346e:	3720      	adds	r7, #32
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	20025a68 	.word	0x20025a68
 8003478:	40023800 	.word	0x40023800
 800347c:	40020c00 	.word	0x40020c00
 8003480:	40020800 	.word	0x40020800

08003484 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800348e:	2201      	movs	r2, #1
 8003490:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003494:	480a      	ldr	r0, [pc, #40]	@ (80034c0 <LCD_IO_WriteData+0x3c>)
 8003496:	f001 faef 	bl	8004a78 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 800349a:	2200      	movs	r2, #0
 800349c:	2104      	movs	r1, #4
 800349e:	4809      	ldr	r0, [pc, #36]	@ (80034c4 <LCD_IO_WriteData+0x40>)
 80034a0:	f001 faea 	bl	8004a78 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 80034a4:	88fb      	ldrh	r3, [r7, #6]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff ff10 	bl	80032cc <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80034ac:	2201      	movs	r2, #1
 80034ae:	2104      	movs	r1, #4
 80034b0:	4804      	ldr	r0, [pc, #16]	@ (80034c4 <LCD_IO_WriteData+0x40>)
 80034b2:	f001 fae1 	bl	8004a78 <HAL_GPIO_WritePin>
}
 80034b6:	bf00      	nop
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	40020c00 	.word	0x40020c00
 80034c4:	40020800 	.word	0x40020800

080034c8 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	4603      	mov	r3, r0
 80034d0:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80034d2:	2200      	movs	r2, #0
 80034d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80034d8:	480a      	ldr	r0, [pc, #40]	@ (8003504 <LCD_IO_WriteReg+0x3c>)
 80034da:	f001 facd 	bl	8004a78 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80034de:	2200      	movs	r2, #0
 80034e0:	2104      	movs	r1, #4
 80034e2:	4809      	ldr	r0, [pc, #36]	@ (8003508 <LCD_IO_WriteReg+0x40>)
 80034e4:	f001 fac8 	bl	8004a78 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 80034e8:	79fb      	ldrb	r3, [r7, #7]
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff feed 	bl	80032cc <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80034f2:	2201      	movs	r2, #1
 80034f4:	2104      	movs	r1, #4
 80034f6:	4804      	ldr	r0, [pc, #16]	@ (8003508 <LCD_IO_WriteReg+0x40>)
 80034f8:	f001 fabe 	bl	8004a78 <HAL_GPIO_WritePin>
}
 80034fc:	bf00      	nop
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	40020c00 	.word	0x40020c00
 8003508:	40020800 	.word	0x40020800

0800350c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 fe4b 	bl	80041b0 <HAL_Delay>
}
 800351a:	bf00      	nop
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
	...

08003524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800352a:	f000 fdcf 	bl	80040cc <HAL_Init>


  // The default system configuration function is "suspect" so we need to make our own clock configuration
  // Note - You, the developer, MAY have to play with some of this coniguration as you progress in your project
  SystemClockOverride();
 800352e:	f000 f863 	bl	80035f8 <SystemClockOverride>

  ApplicationInit(); // Initializes the LCD functionality
 8003532:	f7fc ffd3 	bl	80004dc <ApplicationInit>




  HAL_Delay(1000);
 8003536:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800353a:	f000 fe39 	bl	80041b0 <HAL_Delay>

  // DO NOT CALL THIS FUNCTION WHEN INTERRUPT MODE IS SELECTED IN THE COMPILE SWITCH IN stmpe811.h
  // Un-comment the below function after setting COMPILE_TOUCH to 1 in stmpe811.h
  //LCD_Touch_Polling_Demo(); // This function Will not return

  uint32_t events_to_run = 0;
 800353e:	2300      	movs	r3, #0
 8003540:	603b      	str	r3, [r7, #0]
  uint32_t time_elaspsed = 0;
 8003542:	2300      	movs	r3, #0
 8003544:	607b      	str	r3, [r7, #4]
  addSchedulerEvent(StartScreen);
 8003546:	2008      	movs	r0, #8
 8003548:	f7ff fca8 	bl	8002e9c <addSchedulerEvent>
  timerInit();
 800354c:	f7ff fccc 	bl	8002ee8 <timerInit>
  while (1)
  {
	  events_to_run = getScheduledEvents();
 8003550:	f7ff fc98 	bl	8002e84 <getScheduledEvents>
 8003554:	6038      	str	r0, [r7, #0]
	  switch(events_to_run){
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	3b01      	subs	r3, #1
 800355a:	2b0f      	cmp	r3, #15
 800355c:	d84a      	bhi.n	80035f4 <main+0xd0>
 800355e:	a201      	add	r2, pc, #4	@ (adr r2, 8003564 <main+0x40>)
 8003560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003564:	080035bd 	.word	0x080035bd
 8003568:	080035d5 	.word	0x080035d5
 800356c:	080035f5 	.word	0x080035f5
 8003570:	080035b1 	.word	0x080035b1
 8003574:	080035f5 	.word	0x080035f5
 8003578:	080035f5 	.word	0x080035f5
 800357c:	080035f5 	.word	0x080035f5
 8003580:	080035a5 	.word	0x080035a5
 8003584:	080035f5 	.word	0x080035f5
 8003588:	080035f5 	.word	0x080035f5
 800358c:	080035f5 	.word	0x080035f5
 8003590:	080035f5 	.word	0x080035f5
 8003594:	080035f5 	.word	0x080035f5
 8003598:	080035f5 	.word	0x080035f5
 800359c:	080035f5 	.word	0x080035f5
 80035a0:	080035e1 	.word	0x080035e1
	  	  case StartScreen:
	  		startScreen();
 80035a4:	f7fc ffb4 	bl	8000510 <startScreen>
	  		removeSchedulerEvent(StartScreen);
 80035a8:	2008      	movs	r0, #8
 80035aa:	f7ff fc89 	bl	8002ec0 <removeSchedulerEvent>
	  		break;
 80035ae:	e022      	b.n	80035f6 <main+0xd2>
	  	  case EndScreen:
	  		endScreen();
 80035b0:	f7fc ffb4 	bl	800051c <endScreen>
	  		removeSchedulerEvent(EndScreen);
 80035b4:	2004      	movs	r0, #4
 80035b6:	f7ff fc83 	bl	8002ec0 <removeSchedulerEvent>
	  		break;
 80035ba:	e01c      	b.n	80035f6 <main+0xd2>
	  	  case BlockDown:
	  		//currBlock_Down();
	  		PrintTime(time_elaspsed);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f7fc ffb9 	bl	8000534 <PrintTime>
	  		time_elaspsed = time_elaspsed + 1;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	3301      	adds	r3, #1
 80035c6:	607b      	str	r3, [r7, #4]
	  		PrintDown();
 80035c8:	f7fc ffbf 	bl	800054a <PrintDown>
	  		removeSchedulerEvent(BlockDown);
 80035cc:	2001      	movs	r0, #1
 80035ce:	f7ff fc77 	bl	8002ec0 <removeSchedulerEvent>
	  		  break;
 80035d2:	e010      	b.n	80035f6 <main+0xd2>
	  	  case BlockRotate:
	  		currBlock_Rotate();
 80035d4:	f7fd fa50 	bl	8000a78 <currBlock_Rotate>
	  		removeSchedulerEvent(BlockRotate);
 80035d8:	2002      	movs	r0, #2
 80035da:	f7ff fc71 	bl	8002ec0 <removeSchedulerEvent>
	  		  break;
 80035de:	e00a      	b.n	80035f6 <main+0xd2>
	  	  case GameScreen:
	  		game_screen();
 80035e0:	f7ff fab2 	bl	8002b48 <game_screen>
	  		StartTime();
 80035e4:	f7fc ffa0 	bl	8000528 <StartTime>
	  		newCurrBlock();
 80035e8:	f7fd f864 	bl	80006b4 <newCurrBlock>
	  		removeSchedulerEvent(GameScreen);
 80035ec:	2010      	movs	r0, #16
 80035ee:	f7ff fc67 	bl	8002ec0 <removeSchedulerEvent>
	  		  break;
 80035f2:	e000      	b.n	80035f6 <main+0xd2>
	  	  default:
	  		  break;
 80035f4:	bf00      	nop
	  events_to_run = getScheduledEvents();
 80035f6:	e7ab      	b.n	8003550 <main+0x2c>

080035f8 <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b092      	sub	sp, #72	@ 0x48
 80035fc:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 80035fe:	2300      	movs	r3, #0
 8003600:	603b      	str	r3, [r7, #0]
 8003602:	4b1c      	ldr	r3, [pc, #112]	@ (8003674 <SystemClockOverride+0x7c>)
 8003604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003606:	4a1b      	ldr	r2, [pc, #108]	@ (8003674 <SystemClockOverride+0x7c>)
 8003608:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800360c:	6413      	str	r3, [r2, #64]	@ 0x40
 800360e:	4b19      	ldr	r3, [pc, #100]	@ (8003674 <SystemClockOverride+0x7c>)
 8003610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003616:	603b      	str	r3, [r7, #0]
 8003618:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800361a:	2301      	movs	r3, #1
 800361c:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800361e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003622:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003624:	2302      	movs	r3, #2
 8003626:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003628:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800362c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 800362e:	2308      	movs	r3, #8
 8003630:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003632:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8003636:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003638:	2302      	movs	r3, #2
 800363a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800363c:	2307      	movs	r3, #7
 800363e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8003640:	1d3b      	adds	r3, r7, #4
 8003642:	4618      	mov	r0, r3
 8003644:	f002 fcfc 	bl	8006040 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8003648:	230f      	movs	r3, #15
 800364a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800364c:	2302      	movs	r3, #2
 800364e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003650:	2300      	movs	r3, #0
 8003652:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003654:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003658:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800365a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800365e:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8003660:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003664:	2105      	movs	r1, #5
 8003666:	4618      	mov	r0, r3
 8003668:	f002 ff62 	bl	8006530 <HAL_RCC_ClockConfig>
}
 800366c:	bf00      	nop
 800366e:	3748      	adds	r7, #72	@ 0x48
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40023800 	.word	0x40023800

08003678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800367c:	b672      	cpsid	i
}
 800367e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003680:	bf00      	nop
 8003682:	e7fd      	b.n	8003680 <Error_Handler+0x8>

08003684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800368a:	2300      	movs	r3, #0
 800368c:	607b      	str	r3, [r7, #4]
 800368e:	4b10      	ldr	r3, [pc, #64]	@ (80036d0 <HAL_MspInit+0x4c>)
 8003690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003692:	4a0f      	ldr	r2, [pc, #60]	@ (80036d0 <HAL_MspInit+0x4c>)
 8003694:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003698:	6453      	str	r3, [r2, #68]	@ 0x44
 800369a:	4b0d      	ldr	r3, [pc, #52]	@ (80036d0 <HAL_MspInit+0x4c>)
 800369c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800369e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036a2:	607b      	str	r3, [r7, #4]
 80036a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036a6:	2300      	movs	r3, #0
 80036a8:	603b      	str	r3, [r7, #0]
 80036aa:	4b09      	ldr	r3, [pc, #36]	@ (80036d0 <HAL_MspInit+0x4c>)
 80036ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ae:	4a08      	ldr	r2, [pc, #32]	@ (80036d0 <HAL_MspInit+0x4c>)
 80036b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80036b6:	4b06      	ldr	r3, [pc, #24]	@ (80036d0 <HAL_MspInit+0x4c>)
 80036b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036be:	603b      	str	r3, [r7, #0]
 80036c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80036c2:	2007      	movs	r0, #7
 80036c4:	f000 feaa 	bl	800441c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036c8:	bf00      	nop
 80036ca:	3708      	adds	r7, #8
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	40023800 	.word	0x40023800

080036d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b08a      	sub	sp, #40	@ 0x28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036dc:	f107 0314 	add.w	r3, r7, #20
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	605a      	str	r2, [r3, #4]
 80036e6:	609a      	str	r2, [r3, #8]
 80036e8:	60da      	str	r2, [r3, #12]
 80036ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a29      	ldr	r2, [pc, #164]	@ (8003798 <HAL_I2C_MspInit+0xc4>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d14b      	bne.n	800378e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036f6:	2300      	movs	r3, #0
 80036f8:	613b      	str	r3, [r7, #16]
 80036fa:	4b28      	ldr	r3, [pc, #160]	@ (800379c <HAL_I2C_MspInit+0xc8>)
 80036fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036fe:	4a27      	ldr	r2, [pc, #156]	@ (800379c <HAL_I2C_MspInit+0xc8>)
 8003700:	f043 0304 	orr.w	r3, r3, #4
 8003704:	6313      	str	r3, [r2, #48]	@ 0x30
 8003706:	4b25      	ldr	r3, [pc, #148]	@ (800379c <HAL_I2C_MspInit+0xc8>)
 8003708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370a:	f003 0304 	and.w	r3, r3, #4
 800370e:	613b      	str	r3, [r7, #16]
 8003710:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003712:	2300      	movs	r3, #0
 8003714:	60fb      	str	r3, [r7, #12]
 8003716:	4b21      	ldr	r3, [pc, #132]	@ (800379c <HAL_I2C_MspInit+0xc8>)
 8003718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800371a:	4a20      	ldr	r2, [pc, #128]	@ (800379c <HAL_I2C_MspInit+0xc8>)
 800371c:	f043 0301 	orr.w	r3, r3, #1
 8003720:	6313      	str	r3, [r2, #48]	@ 0x30
 8003722:	4b1e      	ldr	r3, [pc, #120]	@ (800379c <HAL_I2C_MspInit+0xc8>)
 8003724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800372e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003734:	2312      	movs	r3, #18
 8003736:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003738:	2300      	movs	r3, #0
 800373a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800373c:	2300      	movs	r3, #0
 800373e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003740:	2304      	movs	r3, #4
 8003742:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8003744:	f107 0314 	add.w	r3, r7, #20
 8003748:	4619      	mov	r1, r3
 800374a:	4815      	ldr	r0, [pc, #84]	@ (80037a0 <HAL_I2C_MspInit+0xcc>)
 800374c:	f000 fedc 	bl	8004508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8003750:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003756:	2312      	movs	r3, #18
 8003758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800375a:	2300      	movs	r3, #0
 800375c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800375e:	2300      	movs	r3, #0
 8003760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003762:	2304      	movs	r3, #4
 8003764:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8003766:	f107 0314 	add.w	r3, r7, #20
 800376a:	4619      	mov	r1, r3
 800376c:	480d      	ldr	r0, [pc, #52]	@ (80037a4 <HAL_I2C_MspInit+0xd0>)
 800376e:	f000 fecb 	bl	8004508 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003772:	2300      	movs	r3, #0
 8003774:	60bb      	str	r3, [r7, #8]
 8003776:	4b09      	ldr	r3, [pc, #36]	@ (800379c <HAL_I2C_MspInit+0xc8>)
 8003778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377a:	4a08      	ldr	r2, [pc, #32]	@ (800379c <HAL_I2C_MspInit+0xc8>)
 800377c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003780:	6413      	str	r3, [r2, #64]	@ 0x40
 8003782:	4b06      	ldr	r3, [pc, #24]	@ (800379c <HAL_I2C_MspInit+0xc8>)
 8003784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003786:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800378a:	60bb      	str	r3, [r7, #8]
 800378c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 800378e:	bf00      	nop
 8003790:	3728      	adds	r7, #40	@ 0x28
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	40005c00 	.word	0x40005c00
 800379c:	40023800 	.word	0x40023800
 80037a0:	40020800 	.word	0x40020800
 80037a4:	40020000 	.word	0x40020000

080037a8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b09a      	sub	sp, #104	@ 0x68
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037b0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80037b4:	2200      	movs	r2, #0
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	605a      	str	r2, [r3, #4]
 80037ba:	609a      	str	r2, [r3, #8]
 80037bc:	60da      	str	r2, [r3, #12]
 80037be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80037c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037c4:	2230      	movs	r2, #48	@ 0x30
 80037c6:	2100      	movs	r1, #0
 80037c8:	4618      	mov	r0, r3
 80037ca:	f003 ff49 	bl	8007660 <memset>
  if(hltdc->Instance==LTDC)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a81      	ldr	r2, [pc, #516]	@ (80039d8 <HAL_LTDC_MspInit+0x230>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	f040 80fa 	bne.w	80039ce <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80037da:	2308      	movs	r3, #8
 80037dc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80037de:	2332      	movs	r3, #50	@ 0x32
 80037e0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80037e2:	2302      	movs	r3, #2
 80037e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80037e6:	2300      	movs	r3, #0
 80037e8:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037ee:	4618      	mov	r0, r3
 80037f0:	f003 f8aa 	bl	8006948 <HAL_RCCEx_PeriphCLKConfig>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80037fa:	f7ff ff3d 	bl	8003678 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80037fe:	2300      	movs	r3, #0
 8003800:	623b      	str	r3, [r7, #32]
 8003802:	4b76      	ldr	r3, [pc, #472]	@ (80039dc <HAL_LTDC_MspInit+0x234>)
 8003804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003806:	4a75      	ldr	r2, [pc, #468]	@ (80039dc <HAL_LTDC_MspInit+0x234>)
 8003808:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800380c:	6453      	str	r3, [r2, #68]	@ 0x44
 800380e:	4b73      	ldr	r3, [pc, #460]	@ (80039dc <HAL_LTDC_MspInit+0x234>)
 8003810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003812:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003816:	623b      	str	r3, [r7, #32]
 8003818:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800381a:	2300      	movs	r3, #0
 800381c:	61fb      	str	r3, [r7, #28]
 800381e:	4b6f      	ldr	r3, [pc, #444]	@ (80039dc <HAL_LTDC_MspInit+0x234>)
 8003820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003822:	4a6e      	ldr	r2, [pc, #440]	@ (80039dc <HAL_LTDC_MspInit+0x234>)
 8003824:	f043 0320 	orr.w	r3, r3, #32
 8003828:	6313      	str	r3, [r2, #48]	@ 0x30
 800382a:	4b6c      	ldr	r3, [pc, #432]	@ (80039dc <HAL_LTDC_MspInit+0x234>)
 800382c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800382e:	f003 0320 	and.w	r3, r3, #32
 8003832:	61fb      	str	r3, [r7, #28]
 8003834:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003836:	2300      	movs	r3, #0
 8003838:	61bb      	str	r3, [r7, #24]
 800383a:	4b68      	ldr	r3, [pc, #416]	@ (80039dc <HAL_LTDC_MspInit+0x234>)
 800383c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383e:	4a67      	ldr	r2, [pc, #412]	@ (80039dc <HAL_LTDC_MspInit+0x234>)
 8003840:	f043 0301 	orr.w	r3, r3, #1
 8003844:	6313      	str	r3, [r2, #48]	@ 0x30
 8003846:	4b65      	ldr	r3, [pc, #404]	@ (80039dc <HAL_LTDC_MspInit+0x234>)
 8003848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	61bb      	str	r3, [r7, #24]
 8003850:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003852:	2300      	movs	r3, #0
 8003854:	617b      	str	r3, [r7, #20]
 8003856:	4b61      	ldr	r3, [pc, #388]	@ (80039dc <HAL_LTDC_MspInit+0x234>)
 8003858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800385a:	4a60      	ldr	r2, [pc, #384]	@ (80039dc <HAL_LTDC_MspInit+0x234>)
 800385c:	f043 0302 	orr.w	r3, r3, #2
 8003860:	6313      	str	r3, [r2, #48]	@ 0x30
 8003862:	4b5e      	ldr	r3, [pc, #376]	@ (80039dc <HAL_LTDC_MspInit+0x234>)
 8003864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	617b      	str	r3, [r7, #20]
 800386c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800386e:	2300      	movs	r3, #0
 8003870:	613b      	str	r3, [r7, #16]
 8003872:	4b5a      	ldr	r3, [pc, #360]	@ (80039dc <HAL_LTDC_MspInit+0x234>)
 8003874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003876:	4a59      	ldr	r2, [pc, #356]	@ (80039dc <HAL_LTDC_MspInit+0x234>)
 8003878:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800387c:	6313      	str	r3, [r2, #48]	@ 0x30
 800387e:	4b57      	ldr	r3, [pc, #348]	@ (80039dc <HAL_LTDC_MspInit+0x234>)
 8003880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003886:	613b      	str	r3, [r7, #16]
 8003888:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800388a:	2300      	movs	r3, #0
 800388c:	60fb      	str	r3, [r7, #12]
 800388e:	4b53      	ldr	r3, [pc, #332]	@ (80039dc <HAL_LTDC_MspInit+0x234>)
 8003890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003892:	4a52      	ldr	r2, [pc, #328]	@ (80039dc <HAL_LTDC_MspInit+0x234>)
 8003894:	f043 0304 	orr.w	r3, r3, #4
 8003898:	6313      	str	r3, [r2, #48]	@ 0x30
 800389a:	4b50      	ldr	r3, [pc, #320]	@ (80039dc <HAL_LTDC_MspInit+0x234>)
 800389c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389e:	f003 0304 	and.w	r3, r3, #4
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80038a6:	2300      	movs	r3, #0
 80038a8:	60bb      	str	r3, [r7, #8]
 80038aa:	4b4c      	ldr	r3, [pc, #304]	@ (80039dc <HAL_LTDC_MspInit+0x234>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ae:	4a4b      	ldr	r2, [pc, #300]	@ (80039dc <HAL_LTDC_MspInit+0x234>)
 80038b0:	f043 0308 	orr.w	r3, r3, #8
 80038b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80038b6:	4b49      	ldr	r3, [pc, #292]	@ (80039dc <HAL_LTDC_MspInit+0x234>)
 80038b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ba:	f003 0308 	and.w	r3, r3, #8
 80038be:	60bb      	str	r3, [r7, #8]
 80038c0:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80038c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80038c6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c8:	2302      	movs	r3, #2
 80038ca:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038cc:	2300      	movs	r3, #0
 80038ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038d0:	2300      	movs	r3, #0
 80038d2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80038d4:	230e      	movs	r3, #14
 80038d6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80038d8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80038dc:	4619      	mov	r1, r3
 80038de:	4840      	ldr	r0, [pc, #256]	@ (80039e0 <HAL_LTDC_MspInit+0x238>)
 80038e0:	f000 fe12 	bl	8004508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80038e4:	f641 0358 	movw	r3, #6232	@ 0x1858
 80038e8:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ea:	2302      	movs	r3, #2
 80038ec:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ee:	2300      	movs	r3, #0
 80038f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038f2:	2300      	movs	r3, #0
 80038f4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80038f6:	230e      	movs	r3, #14
 80038f8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038fa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80038fe:	4619      	mov	r1, r3
 8003900:	4838      	ldr	r0, [pc, #224]	@ (80039e4 <HAL_LTDC_MspInit+0x23c>)
 8003902:	f000 fe01 	bl	8004508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8003906:	2303      	movs	r3, #3
 8003908:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800390a:	2302      	movs	r3, #2
 800390c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390e:	2300      	movs	r3, #0
 8003910:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003912:	2300      	movs	r3, #0
 8003914:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003916:	2309      	movs	r3, #9
 8003918:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800391a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800391e:	4619      	mov	r1, r3
 8003920:	4831      	ldr	r0, [pc, #196]	@ (80039e8 <HAL_LTDC_MspInit+0x240>)
 8003922:	f000 fdf1 	bl	8004508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8003926:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800392a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800392c:	2302      	movs	r3, #2
 800392e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003930:	2300      	movs	r3, #0
 8003932:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003934:	2300      	movs	r3, #0
 8003936:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003938:	230e      	movs	r3, #14
 800393a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800393c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003940:	4619      	mov	r1, r3
 8003942:	4829      	ldr	r0, [pc, #164]	@ (80039e8 <HAL_LTDC_MspInit+0x240>)
 8003944:	f000 fde0 	bl	8004508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8003948:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800394c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800394e:	2302      	movs	r3, #2
 8003950:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003952:	2300      	movs	r3, #0
 8003954:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003956:	2300      	movs	r3, #0
 8003958:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800395a:	230e      	movs	r3, #14
 800395c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800395e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003962:	4619      	mov	r1, r3
 8003964:	4821      	ldr	r0, [pc, #132]	@ (80039ec <HAL_LTDC_MspInit+0x244>)
 8003966:	f000 fdcf 	bl	8004508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800396a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800396e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003970:	2302      	movs	r3, #2
 8003972:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003974:	2300      	movs	r3, #0
 8003976:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003978:	2300      	movs	r3, #0
 800397a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800397c:	230e      	movs	r3, #14
 800397e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003980:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003984:	4619      	mov	r1, r3
 8003986:	481a      	ldr	r0, [pc, #104]	@ (80039f0 <HAL_LTDC_MspInit+0x248>)
 8003988:	f000 fdbe 	bl	8004508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800398c:	2348      	movs	r3, #72	@ 0x48
 800398e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003990:	2302      	movs	r3, #2
 8003992:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003994:	2300      	movs	r3, #0
 8003996:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003998:	2300      	movs	r3, #0
 800399a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800399c:	230e      	movs	r3, #14
 800399e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039a0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80039a4:	4619      	mov	r1, r3
 80039a6:	4813      	ldr	r0, [pc, #76]	@ (80039f4 <HAL_LTDC_MspInit+0x24c>)
 80039a8:	f000 fdae 	bl	8004508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80039ac:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80039b0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b2:	2302      	movs	r3, #2
 80039b4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b6:	2300      	movs	r3, #0
 80039b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039ba:	2300      	movs	r3, #0
 80039bc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80039be:	2309      	movs	r3, #9
 80039c0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80039c2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80039c6:	4619      	mov	r1, r3
 80039c8:	4808      	ldr	r0, [pc, #32]	@ (80039ec <HAL_LTDC_MspInit+0x244>)
 80039ca:	f000 fd9d 	bl	8004508 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80039ce:	bf00      	nop
 80039d0:	3768      	adds	r7, #104	@ 0x68
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	40016800 	.word	0x40016800
 80039dc:	40023800 	.word	0x40023800
 80039e0:	40021400 	.word	0x40021400
 80039e4:	40020000 	.word	0x40020000
 80039e8:	40020400 	.word	0x40020400
 80039ec:	40021800 	.word	0x40021800
 80039f0:	40020800 	.word	0x40020800
 80039f4:	40020c00 	.word	0x40020c00

080039f8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a0b      	ldr	r2, [pc, #44]	@ (8003a34 <HAL_RNG_MspInit+0x3c>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d10d      	bne.n	8003a26 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	60fb      	str	r3, [r7, #12]
 8003a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8003a38 <HAL_RNG_MspInit+0x40>)
 8003a10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a12:	4a09      	ldr	r2, [pc, #36]	@ (8003a38 <HAL_RNG_MspInit+0x40>)
 8003a14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a18:	6353      	str	r3, [r2, #52]	@ 0x34
 8003a1a:	4b07      	ldr	r3, [pc, #28]	@ (8003a38 <HAL_RNG_MspInit+0x40>)
 8003a1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8003a26:	bf00      	nop
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	50060800 	.word	0x50060800
 8003a38:	40023800 	.word	0x40023800

08003a3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b08a      	sub	sp, #40	@ 0x28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a44:	f107 0314 	add.w	r3, r7, #20
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	605a      	str	r2, [r3, #4]
 8003a4e:	609a      	str	r2, [r3, #8]
 8003a50:	60da      	str	r2, [r3, #12]
 8003a52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a19      	ldr	r2, [pc, #100]	@ (8003ac0 <HAL_SPI_MspInit+0x84>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d12c      	bne.n	8003ab8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003a5e:	2300      	movs	r3, #0
 8003a60:	613b      	str	r3, [r7, #16]
 8003a62:	4b18      	ldr	r3, [pc, #96]	@ (8003ac4 <HAL_SPI_MspInit+0x88>)
 8003a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a66:	4a17      	ldr	r2, [pc, #92]	@ (8003ac4 <HAL_SPI_MspInit+0x88>)
 8003a68:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a6e:	4b15      	ldr	r3, [pc, #84]	@ (8003ac4 <HAL_SPI_MspInit+0x88>)
 8003a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a76:	613b      	str	r3, [r7, #16]
 8003a78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60fb      	str	r3, [r7, #12]
 8003a7e:	4b11      	ldr	r3, [pc, #68]	@ (8003ac4 <HAL_SPI_MspInit+0x88>)
 8003a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a82:	4a10      	ldr	r2, [pc, #64]	@ (8003ac4 <HAL_SPI_MspInit+0x88>)
 8003a84:	f043 0320 	orr.w	r3, r3, #32
 8003a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8003ac4 <HAL_SPI_MspInit+0x88>)
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a8e:	f003 0320 	and.w	r3, r3, #32
 8003a92:	60fb      	str	r3, [r7, #12]
 8003a94:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8003a96:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003aa8:	2305      	movs	r3, #5
 8003aaa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003aac:	f107 0314 	add.w	r3, r7, #20
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	4805      	ldr	r0, [pc, #20]	@ (8003ac8 <HAL_SPI_MspInit+0x8c>)
 8003ab4:	f000 fd28 	bl	8004508 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8003ab8:	bf00      	nop
 8003aba:	3728      	adds	r7, #40	@ 0x28
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	40015000 	.word	0x40015000
 8003ac4:	40023800 	.word	0x40023800
 8003ac8:	40021400 	.word	0x40021400

08003acc <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a08      	ldr	r2, [pc, #32]	@ (8003afc <HAL_SPI_MspDeInit+0x30>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d10a      	bne.n	8003af4 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8003ade:	4b08      	ldr	r3, [pc, #32]	@ (8003b00 <HAL_SPI_MspDeInit+0x34>)
 8003ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ae2:	4a07      	ldr	r2, [pc, #28]	@ (8003b00 <HAL_SPI_MspDeInit+0x34>)
 8003ae4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003ae8:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8003aea:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8003aee:	4805      	ldr	r0, [pc, #20]	@ (8003b04 <HAL_SPI_MspDeInit+0x38>)
 8003af0:	f000 feb6 	bl	8004860 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8003af4:	bf00      	nop
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	40015000 	.word	0x40015000
 8003b00:	40023800 	.word	0x40023800
 8003b04:	40021400 	.word	0x40021400

08003b08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b18:	d10d      	bne.n	8003b36 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	60fb      	str	r3, [r7, #12]
 8003b1e:	4b09      	ldr	r3, [pc, #36]	@ (8003b44 <HAL_TIM_Base_MspInit+0x3c>)
 8003b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b22:	4a08      	ldr	r2, [pc, #32]	@ (8003b44 <HAL_TIM_Base_MspInit+0x3c>)
 8003b24:	f043 0301 	orr.w	r3, r3, #1
 8003b28:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b2a:	4b06      	ldr	r3, [pc, #24]	@ (8003b44 <HAL_TIM_Base_MspInit+0x3c>)
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	60fb      	str	r3, [r7, #12]
 8003b34:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8003b36:	bf00      	nop
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	40023800 	.word	0x40023800

08003b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003b4c:	bf00      	nop
 8003b4e:	e7fd      	b.n	8003b4c <NMI_Handler+0x4>

08003b50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b54:	bf00      	nop
 8003b56:	e7fd      	b.n	8003b54 <HardFault_Handler+0x4>

08003b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b5c:	bf00      	nop
 8003b5e:	e7fd      	b.n	8003b5c <MemManage_Handler+0x4>

08003b60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b64:	bf00      	nop
 8003b66:	e7fd      	b.n	8003b64 <BusFault_Handler+0x4>

08003b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b6c:	bf00      	nop
 8003b6e:	e7fd      	b.n	8003b6c <UsageFault_Handler+0x4>

08003b70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b70:	b480      	push	{r7}
 8003b72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b74:	bf00      	nop
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b82:	bf00      	nop
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b90:	bf00      	nop
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b9e:	f000 fae7 	bl	8004170 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ba2:	bf00      	nop
 8003ba4:	bd80      	pop	{r7, pc}
	...

08003ba8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	4603      	mov	r3, r0
 8003bb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	db0b      	blt.n	8003bd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bba:	79fb      	ldrb	r3, [r7, #7]
 8003bbc:	f003 021f 	and.w	r2, r3, #31
 8003bc0:	4907      	ldr	r1, [pc, #28]	@ (8003be0 <__NVIC_EnableIRQ+0x38>)
 8003bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc6:	095b      	lsrs	r3, r3, #5
 8003bc8:	2001      	movs	r0, #1
 8003bca:	fa00 f202 	lsl.w	r2, r0, r2
 8003bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003bd2:	bf00      	nop
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	e000e100 	.word	0xe000e100

08003be4 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8003bea:	f000 f965 	bl	8003eb8 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8003bee:	f000 f925 	bl	8003e3c <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	2103      	movs	r1, #3
 8003bf6:	2082      	movs	r0, #130	@ 0x82
 8003bf8:	f000 f9b2 	bl	8003f60 <I2C3_Write>
    HAL_Delay(5);
 8003bfc:	2005      	movs	r0, #5
 8003bfe:	f000 fad7 	bl	80041b0 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8003c02:	2200      	movs	r2, #0
 8003c04:	2103      	movs	r1, #3
 8003c06:	2082      	movs	r0, #130	@ 0x82
 8003c08:	f000 f9aa 	bl	8003f60 <I2C3_Write>
    HAL_Delay(2);
 8003c0c:	2002      	movs	r0, #2
 8003c0e:	f000 facf 	bl	80041b0 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8003c12:	1cba      	adds	r2, r7, #2
 8003c14:	2302      	movs	r3, #2
 8003c16:	2100      	movs	r1, #0
 8003c18:	2082      	movs	r0, #130	@ 0x82
 8003c1a:	f000 f9f1 	bl	8004000 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8003c1e:	887b      	ldrh	r3, [r7, #2]
 8003c20:	021b      	lsls	r3, r3, #8
 8003c22:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8003c24:	887b      	ldrh	r3, [r7, #2]
 8003c26:	0a1b      	lsrs	r3, r3, #8
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	88fb      	ldrh	r3, [r7, #6]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8003c30:	88fb      	ldrh	r3, [r7, #6]
 8003c32:	f640 0211 	movw	r2, #2065	@ 0x811
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d001      	beq.n	8003c3e <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e095      	b.n	8003d6a <STMPE811_Init+0x186>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8003c3e:	2202      	movs	r2, #2
 8003c40:	2103      	movs	r1, #3
 8003c42:	2082      	movs	r0, #130	@ 0x82
 8003c44:	f000 f98c 	bl	8003f60 <I2C3_Write>
    HAL_Delay(5);
 8003c48:	2005      	movs	r0, #5
 8003c4a:	f000 fab1 	bl	80041b0 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8003c4e:	2200      	movs	r2, #0
 8003c50:	2103      	movs	r1, #3
 8003c52:	2082      	movs	r0, #130	@ 0x82
 8003c54:	f000 f984 	bl	8003f60 <I2C3_Write>
    HAL_Delay(2);
 8003c58:	2002      	movs	r0, #2
 8003c5a:	f000 faa9 	bl	80041b0 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8003c5e:	2004      	movs	r0, #4
 8003c60:	f000 f887 	bl	8003d72 <STMPE811_Read>
 8003c64:	4603      	mov	r3, r0
 8003c66:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8003c68:	797b      	ldrb	r3, [r7, #5]
 8003c6a:	f023 0301 	bic.w	r3, r3, #1
 8003c6e:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8003c70:	797b      	ldrb	r3, [r7, #5]
 8003c72:	461a      	mov	r2, r3
 8003c74:	2104      	movs	r1, #4
 8003c76:	2082      	movs	r0, #130	@ 0x82
 8003c78:	f000 f972 	bl	8003f60 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8003c7c:	2004      	movs	r0, #4
 8003c7e:	f000 f878 	bl	8003d72 <STMPE811_Read>
 8003c82:	4603      	mov	r3, r0
 8003c84:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8003c86:	797b      	ldrb	r3, [r7, #5]
 8003c88:	f023 0302 	bic.w	r3, r3, #2
 8003c8c:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8003c8e:	797b      	ldrb	r3, [r7, #5]
 8003c90:	461a      	mov	r2, r3
 8003c92:	2104      	movs	r1, #4
 8003c94:	2082      	movs	r0, #130	@ 0x82
 8003c96:	f000 f963 	bl	8003f60 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8003c9a:	2249      	movs	r2, #73	@ 0x49
 8003c9c:	2120      	movs	r1, #32
 8003c9e:	2082      	movs	r0, #130	@ 0x82
 8003ca0:	f000 f95e 	bl	8003f60 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8003ca4:	2002      	movs	r0, #2
 8003ca6:	f000 fa83 	bl	80041b0 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8003caa:	2201      	movs	r2, #1
 8003cac:	2121      	movs	r1, #33	@ 0x21
 8003cae:	2082      	movs	r0, #130	@ 0x82
 8003cb0:	f000 f956 	bl	8003f60 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8003cb4:	2017      	movs	r0, #23
 8003cb6:	f000 f85c 	bl	8003d72 <STMPE811_Read>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8003cbe:	797b      	ldrb	r3, [r7, #5]
 8003cc0:	f043 031e 	orr.w	r3, r3, #30
 8003cc4:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8003cc6:	797b      	ldrb	r3, [r7, #5]
 8003cc8:	461a      	mov	r2, r3
 8003cca:	2117      	movs	r1, #23
 8003ccc:	2082      	movs	r0, #130	@ 0x82
 8003cce:	f000 f947 	bl	8003f60 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8003cd2:	229a      	movs	r2, #154	@ 0x9a
 8003cd4:	2141      	movs	r1, #65	@ 0x41
 8003cd6:	2082      	movs	r0, #130	@ 0x82
 8003cd8:	f000 f942 	bl	8003f60 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8003cdc:	2201      	movs	r2, #1
 8003cde:	214a      	movs	r1, #74	@ 0x4a
 8003ce0:	2082      	movs	r0, #130	@ 0x82
 8003ce2:	f000 f93d 	bl	8003f60 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	214b      	movs	r1, #75	@ 0x4b
 8003cea:	2082      	movs	r0, #130	@ 0x82
 8003cec:	f000 f938 	bl	8003f60 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	214b      	movs	r1, #75	@ 0x4b
 8003cf4:	2082      	movs	r0, #130	@ 0x82
 8003cf6:	f000 f933 	bl	8003f60 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	2156      	movs	r1, #86	@ 0x56
 8003cfe:	2082      	movs	r0, #130	@ 0x82
 8003d00:	f000 f92e 	bl	8003f60 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8003d04:	2201      	movs	r2, #1
 8003d06:	2158      	movs	r1, #88	@ 0x58
 8003d08:	2082      	movs	r0, #130	@ 0x82
 8003d0a:	f000 f929 	bl	8003f60 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8003d0e:	2203      	movs	r2, #3
 8003d10:	2140      	movs	r1, #64	@ 0x40
 8003d12:	2082      	movs	r0, #130	@ 0x82
 8003d14:	f000 f924 	bl	8003f60 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8003d18:	22ff      	movs	r2, #255	@ 0xff
 8003d1a:	210b      	movs	r1, #11
 8003d1c:	2082      	movs	r0, #130	@ 0x82
 8003d1e:	f000 f91f 	bl	8003f60 <I2C3_Write>

    /* Enable global interrupts */
    #if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

    enableInterruptSupportForTouch();
 8003d22:	f000 f849 	bl	8003db8 <enableInterruptSupportForTouch>

    mode = STMPE811_Read(STMPE811_INT_CTRL);
 8003d26:	2009      	movs	r0, #9
 8003d28:	f000 f823 	bl	8003d72 <STMPE811_Read>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8003d30:	797b      	ldrb	r3, [r7, #5]
 8003d32:	f043 0301 	orr.w	r3, r3, #1
 8003d36:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_CTRL, mode);
 8003d38:	797b      	ldrb	r3, [r7, #5]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	2109      	movs	r1, #9
 8003d3e:	2082      	movs	r0, #130	@ 0x82
 8003d40:	f000 f90e 	bl	8003f60 <I2C3_Write>
    
    /* Enable touch interrupt */
    mode = STMPE811_Read(STMPE811_INT_EN);
 8003d44:	200a      	movs	r0, #10
 8003d46:	f000 f814 	bl	8003d72 <STMPE811_Read>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8003d4e:	797b      	ldrb	r3, [r7, #5]
 8003d50:	f043 0301 	orr.w	r3, r3, #1
 8003d54:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
 8003d56:	797b      	ldrb	r3, [r7, #5]
 8003d58:	461a      	mov	r2, r3
 8003d5a:	210a      	movs	r1, #10
 8003d5c:	2082      	movs	r0, #130	@ 0x82
 8003d5e:	f000 f8ff 	bl	8003f60 <I2C3_Write>
    
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8003d62:	20c8      	movs	r0, #200	@ 0xc8
 8003d64:	f000 fa24 	bl	80041b0 <HAL_Delay>

    return STMPE811_State_Ok;
 8003d68:	2302      	movs	r3, #2

}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b084      	sub	sp, #16
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	4603      	mov	r3, r0
 8003d7a:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8003d7c:	f107 020f 	add.w	r2, r7, #15
 8003d80:	79fb      	ldrb	r3, [r7, #7]
 8003d82:	4619      	mov	r1, r3
 8003d84:	2082      	movs	r0, #130	@ 0x82
 8003d86:	f000 f915 	bl	8003fb4 <I2C3_Read>

    return readData;
 8003d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <STMPE811_Write>:

void STMPE811_Write(uint8_t reg, uint8_t dataToWrite)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	460a      	mov	r2, r1
 8003d9e:	71fb      	strb	r3, [r7, #7]
 8003da0:	4613      	mov	r3, r2
 8003da2:	71bb      	strb	r3, [r7, #6]
    I2C3_Write(STMPE811_ADDRESS, reg, dataToWrite);
 8003da4:	79ba      	ldrb	r2, [r7, #6]
 8003da6:	79fb      	ldrb	r3, [r7, #7]
 8003da8:	4619      	mov	r1, r3
 8003daa:	2082      	movs	r0, #130	@ 0x82
 8003dac:	f000 f8d8 	bl	8003f60 <I2C3_Write>
}
 8003db0:	bf00      	nop
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <enableInterruptSupportForTouch>:
}

#if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

void enableInterruptSupportForTouch(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
    // Initialze the GPIO and enable the interrupt
    // Interrupt is on interrupt Line PA15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	603b      	str	r3, [r7, #0]
 8003dc2:	4b14      	ldr	r3, [pc, #80]	@ (8003e14 <enableInterruptSupportForTouch+0x5c>)
 8003dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc6:	4a13      	ldr	r2, [pc, #76]	@ (8003e14 <enableInterruptSupportForTouch+0x5c>)
 8003dc8:	f043 0301 	orr.w	r3, r3, #1
 8003dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dce:	4b11      	ldr	r3, [pc, #68]	@ (8003e14 <enableInterruptSupportForTouch+0x5c>)
 8003dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	603b      	str	r3, [r7, #0]
 8003dd8:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dda:	1d3b      	adds	r3, r7, #4
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]
 8003de0:	605a      	str	r2, [r3, #4]
 8003de2:	609a      	str	r2, [r3, #8]
 8003de4:	60da      	str	r2, [r3, #12]
 8003de6:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003de8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dec:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003dee:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8003df2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df4:	2300      	movs	r3, #0
 8003df6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003df8:	2302      	movs	r3, #2
 8003dfa:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dfc:	1d3b      	adds	r3, r7, #4
 8003dfe:	4619      	mov	r1, r3
 8003e00:	4805      	ldr	r0, [pc, #20]	@ (8003e18 <enableInterruptSupportForTouch+0x60>)
 8003e02:	f000 fb81 	bl	8004508 <HAL_GPIO_Init>

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003e06:	2028      	movs	r0, #40	@ 0x28
 8003e08:	f7ff fece 	bl	8003ba8 <__NVIC_EnableIRQ>

}
 8003e0c:	bf00      	nop
 8003e0e:	3718      	adds	r7, #24
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40023800 	.word	0x40023800
 8003e18:	40020000 	.word	0x40020000

08003e1c <verifyHAL_I2C_IS_OKAY>:

#endif 


//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8003e20:	4b05      	ldr	r3, [pc, #20]	@ (8003e38 <verifyHAL_I2C_IS_OKAY+0x1c>)
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d001      	beq.n	8003e2c <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8003e28:	bf00      	nop
 8003e2a:	e7fd      	b.n	8003e28 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8003e2c:	bf00      	nop
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	20025ac0 	.word	0x20025ac0

08003e3c <I2C3_Init>:

static void I2C3_Init()
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8003e42:	2300      	movs	r3, #0
 8003e44:	603b      	str	r3, [r7, #0]
 8003e46:	4b18      	ldr	r3, [pc, #96]	@ (8003ea8 <I2C3_Init+0x6c>)
 8003e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4a:	4a17      	ldr	r2, [pc, #92]	@ (8003ea8 <I2C3_Init+0x6c>)
 8003e4c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003e50:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e52:	4b15      	ldr	r3, [pc, #84]	@ (8003ea8 <I2C3_Init+0x6c>)
 8003e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e5a:	603b      	str	r3, [r7, #0]
 8003e5c:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8003e5e:	4b13      	ldr	r3, [pc, #76]	@ (8003eac <I2C3_Init+0x70>)
 8003e60:	4a13      	ldr	r2, [pc, #76]	@ (8003eb0 <I2C3_Init+0x74>)
 8003e62:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8003e64:	4b11      	ldr	r3, [pc, #68]	@ (8003eac <I2C3_Init+0x70>)
 8003e66:	4a13      	ldr	r2, [pc, #76]	@ (8003eb4 <I2C3_Init+0x78>)
 8003e68:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003e6a:	4b10      	ldr	r3, [pc, #64]	@ (8003eac <I2C3_Init+0x70>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8003e70:	4b0e      	ldr	r3, [pc, #56]	@ (8003eac <I2C3_Init+0x70>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e76:	4b0d      	ldr	r3, [pc, #52]	@ (8003eac <I2C3_Init+0x70>)
 8003e78:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003e7c:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8003e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8003eac <I2C3_Init+0x70>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e84:	4b09      	ldr	r3, [pc, #36]	@ (8003eac <I2C3_Init+0x70>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8003e8a:	4808      	ldr	r0, [pc, #32]	@ (8003eac <I2C3_Init+0x70>)
 8003e8c:	f000 fe0e 	bl	8004aac <HAL_I2C_Init>
 8003e90:	4603      	mov	r3, r0
 8003e92:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8003e94:	79fb      	ldrb	r3, [r7, #7]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8003e9a:	bf00      	nop
 8003e9c:	e7fd      	b.n	8003e9a <I2C3_Init+0x5e>
    }
    return;
 8003e9e:	bf00      	nop
}
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40023800 	.word	0x40023800
 8003eac:	20025a6c 	.word	0x20025a6c
 8003eb0:	40005c00 	.word	0x40005c00
 8003eb4:	000186a0 	.word	0x000186a0

08003eb8 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b088      	sub	sp, #32
 8003ebc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ebe:	f107 030c 	add.w	r3, r7, #12
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	601a      	str	r2, [r3, #0]
 8003ec6:	605a      	str	r2, [r3, #4]
 8003ec8:	609a      	str	r2, [r3, #8]
 8003eca:	60da      	str	r2, [r3, #12]
 8003ecc:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ece:	2300      	movs	r3, #0
 8003ed0:	60bb      	str	r3, [r7, #8]
 8003ed2:	4b20      	ldr	r3, [pc, #128]	@ (8003f54 <I2C3_MspInit+0x9c>)
 8003ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed6:	4a1f      	ldr	r2, [pc, #124]	@ (8003f54 <I2C3_MspInit+0x9c>)
 8003ed8:	f043 0304 	orr.w	r3, r3, #4
 8003edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ede:	4b1d      	ldr	r3, [pc, #116]	@ (8003f54 <I2C3_MspInit+0x9c>)
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee2:	f003 0304 	and.w	r3, r3, #4
 8003ee6:	60bb      	str	r3, [r7, #8]
 8003ee8:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eea:	2300      	movs	r3, #0
 8003eec:	607b      	str	r3, [r7, #4]
 8003eee:	4b19      	ldr	r3, [pc, #100]	@ (8003f54 <I2C3_MspInit+0x9c>)
 8003ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef2:	4a18      	ldr	r2, [pc, #96]	@ (8003f54 <I2C3_MspInit+0x9c>)
 8003ef4:	f043 0301 	orr.w	r3, r3, #1
 8003ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003efa:	4b16      	ldr	r3, [pc, #88]	@ (8003f54 <I2C3_MspInit+0x9c>)
 8003efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	607b      	str	r3, [r7, #4]
 8003f04:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8003f06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f0a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f0c:	2312      	movs	r3, #18
 8003f0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f10:	2300      	movs	r3, #0
 8003f12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f14:	2300      	movs	r3, #0
 8003f16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003f18:	2304      	movs	r3, #4
 8003f1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8003f1c:	f107 030c 	add.w	r3, r7, #12
 8003f20:	4619      	mov	r1, r3
 8003f22:	480d      	ldr	r0, [pc, #52]	@ (8003f58 <I2C3_MspInit+0xa0>)
 8003f24:	f000 faf0 	bl	8004508 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8003f28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f2c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f2e:	2312      	movs	r3, #18
 8003f30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f32:	2300      	movs	r3, #0
 8003f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f36:	2300      	movs	r3, #0
 8003f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003f3a:	2304      	movs	r3, #4
 8003f3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8003f3e:	f107 030c 	add.w	r3, r7, #12
 8003f42:	4619      	mov	r1, r3
 8003f44:	4805      	ldr	r0, [pc, #20]	@ (8003f5c <I2C3_MspInit+0xa4>)
 8003f46:	f000 fadf 	bl	8004508 <HAL_GPIO_Init>
    
}
 8003f4a:	bf00      	nop
 8003f4c:	3720      	adds	r7, #32
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	40023800 	.word	0x40023800
 8003f58:	40020800 	.word	0x40020800
 8003f5c:	40020000 	.word	0x40020000

08003f60 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b088      	sub	sp, #32
 8003f64:	af04      	add	r7, sp, #16
 8003f66:	4603      	mov	r3, r0
 8003f68:	80fb      	strh	r3, [r7, #6]
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	717b      	strb	r3, [r7, #5]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8003f72:	793b      	ldrb	r3, [r7, #4]
 8003f74:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8003f76:	797b      	ldrb	r3, [r7, #5]
 8003f78:	b29a      	uxth	r2, r3
 8003f7a:	88f9      	ldrh	r1, [r7, #6]
 8003f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8003fa8 <I2C3_Write+0x48>)
 8003f7e:	9302      	str	r3, [sp, #8]
 8003f80:	2301      	movs	r3, #1
 8003f82:	9301      	str	r3, [sp, #4]
 8003f84:	f107 030f 	add.w	r3, r7, #15
 8003f88:	9300      	str	r3, [sp, #0]
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	4807      	ldr	r0, [pc, #28]	@ (8003fac <I2C3_Write+0x4c>)
 8003f8e:	f000 fed1 	bl	8004d34 <HAL_I2C_Mem_Write>
 8003f92:	4603      	mov	r3, r0
 8003f94:	461a      	mov	r2, r3
 8003f96:	4b06      	ldr	r3, [pc, #24]	@ (8003fb0 <I2C3_Write+0x50>)
 8003f98:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8003f9a:	f7ff ff3f 	bl	8003e1c <verifyHAL_I2C_IS_OKAY>
}
 8003f9e:	bf00      	nop
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	0003d090 	.word	0x0003d090
 8003fac:	20025a6c 	.word	0x20025a6c
 8003fb0:	20025ac0 	.word	0x20025ac0

08003fb4 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af04      	add	r7, sp, #16
 8003fba:	4603      	mov	r3, r0
 8003fbc:	603a      	str	r2, [r7, #0]
 8003fbe:	71fb      	strb	r3, [r7, #7]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8003fc4:	79fb      	ldrb	r3, [r7, #7]
 8003fc6:	b299      	uxth	r1, r3
 8003fc8:	79bb      	ldrb	r3, [r7, #6]
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	4b09      	ldr	r3, [pc, #36]	@ (8003ff4 <I2C3_Read+0x40>)
 8003fce:	9302      	str	r3, [sp, #8]
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	9301      	str	r3, [sp, #4]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	9300      	str	r3, [sp, #0]
 8003fd8:	2301      	movs	r3, #1
 8003fda:	4807      	ldr	r0, [pc, #28]	@ (8003ff8 <I2C3_Read+0x44>)
 8003fdc:	f000 ffa4 	bl	8004f28 <HAL_I2C_Mem_Read>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	4b05      	ldr	r3, [pc, #20]	@ (8003ffc <I2C3_Read+0x48>)
 8003fe6:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8003fe8:	f7ff ff18 	bl	8003e1c <verifyHAL_I2C_IS_OKAY>
}
 8003fec:	bf00      	nop
 8003fee:	3708      	adds	r7, #8
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	0003d090 	.word	0x0003d090
 8003ff8:	20025a6c 	.word	0x20025a6c
 8003ffc:	20025ac0 	.word	0x20025ac0

08004000 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af04      	add	r7, sp, #16
 8004006:	603a      	str	r2, [r7, #0]
 8004008:	461a      	mov	r2, r3
 800400a:	4603      	mov	r3, r0
 800400c:	71fb      	strb	r3, [r7, #7]
 800400e:	460b      	mov	r3, r1
 8004010:	71bb      	strb	r3, [r7, #6]
 8004012:	4613      	mov	r3, r2
 8004014:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8004016:	79fb      	ldrb	r3, [r7, #7]
 8004018:	b299      	uxth	r1, r3
 800401a:	79bb      	ldrb	r3, [r7, #6]
 800401c:	b29a      	uxth	r2, r3
 800401e:	4b07      	ldr	r3, [pc, #28]	@ (800403c <I2C3_MulitByteRead+0x3c>)
 8004020:	9302      	str	r3, [sp, #8]
 8004022:	88bb      	ldrh	r3, [r7, #4]
 8004024:	9301      	str	r3, [sp, #4]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	9300      	str	r3, [sp, #0]
 800402a:	2301      	movs	r3, #1
 800402c:	4804      	ldr	r0, [pc, #16]	@ (8004040 <I2C3_MulitByteRead+0x40>)
 800402e:	f000 ff7b 	bl	8004f28 <HAL_I2C_Mem_Read>
}
 8004032:	bf00      	nop
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	0003d090 	.word	0x0003d090
 8004040:	20025a6c 	.word	0x20025a6c

08004044 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
}
 8004048:	bf00      	nop
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
	...

08004054 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004058:	4b06      	ldr	r3, [pc, #24]	@ (8004074 <SystemInit+0x20>)
 800405a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800405e:	4a05      	ldr	r2, [pc, #20]	@ (8004074 <SystemInit+0x20>)
 8004060:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004064:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004068:	bf00      	nop
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	e000ed00 	.word	0xe000ed00

08004078 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004078:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80040b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800407c:	f7ff ffea 	bl	8004054 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004080:	480c      	ldr	r0, [pc, #48]	@ (80040b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004082:	490d      	ldr	r1, [pc, #52]	@ (80040b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004084:	4a0d      	ldr	r2, [pc, #52]	@ (80040bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004086:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004088:	e002      	b.n	8004090 <LoopCopyDataInit>

0800408a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800408a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800408c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800408e:	3304      	adds	r3, #4

08004090 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004094:	d3f9      	bcc.n	800408a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004096:	4a0a      	ldr	r2, [pc, #40]	@ (80040c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004098:	4c0a      	ldr	r4, [pc, #40]	@ (80040c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800409a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800409c:	e001      	b.n	80040a2 <LoopFillZerobss>

0800409e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800409e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040a0:	3204      	adds	r2, #4

080040a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040a4:	d3fb      	bcc.n	800409e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80040a6:	f003 fae3 	bl	8007670 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80040aa:	f7ff fa3b 	bl	8003524 <main>
  bx  lr    
 80040ae:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80040b0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80040b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040b8:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80040bc:	080091c8 	.word	0x080091c8
  ldr r2, =_sbss
 80040c0:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80040c4:	20025ac8 	.word	0x20025ac8

080040c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040c8:	e7fe      	b.n	80040c8 <ADC_IRQHandler>
	...

080040cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80040d0:	4b0e      	ldr	r3, [pc, #56]	@ (800410c <HAL_Init+0x40>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a0d      	ldr	r2, [pc, #52]	@ (800410c <HAL_Init+0x40>)
 80040d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80040da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80040dc:	4b0b      	ldr	r3, [pc, #44]	@ (800410c <HAL_Init+0x40>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a0a      	ldr	r2, [pc, #40]	@ (800410c <HAL_Init+0x40>)
 80040e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80040e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040e8:	4b08      	ldr	r3, [pc, #32]	@ (800410c <HAL_Init+0x40>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a07      	ldr	r2, [pc, #28]	@ (800410c <HAL_Init+0x40>)
 80040ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040f4:	2003      	movs	r0, #3
 80040f6:	f000 f991 	bl	800441c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040fa:	2000      	movs	r0, #0
 80040fc:	f000 f808 	bl	8004110 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004100:	f7ff fac0 	bl	8003684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	40023c00 	.word	0x40023c00

08004110 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004118:	4b12      	ldr	r3, [pc, #72]	@ (8004164 <HAL_InitTick+0x54>)
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	4b12      	ldr	r3, [pc, #72]	@ (8004168 <HAL_InitTick+0x58>)
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	4619      	mov	r1, r3
 8004122:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004126:	fbb3 f3f1 	udiv	r3, r3, r1
 800412a:	fbb2 f3f3 	udiv	r3, r2, r3
 800412e:	4618      	mov	r0, r3
 8004130:	f000 f9b7 	bl	80044a2 <HAL_SYSTICK_Config>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e00e      	b.n	800415c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b0f      	cmp	r3, #15
 8004142:	d80a      	bhi.n	800415a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004144:	2200      	movs	r2, #0
 8004146:	6879      	ldr	r1, [r7, #4]
 8004148:	f04f 30ff 	mov.w	r0, #4294967295
 800414c:	f000 f971 	bl	8004432 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004150:	4a06      	ldr	r2, [pc, #24]	@ (800416c <HAL_InitTick+0x5c>)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004156:	2300      	movs	r3, #0
 8004158:	e000      	b.n	800415c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
}
 800415c:	4618      	mov	r0, r3
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	20000018 	.word	0x20000018
 8004168:	20000020 	.word	0x20000020
 800416c:	2000001c 	.word	0x2000001c

08004170 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004174:	4b06      	ldr	r3, [pc, #24]	@ (8004190 <HAL_IncTick+0x20>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	461a      	mov	r2, r3
 800417a:	4b06      	ldr	r3, [pc, #24]	@ (8004194 <HAL_IncTick+0x24>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4413      	add	r3, r2
 8004180:	4a04      	ldr	r2, [pc, #16]	@ (8004194 <HAL_IncTick+0x24>)
 8004182:	6013      	str	r3, [r2, #0]
}
 8004184:	bf00      	nop
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	20000020 	.word	0x20000020
 8004194:	20025ac4 	.word	0x20025ac4

08004198 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  return uwTick;
 800419c:	4b03      	ldr	r3, [pc, #12]	@ (80041ac <HAL_GetTick+0x14>)
 800419e:	681b      	ldr	r3, [r3, #0]
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	20025ac4 	.word	0x20025ac4

080041b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041b8:	f7ff ffee 	bl	8004198 <HAL_GetTick>
 80041bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c8:	d005      	beq.n	80041d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041ca:	4b0a      	ldr	r3, [pc, #40]	@ (80041f4 <HAL_Delay+0x44>)
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	461a      	mov	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4413      	add	r3, r2
 80041d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80041d6:	bf00      	nop
 80041d8:	f7ff ffde 	bl	8004198 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d8f7      	bhi.n	80041d8 <HAL_Delay+0x28>
  {
  }
}
 80041e8:	bf00      	nop
 80041ea:	bf00      	nop
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	20000020 	.word	0x20000020

080041f8 <__NVIC_SetPriorityGrouping>:
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f003 0307 	and.w	r3, r3, #7
 8004206:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004208:	4b0c      	ldr	r3, [pc, #48]	@ (800423c <__NVIC_SetPriorityGrouping+0x44>)
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004214:	4013      	ands	r3, r2
 8004216:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004220:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004224:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800422a:	4a04      	ldr	r2, [pc, #16]	@ (800423c <__NVIC_SetPriorityGrouping+0x44>)
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	60d3      	str	r3, [r2, #12]
}
 8004230:	bf00      	nop
 8004232:	3714      	adds	r7, #20
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	e000ed00 	.word	0xe000ed00

08004240 <__NVIC_GetPriorityGrouping>:
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004244:	4b04      	ldr	r3, [pc, #16]	@ (8004258 <__NVIC_GetPriorityGrouping+0x18>)
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	0a1b      	lsrs	r3, r3, #8
 800424a:	f003 0307 	and.w	r3, r3, #7
}
 800424e:	4618      	mov	r0, r3
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	e000ed00 	.word	0xe000ed00

0800425c <__NVIC_EnableIRQ>:
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	4603      	mov	r3, r0
 8004264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800426a:	2b00      	cmp	r3, #0
 800426c:	db0b      	blt.n	8004286 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800426e:	79fb      	ldrb	r3, [r7, #7]
 8004270:	f003 021f 	and.w	r2, r3, #31
 8004274:	4907      	ldr	r1, [pc, #28]	@ (8004294 <__NVIC_EnableIRQ+0x38>)
 8004276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800427a:	095b      	lsrs	r3, r3, #5
 800427c:	2001      	movs	r0, #1
 800427e:	fa00 f202 	lsl.w	r2, r0, r2
 8004282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004286:	bf00      	nop
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	e000e100 	.word	0xe000e100

08004298 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	4603      	mov	r3, r0
 80042a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	db12      	blt.n	80042d0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042aa:	79fb      	ldrb	r3, [r7, #7]
 80042ac:	f003 021f 	and.w	r2, r3, #31
 80042b0:	490a      	ldr	r1, [pc, #40]	@ (80042dc <__NVIC_DisableIRQ+0x44>)
 80042b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b6:	095b      	lsrs	r3, r3, #5
 80042b8:	2001      	movs	r0, #1
 80042ba:	fa00 f202 	lsl.w	r2, r0, r2
 80042be:	3320      	adds	r3, #32
 80042c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80042c4:	f3bf 8f4f 	dsb	sy
}
 80042c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80042ca:	f3bf 8f6f 	isb	sy
}
 80042ce:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	e000e100 	.word	0xe000e100

080042e0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	4603      	mov	r3, r0
 80042e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	db0c      	blt.n	800430c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042f2:	79fb      	ldrb	r3, [r7, #7]
 80042f4:	f003 021f 	and.w	r2, r3, #31
 80042f8:	4907      	ldr	r1, [pc, #28]	@ (8004318 <__NVIC_ClearPendingIRQ+0x38>)
 80042fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042fe:	095b      	lsrs	r3, r3, #5
 8004300:	2001      	movs	r0, #1
 8004302:	fa00 f202 	lsl.w	r2, r0, r2
 8004306:	3360      	adds	r3, #96	@ 0x60
 8004308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	e000e100 	.word	0xe000e100

0800431c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	4603      	mov	r3, r0
 8004324:	6039      	str	r1, [r7, #0]
 8004326:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800432c:	2b00      	cmp	r3, #0
 800432e:	db0a      	blt.n	8004346 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	b2da      	uxtb	r2, r3
 8004334:	490c      	ldr	r1, [pc, #48]	@ (8004368 <__NVIC_SetPriority+0x4c>)
 8004336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800433a:	0112      	lsls	r2, r2, #4
 800433c:	b2d2      	uxtb	r2, r2
 800433e:	440b      	add	r3, r1
 8004340:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004344:	e00a      	b.n	800435c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	b2da      	uxtb	r2, r3
 800434a:	4908      	ldr	r1, [pc, #32]	@ (800436c <__NVIC_SetPriority+0x50>)
 800434c:	79fb      	ldrb	r3, [r7, #7]
 800434e:	f003 030f 	and.w	r3, r3, #15
 8004352:	3b04      	subs	r3, #4
 8004354:	0112      	lsls	r2, r2, #4
 8004356:	b2d2      	uxtb	r2, r2
 8004358:	440b      	add	r3, r1
 800435a:	761a      	strb	r2, [r3, #24]
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr
 8004368:	e000e100 	.word	0xe000e100
 800436c:	e000ed00 	.word	0xe000ed00

08004370 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004370:	b480      	push	{r7}
 8004372:	b089      	sub	sp, #36	@ 0x24
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f003 0307 	and.w	r3, r3, #7
 8004382:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	f1c3 0307 	rsb	r3, r3, #7
 800438a:	2b04      	cmp	r3, #4
 800438c:	bf28      	it	cs
 800438e:	2304      	movcs	r3, #4
 8004390:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	3304      	adds	r3, #4
 8004396:	2b06      	cmp	r3, #6
 8004398:	d902      	bls.n	80043a0 <NVIC_EncodePriority+0x30>
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	3b03      	subs	r3, #3
 800439e:	e000      	b.n	80043a2 <NVIC_EncodePriority+0x32>
 80043a0:	2300      	movs	r3, #0
 80043a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043a4:	f04f 32ff 	mov.w	r2, #4294967295
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	fa02 f303 	lsl.w	r3, r2, r3
 80043ae:	43da      	mvns	r2, r3
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	401a      	ands	r2, r3
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043b8:	f04f 31ff 	mov.w	r1, #4294967295
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	fa01 f303 	lsl.w	r3, r1, r3
 80043c2:	43d9      	mvns	r1, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043c8:	4313      	orrs	r3, r2
         );
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3724      	adds	r7, #36	@ 0x24
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
	...

080043d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	3b01      	subs	r3, #1
 80043e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043e8:	d301      	bcc.n	80043ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043ea:	2301      	movs	r3, #1
 80043ec:	e00f      	b.n	800440e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043ee:	4a0a      	ldr	r2, [pc, #40]	@ (8004418 <SysTick_Config+0x40>)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	3b01      	subs	r3, #1
 80043f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043f6:	210f      	movs	r1, #15
 80043f8:	f04f 30ff 	mov.w	r0, #4294967295
 80043fc:	f7ff ff8e 	bl	800431c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004400:	4b05      	ldr	r3, [pc, #20]	@ (8004418 <SysTick_Config+0x40>)
 8004402:	2200      	movs	r2, #0
 8004404:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004406:	4b04      	ldr	r3, [pc, #16]	@ (8004418 <SysTick_Config+0x40>)
 8004408:	2207      	movs	r2, #7
 800440a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	e000e010 	.word	0xe000e010

0800441c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f7ff fee7 	bl	80041f8 <__NVIC_SetPriorityGrouping>
}
 800442a:	bf00      	nop
 800442c:	3708      	adds	r7, #8
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004432:	b580      	push	{r7, lr}
 8004434:	b086      	sub	sp, #24
 8004436:	af00      	add	r7, sp, #0
 8004438:	4603      	mov	r3, r0
 800443a:	60b9      	str	r1, [r7, #8]
 800443c:	607a      	str	r2, [r7, #4]
 800443e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004440:	2300      	movs	r3, #0
 8004442:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004444:	f7ff fefc 	bl	8004240 <__NVIC_GetPriorityGrouping>
 8004448:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	68b9      	ldr	r1, [r7, #8]
 800444e:	6978      	ldr	r0, [r7, #20]
 8004450:	f7ff ff8e 	bl	8004370 <NVIC_EncodePriority>
 8004454:	4602      	mov	r2, r0
 8004456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800445a:	4611      	mov	r1, r2
 800445c:	4618      	mov	r0, r3
 800445e:	f7ff ff5d 	bl	800431c <__NVIC_SetPriority>
}
 8004462:	bf00      	nop
 8004464:	3718      	adds	r7, #24
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800446a:	b580      	push	{r7, lr}
 800446c:	b082      	sub	sp, #8
 800446e:	af00      	add	r7, sp, #0
 8004470:	4603      	mov	r3, r0
 8004472:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004478:	4618      	mov	r0, r3
 800447a:	f7ff feef 	bl	800425c <__NVIC_EnableIRQ>
}
 800447e:	bf00      	nop
 8004480:	3708      	adds	r7, #8
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b082      	sub	sp, #8
 800448a:	af00      	add	r7, sp, #0
 800448c:	4603      	mov	r3, r0
 800448e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004494:	4618      	mov	r0, r3
 8004496:	f7ff feff 	bl	8004298 <__NVIC_DisableIRQ>
}
 800449a:	bf00      	nop
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b082      	sub	sp, #8
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f7ff ff94 	bl	80043d8 <SysTick_Config>
 80044b0:	4603      	mov	r3, r0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b082      	sub	sp, #8
 80044be:	af00      	add	r7, sp, #0
 80044c0:	4603      	mov	r3, r0
 80044c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80044c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7ff ff09 	bl	80042e0 <__NVIC_ClearPendingIRQ>
}
 80044ce:	bf00      	nop
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
	...

080044d8 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 031f 	and.w	r3, r3, #31
 80044ea:	2201      	movs	r2, #1
 80044ec:	fa02 f303 	lsl.w	r3, r2, r3
 80044f0:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 80044f2:	4a04      	ldr	r2, [pc, #16]	@ (8004504 <HAL_EXTI_ClearPending+0x2c>)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6153      	str	r3, [r2, #20]
}
 80044f8:	bf00      	nop
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	40013c00 	.word	0x40013c00

08004508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004508:	b480      	push	{r7}
 800450a:	b089      	sub	sp, #36	@ 0x24
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004512:	2300      	movs	r3, #0
 8004514:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004516:	2300      	movs	r3, #0
 8004518:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800451a:	2300      	movs	r3, #0
 800451c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800451e:	2300      	movs	r3, #0
 8004520:	61fb      	str	r3, [r7, #28]
 8004522:	e177      	b.n	8004814 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004524:	2201      	movs	r2, #1
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	fa02 f303 	lsl.w	r3, r2, r3
 800452c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	697a      	ldr	r2, [r7, #20]
 8004534:	4013      	ands	r3, r2
 8004536:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	429a      	cmp	r2, r3
 800453e:	f040 8166 	bne.w	800480e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f003 0303 	and.w	r3, r3, #3
 800454a:	2b01      	cmp	r3, #1
 800454c:	d005      	beq.n	800455a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004556:	2b02      	cmp	r3, #2
 8004558:	d130      	bne.n	80045bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	2203      	movs	r2, #3
 8004566:	fa02 f303 	lsl.w	r3, r2, r3
 800456a:	43db      	mvns	r3, r3
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	4013      	ands	r3, r2
 8004570:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	68da      	ldr	r2, [r3, #12]
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	fa02 f303 	lsl.w	r3, r2, r3
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	4313      	orrs	r3, r2
 8004582:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004590:	2201      	movs	r2, #1
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	fa02 f303 	lsl.w	r3, r2, r3
 8004598:	43db      	mvns	r3, r3
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	4013      	ands	r3, r2
 800459e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	091b      	lsrs	r3, r3, #4
 80045a6:	f003 0201 	and.w	r2, r3, #1
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	fa02 f303 	lsl.w	r3, r2, r3
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f003 0303 	and.w	r3, r3, #3
 80045c4:	2b03      	cmp	r3, #3
 80045c6:	d017      	beq.n	80045f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	2203      	movs	r2, #3
 80045d4:	fa02 f303 	lsl.w	r3, r2, r3
 80045d8:	43db      	mvns	r3, r3
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	4013      	ands	r3, r2
 80045de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	689a      	ldr	r2, [r3, #8]
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	005b      	lsls	r3, r3, #1
 80045e8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ec:	69ba      	ldr	r2, [r7, #24]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f003 0303 	and.w	r3, r3, #3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d123      	bne.n	800464c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	08da      	lsrs	r2, r3, #3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3208      	adds	r2, #8
 800460c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004610:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	f003 0307 	and.w	r3, r3, #7
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	220f      	movs	r2, #15
 800461c:	fa02 f303 	lsl.w	r3, r2, r3
 8004620:	43db      	mvns	r3, r3
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	4013      	ands	r3, r2
 8004626:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	691a      	ldr	r2, [r3, #16]
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	f003 0307 	and.w	r3, r3, #7
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	fa02 f303 	lsl.w	r3, r2, r3
 8004638:	69ba      	ldr	r2, [r7, #24]
 800463a:	4313      	orrs	r3, r2
 800463c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	08da      	lsrs	r2, r3, #3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	3208      	adds	r2, #8
 8004646:	69b9      	ldr	r1, [r7, #24]
 8004648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	2203      	movs	r2, #3
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	43db      	mvns	r3, r3
 800465e:	69ba      	ldr	r2, [r7, #24]
 8004660:	4013      	ands	r3, r2
 8004662:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f003 0203 	and.w	r2, r3, #3
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	fa02 f303 	lsl.w	r3, r2, r3
 8004674:	69ba      	ldr	r2, [r7, #24]
 8004676:	4313      	orrs	r3, r2
 8004678:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004688:	2b00      	cmp	r3, #0
 800468a:	f000 80c0 	beq.w	800480e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800468e:	2300      	movs	r3, #0
 8004690:	60fb      	str	r3, [r7, #12]
 8004692:	4b66      	ldr	r3, [pc, #408]	@ (800482c <HAL_GPIO_Init+0x324>)
 8004694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004696:	4a65      	ldr	r2, [pc, #404]	@ (800482c <HAL_GPIO_Init+0x324>)
 8004698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800469c:	6453      	str	r3, [r2, #68]	@ 0x44
 800469e:	4b63      	ldr	r3, [pc, #396]	@ (800482c <HAL_GPIO_Init+0x324>)
 80046a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046aa:	4a61      	ldr	r2, [pc, #388]	@ (8004830 <HAL_GPIO_Init+0x328>)
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	089b      	lsrs	r3, r3, #2
 80046b0:	3302      	adds	r3, #2
 80046b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	f003 0303 	and.w	r3, r3, #3
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	220f      	movs	r2, #15
 80046c2:	fa02 f303 	lsl.w	r3, r2, r3
 80046c6:	43db      	mvns	r3, r3
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	4013      	ands	r3, r2
 80046cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a58      	ldr	r2, [pc, #352]	@ (8004834 <HAL_GPIO_Init+0x32c>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d037      	beq.n	8004746 <HAL_GPIO_Init+0x23e>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a57      	ldr	r2, [pc, #348]	@ (8004838 <HAL_GPIO_Init+0x330>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d031      	beq.n	8004742 <HAL_GPIO_Init+0x23a>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a56      	ldr	r2, [pc, #344]	@ (800483c <HAL_GPIO_Init+0x334>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d02b      	beq.n	800473e <HAL_GPIO_Init+0x236>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a55      	ldr	r2, [pc, #340]	@ (8004840 <HAL_GPIO_Init+0x338>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d025      	beq.n	800473a <HAL_GPIO_Init+0x232>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a54      	ldr	r2, [pc, #336]	@ (8004844 <HAL_GPIO_Init+0x33c>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d01f      	beq.n	8004736 <HAL_GPIO_Init+0x22e>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a53      	ldr	r2, [pc, #332]	@ (8004848 <HAL_GPIO_Init+0x340>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d019      	beq.n	8004732 <HAL_GPIO_Init+0x22a>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a52      	ldr	r2, [pc, #328]	@ (800484c <HAL_GPIO_Init+0x344>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d013      	beq.n	800472e <HAL_GPIO_Init+0x226>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a51      	ldr	r2, [pc, #324]	@ (8004850 <HAL_GPIO_Init+0x348>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d00d      	beq.n	800472a <HAL_GPIO_Init+0x222>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a50      	ldr	r2, [pc, #320]	@ (8004854 <HAL_GPIO_Init+0x34c>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d007      	beq.n	8004726 <HAL_GPIO_Init+0x21e>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a4f      	ldr	r2, [pc, #316]	@ (8004858 <HAL_GPIO_Init+0x350>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d101      	bne.n	8004722 <HAL_GPIO_Init+0x21a>
 800471e:	2309      	movs	r3, #9
 8004720:	e012      	b.n	8004748 <HAL_GPIO_Init+0x240>
 8004722:	230a      	movs	r3, #10
 8004724:	e010      	b.n	8004748 <HAL_GPIO_Init+0x240>
 8004726:	2308      	movs	r3, #8
 8004728:	e00e      	b.n	8004748 <HAL_GPIO_Init+0x240>
 800472a:	2307      	movs	r3, #7
 800472c:	e00c      	b.n	8004748 <HAL_GPIO_Init+0x240>
 800472e:	2306      	movs	r3, #6
 8004730:	e00a      	b.n	8004748 <HAL_GPIO_Init+0x240>
 8004732:	2305      	movs	r3, #5
 8004734:	e008      	b.n	8004748 <HAL_GPIO_Init+0x240>
 8004736:	2304      	movs	r3, #4
 8004738:	e006      	b.n	8004748 <HAL_GPIO_Init+0x240>
 800473a:	2303      	movs	r3, #3
 800473c:	e004      	b.n	8004748 <HAL_GPIO_Init+0x240>
 800473e:	2302      	movs	r3, #2
 8004740:	e002      	b.n	8004748 <HAL_GPIO_Init+0x240>
 8004742:	2301      	movs	r3, #1
 8004744:	e000      	b.n	8004748 <HAL_GPIO_Init+0x240>
 8004746:	2300      	movs	r3, #0
 8004748:	69fa      	ldr	r2, [r7, #28]
 800474a:	f002 0203 	and.w	r2, r2, #3
 800474e:	0092      	lsls	r2, r2, #2
 8004750:	4093      	lsls	r3, r2
 8004752:	69ba      	ldr	r2, [r7, #24]
 8004754:	4313      	orrs	r3, r2
 8004756:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004758:	4935      	ldr	r1, [pc, #212]	@ (8004830 <HAL_GPIO_Init+0x328>)
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	089b      	lsrs	r3, r3, #2
 800475e:	3302      	adds	r3, #2
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004766:	4b3d      	ldr	r3, [pc, #244]	@ (800485c <HAL_GPIO_Init+0x354>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	43db      	mvns	r3, r3
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	4013      	ands	r3, r2
 8004774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004782:	69ba      	ldr	r2, [r7, #24]
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	4313      	orrs	r3, r2
 8004788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800478a:	4a34      	ldr	r2, [pc, #208]	@ (800485c <HAL_GPIO_Init+0x354>)
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004790:	4b32      	ldr	r3, [pc, #200]	@ (800485c <HAL_GPIO_Init+0x354>)
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	43db      	mvns	r3, r3
 800479a:	69ba      	ldr	r2, [r7, #24]
 800479c:	4013      	ands	r3, r2
 800479e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d003      	beq.n	80047b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80047b4:	4a29      	ldr	r2, [pc, #164]	@ (800485c <HAL_GPIO_Init+0x354>)
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80047ba:	4b28      	ldr	r3, [pc, #160]	@ (800485c <HAL_GPIO_Init+0x354>)
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	43db      	mvns	r3, r3
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	4013      	ands	r3, r2
 80047c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80047d6:	69ba      	ldr	r2, [r7, #24]
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	4313      	orrs	r3, r2
 80047dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80047de:	4a1f      	ldr	r2, [pc, #124]	@ (800485c <HAL_GPIO_Init+0x354>)
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047e4:	4b1d      	ldr	r3, [pc, #116]	@ (800485c <HAL_GPIO_Init+0x354>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	43db      	mvns	r3, r3
 80047ee:	69ba      	ldr	r2, [r7, #24]
 80047f0:	4013      	ands	r3, r2
 80047f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d003      	beq.n	8004808 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	4313      	orrs	r3, r2
 8004806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004808:	4a14      	ldr	r2, [pc, #80]	@ (800485c <HAL_GPIO_Init+0x354>)
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	3301      	adds	r3, #1
 8004812:	61fb      	str	r3, [r7, #28]
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	2b0f      	cmp	r3, #15
 8004818:	f67f ae84 	bls.w	8004524 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800481c:	bf00      	nop
 800481e:	bf00      	nop
 8004820:	3724      	adds	r7, #36	@ 0x24
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	40023800 	.word	0x40023800
 8004830:	40013800 	.word	0x40013800
 8004834:	40020000 	.word	0x40020000
 8004838:	40020400 	.word	0x40020400
 800483c:	40020800 	.word	0x40020800
 8004840:	40020c00 	.word	0x40020c00
 8004844:	40021000 	.word	0x40021000
 8004848:	40021400 	.word	0x40021400
 800484c:	40021800 	.word	0x40021800
 8004850:	40021c00 	.word	0x40021c00
 8004854:	40022000 	.word	0x40022000
 8004858:	40022400 	.word	0x40022400
 800485c:	40013c00 	.word	0x40013c00

08004860 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004860:	b480      	push	{r7}
 8004862:	b087      	sub	sp, #28
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800486a:	2300      	movs	r3, #0
 800486c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800486e:	2300      	movs	r3, #0
 8004870:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004872:	2300      	movs	r3, #0
 8004874:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004876:	2300      	movs	r3, #0
 8004878:	617b      	str	r3, [r7, #20]
 800487a:	e0d9      	b.n	8004a30 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800487c:	2201      	movs	r2, #1
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	fa02 f303 	lsl.w	r3, r2, r3
 8004884:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	4013      	ands	r3, r2
 800488c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	429a      	cmp	r2, r3
 8004894:	f040 80c9 	bne.w	8004a2a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004898:	4a6b      	ldr	r2, [pc, #428]	@ (8004a48 <HAL_GPIO_DeInit+0x1e8>)
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	089b      	lsrs	r3, r3, #2
 800489e:	3302      	adds	r3, #2
 80048a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048a4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f003 0303 	and.w	r3, r3, #3
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	220f      	movs	r2, #15
 80048b0:	fa02 f303 	lsl.w	r3, r2, r3
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	4013      	ands	r3, r2
 80048b8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a63      	ldr	r2, [pc, #396]	@ (8004a4c <HAL_GPIO_DeInit+0x1ec>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d037      	beq.n	8004932 <HAL_GPIO_DeInit+0xd2>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a62      	ldr	r2, [pc, #392]	@ (8004a50 <HAL_GPIO_DeInit+0x1f0>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d031      	beq.n	800492e <HAL_GPIO_DeInit+0xce>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a61      	ldr	r2, [pc, #388]	@ (8004a54 <HAL_GPIO_DeInit+0x1f4>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d02b      	beq.n	800492a <HAL_GPIO_DeInit+0xca>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a60      	ldr	r2, [pc, #384]	@ (8004a58 <HAL_GPIO_DeInit+0x1f8>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d025      	beq.n	8004926 <HAL_GPIO_DeInit+0xc6>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a5f      	ldr	r2, [pc, #380]	@ (8004a5c <HAL_GPIO_DeInit+0x1fc>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d01f      	beq.n	8004922 <HAL_GPIO_DeInit+0xc2>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a5e      	ldr	r2, [pc, #376]	@ (8004a60 <HAL_GPIO_DeInit+0x200>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d019      	beq.n	800491e <HAL_GPIO_DeInit+0xbe>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a5d      	ldr	r2, [pc, #372]	@ (8004a64 <HAL_GPIO_DeInit+0x204>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d013      	beq.n	800491a <HAL_GPIO_DeInit+0xba>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a5c      	ldr	r2, [pc, #368]	@ (8004a68 <HAL_GPIO_DeInit+0x208>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d00d      	beq.n	8004916 <HAL_GPIO_DeInit+0xb6>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a5b      	ldr	r2, [pc, #364]	@ (8004a6c <HAL_GPIO_DeInit+0x20c>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d007      	beq.n	8004912 <HAL_GPIO_DeInit+0xb2>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a5a      	ldr	r2, [pc, #360]	@ (8004a70 <HAL_GPIO_DeInit+0x210>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d101      	bne.n	800490e <HAL_GPIO_DeInit+0xae>
 800490a:	2309      	movs	r3, #9
 800490c:	e012      	b.n	8004934 <HAL_GPIO_DeInit+0xd4>
 800490e:	230a      	movs	r3, #10
 8004910:	e010      	b.n	8004934 <HAL_GPIO_DeInit+0xd4>
 8004912:	2308      	movs	r3, #8
 8004914:	e00e      	b.n	8004934 <HAL_GPIO_DeInit+0xd4>
 8004916:	2307      	movs	r3, #7
 8004918:	e00c      	b.n	8004934 <HAL_GPIO_DeInit+0xd4>
 800491a:	2306      	movs	r3, #6
 800491c:	e00a      	b.n	8004934 <HAL_GPIO_DeInit+0xd4>
 800491e:	2305      	movs	r3, #5
 8004920:	e008      	b.n	8004934 <HAL_GPIO_DeInit+0xd4>
 8004922:	2304      	movs	r3, #4
 8004924:	e006      	b.n	8004934 <HAL_GPIO_DeInit+0xd4>
 8004926:	2303      	movs	r3, #3
 8004928:	e004      	b.n	8004934 <HAL_GPIO_DeInit+0xd4>
 800492a:	2302      	movs	r3, #2
 800492c:	e002      	b.n	8004934 <HAL_GPIO_DeInit+0xd4>
 800492e:	2301      	movs	r3, #1
 8004930:	e000      	b.n	8004934 <HAL_GPIO_DeInit+0xd4>
 8004932:	2300      	movs	r3, #0
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	f002 0203 	and.w	r2, r2, #3
 800493a:	0092      	lsls	r2, r2, #2
 800493c:	4093      	lsls	r3, r2
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	429a      	cmp	r2, r3
 8004942:	d132      	bne.n	80049aa <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004944:	4b4b      	ldr	r3, [pc, #300]	@ (8004a74 <HAL_GPIO_DeInit+0x214>)
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	43db      	mvns	r3, r3
 800494c:	4949      	ldr	r1, [pc, #292]	@ (8004a74 <HAL_GPIO_DeInit+0x214>)
 800494e:	4013      	ands	r3, r2
 8004950:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004952:	4b48      	ldr	r3, [pc, #288]	@ (8004a74 <HAL_GPIO_DeInit+0x214>)
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	43db      	mvns	r3, r3
 800495a:	4946      	ldr	r1, [pc, #280]	@ (8004a74 <HAL_GPIO_DeInit+0x214>)
 800495c:	4013      	ands	r3, r2
 800495e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004960:	4b44      	ldr	r3, [pc, #272]	@ (8004a74 <HAL_GPIO_DeInit+0x214>)
 8004962:	68da      	ldr	r2, [r3, #12]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	43db      	mvns	r3, r3
 8004968:	4942      	ldr	r1, [pc, #264]	@ (8004a74 <HAL_GPIO_DeInit+0x214>)
 800496a:	4013      	ands	r3, r2
 800496c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800496e:	4b41      	ldr	r3, [pc, #260]	@ (8004a74 <HAL_GPIO_DeInit+0x214>)
 8004970:	689a      	ldr	r2, [r3, #8]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	43db      	mvns	r3, r3
 8004976:	493f      	ldr	r1, [pc, #252]	@ (8004a74 <HAL_GPIO_DeInit+0x214>)
 8004978:	4013      	ands	r3, r2
 800497a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	f003 0303 	and.w	r3, r3, #3
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	220f      	movs	r2, #15
 8004986:	fa02 f303 	lsl.w	r3, r2, r3
 800498a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800498c:	4a2e      	ldr	r2, [pc, #184]	@ (8004a48 <HAL_GPIO_DeInit+0x1e8>)
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	089b      	lsrs	r3, r3, #2
 8004992:	3302      	adds	r3, #2
 8004994:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	43da      	mvns	r2, r3
 800499c:	482a      	ldr	r0, [pc, #168]	@ (8004a48 <HAL_GPIO_DeInit+0x1e8>)
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	089b      	lsrs	r3, r3, #2
 80049a2:	400a      	ands	r2, r1
 80049a4:	3302      	adds	r3, #2
 80049a6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	2103      	movs	r1, #3
 80049b4:	fa01 f303 	lsl.w	r3, r1, r3
 80049b8:	43db      	mvns	r3, r3
 80049ba:	401a      	ands	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	08da      	lsrs	r2, r3, #3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	3208      	adds	r2, #8
 80049c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	f003 0307 	and.w	r3, r3, #7
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	220f      	movs	r2, #15
 80049d6:	fa02 f303 	lsl.w	r3, r2, r3
 80049da:	43db      	mvns	r3, r3
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	08d2      	lsrs	r2, r2, #3
 80049e0:	4019      	ands	r1, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	3208      	adds	r2, #8
 80049e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	68da      	ldr	r2, [r3, #12]
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	005b      	lsls	r3, r3, #1
 80049f2:	2103      	movs	r1, #3
 80049f4:	fa01 f303 	lsl.w	r3, r1, r3
 80049f8:	43db      	mvns	r3, r3
 80049fa:	401a      	ands	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685a      	ldr	r2, [r3, #4]
 8004a04:	2101      	movs	r1, #1
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	fa01 f303 	lsl.w	r3, r1, r3
 8004a0c:	43db      	mvns	r3, r3
 8004a0e:	401a      	ands	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689a      	ldr	r2, [r3, #8]
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	005b      	lsls	r3, r3, #1
 8004a1c:	2103      	movs	r1, #3
 8004a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a22:	43db      	mvns	r3, r3
 8004a24:	401a      	ands	r2, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	617b      	str	r3, [r7, #20]
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	2b0f      	cmp	r3, #15
 8004a34:	f67f af22 	bls.w	800487c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004a38:	bf00      	nop
 8004a3a:	bf00      	nop
 8004a3c:	371c      	adds	r7, #28
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	40013800 	.word	0x40013800
 8004a4c:	40020000 	.word	0x40020000
 8004a50:	40020400 	.word	0x40020400
 8004a54:	40020800 	.word	0x40020800
 8004a58:	40020c00 	.word	0x40020c00
 8004a5c:	40021000 	.word	0x40021000
 8004a60:	40021400 	.word	0x40021400
 8004a64:	40021800 	.word	0x40021800
 8004a68:	40021c00 	.word	0x40021c00
 8004a6c:	40022000 	.word	0x40022000
 8004a70:	40022400 	.word	0x40022400
 8004a74:	40013c00 	.word	0x40013c00

08004a78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	460b      	mov	r3, r1
 8004a82:	807b      	strh	r3, [r7, #2]
 8004a84:	4613      	mov	r3, r2
 8004a86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a88:	787b      	ldrb	r3, [r7, #1]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a8e:	887a      	ldrh	r2, [r7, #2]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a94:	e003      	b.n	8004a9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a96:	887b      	ldrh	r3, [r7, #2]
 8004a98:	041a      	lsls	r2, r3, #16
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	619a      	str	r2, [r3, #24]
}
 8004a9e:	bf00      	nop
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
	...

08004aac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e12b      	b.n	8004d16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d106      	bne.n	8004ad8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f7fe fdfe 	bl	80036d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2224      	movs	r2, #36	@ 0x24
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f022 0201 	bic.w	r2, r2, #1
 8004aee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004afe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b10:	f001 ff06 	bl	8006920 <HAL_RCC_GetPCLK1Freq>
 8004b14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	4a81      	ldr	r2, [pc, #516]	@ (8004d20 <HAL_I2C_Init+0x274>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d807      	bhi.n	8004b30 <HAL_I2C_Init+0x84>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	4a80      	ldr	r2, [pc, #512]	@ (8004d24 <HAL_I2C_Init+0x278>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	bf94      	ite	ls
 8004b28:	2301      	movls	r3, #1
 8004b2a:	2300      	movhi	r3, #0
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	e006      	b.n	8004b3e <HAL_I2C_Init+0x92>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	4a7d      	ldr	r2, [pc, #500]	@ (8004d28 <HAL_I2C_Init+0x27c>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	bf94      	ite	ls
 8004b38:	2301      	movls	r3, #1
 8004b3a:	2300      	movhi	r3, #0
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e0e7      	b.n	8004d16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	4a78      	ldr	r2, [pc, #480]	@ (8004d2c <HAL_I2C_Init+0x280>)
 8004b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4e:	0c9b      	lsrs	r3, r3, #18
 8004b50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
 8004b6c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	4a6a      	ldr	r2, [pc, #424]	@ (8004d20 <HAL_I2C_Init+0x274>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d802      	bhi.n	8004b80 <HAL_I2C_Init+0xd4>
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	e009      	b.n	8004b94 <HAL_I2C_Init+0xe8>
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004b86:	fb02 f303 	mul.w	r3, r2, r3
 8004b8a:	4a69      	ldr	r2, [pc, #420]	@ (8004d30 <HAL_I2C_Init+0x284>)
 8004b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b90:	099b      	lsrs	r3, r3, #6
 8004b92:	3301      	adds	r3, #1
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	6812      	ldr	r2, [r2, #0]
 8004b98:	430b      	orrs	r3, r1
 8004b9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004ba6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	495c      	ldr	r1, [pc, #368]	@ (8004d20 <HAL_I2C_Init+0x274>)
 8004bb0:	428b      	cmp	r3, r1
 8004bb2:	d819      	bhi.n	8004be8 <HAL_I2C_Init+0x13c>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	1e59      	subs	r1, r3, #1
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	005b      	lsls	r3, r3, #1
 8004bbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bc2:	1c59      	adds	r1, r3, #1
 8004bc4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004bc8:	400b      	ands	r3, r1
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00a      	beq.n	8004be4 <HAL_I2C_Init+0x138>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	1e59      	subs	r1, r3, #1
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	005b      	lsls	r3, r3, #1
 8004bd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bdc:	3301      	adds	r3, #1
 8004bde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004be2:	e051      	b.n	8004c88 <HAL_I2C_Init+0x1dc>
 8004be4:	2304      	movs	r3, #4
 8004be6:	e04f      	b.n	8004c88 <HAL_I2C_Init+0x1dc>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d111      	bne.n	8004c14 <HAL_I2C_Init+0x168>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	1e58      	subs	r0, r3, #1
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6859      	ldr	r1, [r3, #4]
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	440b      	add	r3, r1
 8004bfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c02:	3301      	adds	r3, #1
 8004c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	bf0c      	ite	eq
 8004c0c:	2301      	moveq	r3, #1
 8004c0e:	2300      	movne	r3, #0
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	e012      	b.n	8004c3a <HAL_I2C_Init+0x18e>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	1e58      	subs	r0, r3, #1
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6859      	ldr	r1, [r3, #4]
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	440b      	add	r3, r1
 8004c22:	0099      	lsls	r1, r3, #2
 8004c24:	440b      	add	r3, r1
 8004c26:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	bf0c      	ite	eq
 8004c34:	2301      	moveq	r3, #1
 8004c36:	2300      	movne	r3, #0
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d001      	beq.n	8004c42 <HAL_I2C_Init+0x196>
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e022      	b.n	8004c88 <HAL_I2C_Init+0x1dc>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10e      	bne.n	8004c68 <HAL_I2C_Init+0x1bc>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	1e58      	subs	r0, r3, #1
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6859      	ldr	r1, [r3, #4]
 8004c52:	460b      	mov	r3, r1
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	440b      	add	r3, r1
 8004c58:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c66:	e00f      	b.n	8004c88 <HAL_I2C_Init+0x1dc>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	1e58      	subs	r0, r3, #1
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6859      	ldr	r1, [r3, #4]
 8004c70:	460b      	mov	r3, r1
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	440b      	add	r3, r1
 8004c76:	0099      	lsls	r1, r3, #2
 8004c78:	440b      	add	r3, r1
 8004c7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c7e:	3301      	adds	r3, #1
 8004c80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c88:	6879      	ldr	r1, [r7, #4]
 8004c8a:	6809      	ldr	r1, [r1, #0]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	69da      	ldr	r2, [r3, #28]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004cb6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	6911      	ldr	r1, [r2, #16]
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	68d2      	ldr	r2, [r2, #12]
 8004cc2:	4311      	orrs	r1, r2
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	6812      	ldr	r2, [r2, #0]
 8004cc8:	430b      	orrs	r3, r1
 8004cca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	695a      	ldr	r2, [r3, #20]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f042 0201 	orr.w	r2, r2, #1
 8004cf6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2220      	movs	r2, #32
 8004d02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	000186a0 	.word	0x000186a0
 8004d24:	001e847f 	.word	0x001e847f
 8004d28:	003d08ff 	.word	0x003d08ff
 8004d2c:	431bde83 	.word	0x431bde83
 8004d30:	10624dd3 	.word	0x10624dd3

08004d34 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b088      	sub	sp, #32
 8004d38:	af02      	add	r7, sp, #8
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	4608      	mov	r0, r1
 8004d3e:	4611      	mov	r1, r2
 8004d40:	461a      	mov	r2, r3
 8004d42:	4603      	mov	r3, r0
 8004d44:	817b      	strh	r3, [r7, #10]
 8004d46:	460b      	mov	r3, r1
 8004d48:	813b      	strh	r3, [r7, #8]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d4e:	f7ff fa23 	bl	8004198 <HAL_GetTick>
 8004d52:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b20      	cmp	r3, #32
 8004d5e:	f040 80d9 	bne.w	8004f14 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	9300      	str	r3, [sp, #0]
 8004d66:	2319      	movs	r3, #25
 8004d68:	2201      	movs	r2, #1
 8004d6a:	496d      	ldr	r1, [pc, #436]	@ (8004f20 <HAL_I2C_Mem_Write+0x1ec>)
 8004d6c:	68f8      	ldr	r0, [r7, #12]
 8004d6e:	f000 fc8b 	bl	8005688 <I2C_WaitOnFlagUntilTimeout>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d001      	beq.n	8004d7c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004d78:	2302      	movs	r3, #2
 8004d7a:	e0cc      	b.n	8004f16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d101      	bne.n	8004d8a <HAL_I2C_Mem_Write+0x56>
 8004d86:	2302      	movs	r3, #2
 8004d88:	e0c5      	b.n	8004f16 <HAL_I2C_Mem_Write+0x1e2>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0301 	and.w	r3, r3, #1
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d007      	beq.n	8004db0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f042 0201 	orr.w	r2, r2, #1
 8004dae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004dbe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2221      	movs	r2, #33	@ 0x21
 8004dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2240      	movs	r2, #64	@ 0x40
 8004dcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6a3a      	ldr	r2, [r7, #32]
 8004dda:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004de0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	4a4d      	ldr	r2, [pc, #308]	@ (8004f24 <HAL_I2C_Mem_Write+0x1f0>)
 8004df0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004df2:	88f8      	ldrh	r0, [r7, #6]
 8004df4:	893a      	ldrh	r2, [r7, #8]
 8004df6:	8979      	ldrh	r1, [r7, #10]
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	9301      	str	r3, [sp, #4]
 8004dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dfe:	9300      	str	r3, [sp, #0]
 8004e00:	4603      	mov	r3, r0
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f000 fac2 	bl	800538c <I2C_RequestMemoryWrite>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d052      	beq.n	8004eb4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e081      	b.n	8004f16 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f000 fd50 	bl	80058bc <I2C_WaitOnTXEFlagUntilTimeout>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00d      	beq.n	8004e3e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e26:	2b04      	cmp	r3, #4
 8004e28:	d107      	bne.n	8004e3a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e06b      	b.n	8004f16 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e42:	781a      	ldrb	r2, [r3, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4e:	1c5a      	adds	r2, r3, #1
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	3b01      	subs	r3, #1
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	695b      	ldr	r3, [r3, #20]
 8004e74:	f003 0304 	and.w	r3, r3, #4
 8004e78:	2b04      	cmp	r3, #4
 8004e7a:	d11b      	bne.n	8004eb4 <HAL_I2C_Mem_Write+0x180>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d017      	beq.n	8004eb4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e88:	781a      	ldrb	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e94:	1c5a      	adds	r2, r3, #1
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	3b01      	subs	r3, #1
 8004eae:	b29a      	uxth	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1aa      	bne.n	8004e12 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f000 fd43 	bl	800594c <I2C_WaitOnBTFFlagUntilTimeout>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00d      	beq.n	8004ee8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed0:	2b04      	cmp	r3, #4
 8004ed2:	d107      	bne.n	8004ee4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ee2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e016      	b.n	8004f16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ef6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2220      	movs	r2, #32
 8004efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004f10:	2300      	movs	r3, #0
 8004f12:	e000      	b.n	8004f16 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004f14:	2302      	movs	r3, #2
  }
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3718      	adds	r7, #24
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	00100002 	.word	0x00100002
 8004f24:	ffff0000 	.word	0xffff0000

08004f28 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b08c      	sub	sp, #48	@ 0x30
 8004f2c:	af02      	add	r7, sp, #8
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	4608      	mov	r0, r1
 8004f32:	4611      	mov	r1, r2
 8004f34:	461a      	mov	r2, r3
 8004f36:	4603      	mov	r3, r0
 8004f38:	817b      	strh	r3, [r7, #10]
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	813b      	strh	r3, [r7, #8]
 8004f3e:	4613      	mov	r3, r2
 8004f40:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f42:	f7ff f929 	bl	8004198 <HAL_GetTick>
 8004f46:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	2b20      	cmp	r3, #32
 8004f52:	f040 8214 	bne.w	800537e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f58:	9300      	str	r3, [sp, #0]
 8004f5a:	2319      	movs	r3, #25
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	497b      	ldr	r1, [pc, #492]	@ (800514c <HAL_I2C_Mem_Read+0x224>)
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f000 fb91 	bl	8005688 <I2C_WaitOnFlagUntilTimeout>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d001      	beq.n	8004f70 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	e207      	b.n	8005380 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d101      	bne.n	8004f7e <HAL_I2C_Mem_Read+0x56>
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	e200      	b.n	8005380 <HAL_I2C_Mem_Read+0x458>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d007      	beq.n	8004fa4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f042 0201 	orr.w	r2, r2, #1
 8004fa2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004fb2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2222      	movs	r2, #34	@ 0x22
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2240      	movs	r2, #64	@ 0x40
 8004fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004fd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	4a5b      	ldr	r2, [pc, #364]	@ (8005150 <HAL_I2C_Mem_Read+0x228>)
 8004fe4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004fe6:	88f8      	ldrh	r0, [r7, #6]
 8004fe8:	893a      	ldrh	r2, [r7, #8]
 8004fea:	8979      	ldrh	r1, [r7, #10]
 8004fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fee:	9301      	str	r3, [sp, #4]
 8004ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f000 fa5e 	bl	80054b8 <I2C_RequestMemoryRead>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d001      	beq.n	8005006 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e1bc      	b.n	8005380 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800500a:	2b00      	cmp	r3, #0
 800500c:	d113      	bne.n	8005036 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800500e:	2300      	movs	r3, #0
 8005010:	623b      	str	r3, [r7, #32]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	695b      	ldr	r3, [r3, #20]
 8005018:	623b      	str	r3, [r7, #32]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	623b      	str	r3, [r7, #32]
 8005022:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005032:	601a      	str	r2, [r3, #0]
 8005034:	e190      	b.n	8005358 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800503a:	2b01      	cmp	r3, #1
 800503c:	d11b      	bne.n	8005076 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800504c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800504e:	2300      	movs	r3, #0
 8005050:	61fb      	str	r3, [r7, #28]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	695b      	ldr	r3, [r3, #20]
 8005058:	61fb      	str	r3, [r7, #28]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	61fb      	str	r3, [r7, #28]
 8005062:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	e170      	b.n	8005358 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800507a:	2b02      	cmp	r3, #2
 800507c:	d11b      	bne.n	80050b6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800508c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800509c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800509e:	2300      	movs	r3, #0
 80050a0:	61bb      	str	r3, [r7, #24]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	61bb      	str	r3, [r7, #24]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	699b      	ldr	r3, [r3, #24]
 80050b0:	61bb      	str	r3, [r7, #24]
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	e150      	b.n	8005358 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050b6:	2300      	movs	r3, #0
 80050b8:	617b      	str	r3, [r7, #20]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	617b      	str	r3, [r7, #20]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	617b      	str	r3, [r7, #20]
 80050ca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80050cc:	e144      	b.n	8005358 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050d2:	2b03      	cmp	r3, #3
 80050d4:	f200 80f1 	bhi.w	80052ba <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d123      	bne.n	8005128 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050e2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f000 fc79 	bl	80059dc <I2C_WaitOnRXNEFlagUntilTimeout>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d001      	beq.n	80050f4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e145      	b.n	8005380 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	691a      	ldr	r2, [r3, #16]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050fe:	b2d2      	uxtb	r2, r2
 8005100:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005106:	1c5a      	adds	r2, r3, #1
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005110:	3b01      	subs	r3, #1
 8005112:	b29a      	uxth	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800511c:	b29b      	uxth	r3, r3
 800511e:	3b01      	subs	r3, #1
 8005120:	b29a      	uxth	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005126:	e117      	b.n	8005358 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800512c:	2b02      	cmp	r3, #2
 800512e:	d14e      	bne.n	80051ce <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005136:	2200      	movs	r2, #0
 8005138:	4906      	ldr	r1, [pc, #24]	@ (8005154 <HAL_I2C_Mem_Read+0x22c>)
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f000 faa4 	bl	8005688 <I2C_WaitOnFlagUntilTimeout>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d008      	beq.n	8005158 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e11a      	b.n	8005380 <HAL_I2C_Mem_Read+0x458>
 800514a:	bf00      	nop
 800514c:	00100002 	.word	0x00100002
 8005150:	ffff0000 	.word	0xffff0000
 8005154:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005166:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	691a      	ldr	r2, [r3, #16]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005172:	b2d2      	uxtb	r2, r2
 8005174:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800517a:	1c5a      	adds	r2, r3, #1
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005184:	3b01      	subs	r3, #1
 8005186:	b29a      	uxth	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005190:	b29b      	uxth	r3, r3
 8005192:	3b01      	subs	r3, #1
 8005194:	b29a      	uxth	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	691a      	ldr	r2, [r3, #16]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a4:	b2d2      	uxtb	r2, r2
 80051a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ac:	1c5a      	adds	r2, r3, #1
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051b6:	3b01      	subs	r3, #1
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	3b01      	subs	r3, #1
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80051cc:	e0c4      	b.n	8005358 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051d4:	2200      	movs	r2, #0
 80051d6:	496c      	ldr	r1, [pc, #432]	@ (8005388 <HAL_I2C_Mem_Read+0x460>)
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f000 fa55 	bl	8005688 <I2C_WaitOnFlagUntilTimeout>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d001      	beq.n	80051e8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e0cb      	b.n	8005380 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	691a      	ldr	r2, [r3, #16]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005202:	b2d2      	uxtb	r2, r2
 8005204:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520a:	1c5a      	adds	r2, r3, #1
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005214:	3b01      	subs	r3, #1
 8005216:	b29a      	uxth	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005220:	b29b      	uxth	r3, r3
 8005222:	3b01      	subs	r3, #1
 8005224:	b29a      	uxth	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800522a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522c:	9300      	str	r3, [sp, #0]
 800522e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005230:	2200      	movs	r2, #0
 8005232:	4955      	ldr	r1, [pc, #340]	@ (8005388 <HAL_I2C_Mem_Read+0x460>)
 8005234:	68f8      	ldr	r0, [r7, #12]
 8005236:	f000 fa27 	bl	8005688 <I2C_WaitOnFlagUntilTimeout>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d001      	beq.n	8005244 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e09d      	b.n	8005380 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005252:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	691a      	ldr	r2, [r3, #16]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800525e:	b2d2      	uxtb	r2, r2
 8005260:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005270:	3b01      	subs	r3, #1
 8005272:	b29a      	uxth	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800527c:	b29b      	uxth	r3, r3
 800527e:	3b01      	subs	r3, #1
 8005280:	b29a      	uxth	r2, r3
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	691a      	ldr	r2, [r3, #16]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005290:	b2d2      	uxtb	r2, r2
 8005292:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005298:	1c5a      	adds	r2, r3, #1
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052a2:	3b01      	subs	r3, #1
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	3b01      	subs	r3, #1
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80052b8:	e04e      	b.n	8005358 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052bc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f000 fb8c 	bl	80059dc <I2C_WaitOnRXNEFlagUntilTimeout>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e058      	b.n	8005380 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	691a      	ldr	r2, [r3, #16]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d8:	b2d2      	uxtb	r2, r2
 80052da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e0:	1c5a      	adds	r2, r3, #1
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052ea:	3b01      	subs	r3, #1
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	3b01      	subs	r3, #1
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	f003 0304 	and.w	r3, r3, #4
 800530a:	2b04      	cmp	r3, #4
 800530c:	d124      	bne.n	8005358 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005312:	2b03      	cmp	r3, #3
 8005314:	d107      	bne.n	8005326 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005324:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	691a      	ldr	r2, [r3, #16]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005330:	b2d2      	uxtb	r2, r2
 8005332:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005338:	1c5a      	adds	r2, r3, #1
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005342:	3b01      	subs	r3, #1
 8005344:	b29a      	uxth	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800534e:	b29b      	uxth	r3, r3
 8005350:	3b01      	subs	r3, #1
 8005352:	b29a      	uxth	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800535c:	2b00      	cmp	r3, #0
 800535e:	f47f aeb6 	bne.w	80050ce <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2220      	movs	r2, #32
 8005366:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800537a:	2300      	movs	r3, #0
 800537c:	e000      	b.n	8005380 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800537e:	2302      	movs	r3, #2
  }
}
 8005380:	4618      	mov	r0, r3
 8005382:	3728      	adds	r7, #40	@ 0x28
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	00010004 	.word	0x00010004

0800538c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b088      	sub	sp, #32
 8005390:	af02      	add	r7, sp, #8
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	4608      	mov	r0, r1
 8005396:	4611      	mov	r1, r2
 8005398:	461a      	mov	r2, r3
 800539a:	4603      	mov	r3, r0
 800539c:	817b      	strh	r3, [r7, #10]
 800539e:	460b      	mov	r3, r1
 80053a0:	813b      	strh	r3, [r7, #8]
 80053a2:	4613      	mov	r3, r2
 80053a4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b8:	9300      	str	r3, [sp, #0]
 80053ba:	6a3b      	ldr	r3, [r7, #32]
 80053bc:	2200      	movs	r2, #0
 80053be:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f000 f960 	bl	8005688 <I2C_WaitOnFlagUntilTimeout>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00d      	beq.n	80053ea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053dc:	d103      	bne.n	80053e6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e05f      	b.n	80054aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053ea:	897b      	ldrh	r3, [r7, #10]
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	461a      	mov	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80053f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fc:	6a3a      	ldr	r2, [r7, #32]
 80053fe:	492d      	ldr	r1, [pc, #180]	@ (80054b4 <I2C_RequestMemoryWrite+0x128>)
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f000 f9bb 	bl	800577c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d001      	beq.n	8005410 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e04c      	b.n	80054aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005410:	2300      	movs	r3, #0
 8005412:	617b      	str	r3, [r7, #20]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	617b      	str	r3, [r7, #20]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	617b      	str	r3, [r7, #20]
 8005424:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005426:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005428:	6a39      	ldr	r1, [r7, #32]
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f000 fa46 	bl	80058bc <I2C_WaitOnTXEFlagUntilTimeout>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00d      	beq.n	8005452 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800543a:	2b04      	cmp	r3, #4
 800543c:	d107      	bne.n	800544e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800544c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e02b      	b.n	80054aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005452:	88fb      	ldrh	r3, [r7, #6]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d105      	bne.n	8005464 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005458:	893b      	ldrh	r3, [r7, #8]
 800545a:	b2da      	uxtb	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	611a      	str	r2, [r3, #16]
 8005462:	e021      	b.n	80054a8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005464:	893b      	ldrh	r3, [r7, #8]
 8005466:	0a1b      	lsrs	r3, r3, #8
 8005468:	b29b      	uxth	r3, r3
 800546a:	b2da      	uxtb	r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005472:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005474:	6a39      	ldr	r1, [r7, #32]
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f000 fa20 	bl	80058bc <I2C_WaitOnTXEFlagUntilTimeout>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00d      	beq.n	800549e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005486:	2b04      	cmp	r3, #4
 8005488:	d107      	bne.n	800549a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005498:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e005      	b.n	80054aa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800549e:	893b      	ldrh	r3, [r7, #8]
 80054a0:	b2da      	uxtb	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3718      	adds	r7, #24
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	00010002 	.word	0x00010002

080054b8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b088      	sub	sp, #32
 80054bc:	af02      	add	r7, sp, #8
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	4608      	mov	r0, r1
 80054c2:	4611      	mov	r1, r2
 80054c4:	461a      	mov	r2, r3
 80054c6:	4603      	mov	r3, r0
 80054c8:	817b      	strh	r3, [r7, #10]
 80054ca:	460b      	mov	r3, r1
 80054cc:	813b      	strh	r3, [r7, #8]
 80054ce:	4613      	mov	r3, r2
 80054d0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80054e0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	6a3b      	ldr	r3, [r7, #32]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f000 f8c2 	bl	8005688 <I2C_WaitOnFlagUntilTimeout>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00d      	beq.n	8005526 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005514:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005518:	d103      	bne.n	8005522 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005520:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e0aa      	b.n	800567c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005526:	897b      	ldrh	r3, [r7, #10]
 8005528:	b2db      	uxtb	r3, r3
 800552a:	461a      	mov	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005534:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005538:	6a3a      	ldr	r2, [r7, #32]
 800553a:	4952      	ldr	r1, [pc, #328]	@ (8005684 <I2C_RequestMemoryRead+0x1cc>)
 800553c:	68f8      	ldr	r0, [r7, #12]
 800553e:	f000 f91d 	bl	800577c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d001      	beq.n	800554c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e097      	b.n	800567c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800554c:	2300      	movs	r3, #0
 800554e:	617b      	str	r3, [r7, #20]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	617b      	str	r3, [r7, #20]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	617b      	str	r3, [r7, #20]
 8005560:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005562:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005564:	6a39      	ldr	r1, [r7, #32]
 8005566:	68f8      	ldr	r0, [r7, #12]
 8005568:	f000 f9a8 	bl	80058bc <I2C_WaitOnTXEFlagUntilTimeout>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00d      	beq.n	800558e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005576:	2b04      	cmp	r3, #4
 8005578:	d107      	bne.n	800558a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005588:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e076      	b.n	800567c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800558e:	88fb      	ldrh	r3, [r7, #6]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d105      	bne.n	80055a0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005594:	893b      	ldrh	r3, [r7, #8]
 8005596:	b2da      	uxtb	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	611a      	str	r2, [r3, #16]
 800559e:	e021      	b.n	80055e4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80055a0:	893b      	ldrh	r3, [r7, #8]
 80055a2:	0a1b      	lsrs	r3, r3, #8
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	b2da      	uxtb	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055b0:	6a39      	ldr	r1, [r7, #32]
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f000 f982 	bl	80058bc <I2C_WaitOnTXEFlagUntilTimeout>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00d      	beq.n	80055da <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055c2:	2b04      	cmp	r3, #4
 80055c4:	d107      	bne.n	80055d6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e050      	b.n	800567c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055da:	893b      	ldrh	r3, [r7, #8]
 80055dc:	b2da      	uxtb	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055e6:	6a39      	ldr	r1, [r7, #32]
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f000 f967 	bl	80058bc <I2C_WaitOnTXEFlagUntilTimeout>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d00d      	beq.n	8005610 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f8:	2b04      	cmp	r3, #4
 80055fa:	d107      	bne.n	800560c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800560a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e035      	b.n	800567c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800561e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005622:	9300      	str	r3, [sp, #0]
 8005624:	6a3b      	ldr	r3, [r7, #32]
 8005626:	2200      	movs	r2, #0
 8005628:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800562c:	68f8      	ldr	r0, [r7, #12]
 800562e:	f000 f82b 	bl	8005688 <I2C_WaitOnFlagUntilTimeout>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00d      	beq.n	8005654 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005642:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005646:	d103      	bne.n	8005650 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800564e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e013      	b.n	800567c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005654:	897b      	ldrh	r3, [r7, #10]
 8005656:	b2db      	uxtb	r3, r3
 8005658:	f043 0301 	orr.w	r3, r3, #1
 800565c:	b2da      	uxtb	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005666:	6a3a      	ldr	r2, [r7, #32]
 8005668:	4906      	ldr	r1, [pc, #24]	@ (8005684 <I2C_RequestMemoryRead+0x1cc>)
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f000 f886 	bl	800577c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d001      	beq.n	800567a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e000      	b.n	800567c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3718      	adds	r7, #24
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	00010002 	.word	0x00010002

08005688 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	603b      	str	r3, [r7, #0]
 8005694:	4613      	mov	r3, r2
 8005696:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005698:	e048      	b.n	800572c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a0:	d044      	beq.n	800572c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056a2:	f7fe fd79 	bl	8004198 <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	683a      	ldr	r2, [r7, #0]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d302      	bcc.n	80056b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d139      	bne.n	800572c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	0c1b      	lsrs	r3, r3, #16
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d10d      	bne.n	80056de <I2C_WaitOnFlagUntilTimeout+0x56>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	695b      	ldr	r3, [r3, #20]
 80056c8:	43da      	mvns	r2, r3
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	4013      	ands	r3, r2
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	bf0c      	ite	eq
 80056d4:	2301      	moveq	r3, #1
 80056d6:	2300      	movne	r3, #0
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	461a      	mov	r2, r3
 80056dc:	e00c      	b.n	80056f8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	43da      	mvns	r2, r3
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	4013      	ands	r3, r2
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	bf0c      	ite	eq
 80056f0:	2301      	moveq	r3, #1
 80056f2:	2300      	movne	r3, #0
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	461a      	mov	r2, r3
 80056f8:	79fb      	ldrb	r3, [r7, #7]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d116      	bne.n	800572c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2220      	movs	r2, #32
 8005708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005718:	f043 0220 	orr.w	r2, r3, #32
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e023      	b.n	8005774 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	0c1b      	lsrs	r3, r3, #16
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b01      	cmp	r3, #1
 8005734:	d10d      	bne.n	8005752 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	695b      	ldr	r3, [r3, #20]
 800573c:	43da      	mvns	r2, r3
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	4013      	ands	r3, r2
 8005742:	b29b      	uxth	r3, r3
 8005744:	2b00      	cmp	r3, #0
 8005746:	bf0c      	ite	eq
 8005748:	2301      	moveq	r3, #1
 800574a:	2300      	movne	r3, #0
 800574c:	b2db      	uxtb	r3, r3
 800574e:	461a      	mov	r2, r3
 8005750:	e00c      	b.n	800576c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	699b      	ldr	r3, [r3, #24]
 8005758:	43da      	mvns	r2, r3
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	4013      	ands	r3, r2
 800575e:	b29b      	uxth	r3, r3
 8005760:	2b00      	cmp	r3, #0
 8005762:	bf0c      	ite	eq
 8005764:	2301      	moveq	r3, #1
 8005766:	2300      	movne	r3, #0
 8005768:	b2db      	uxtb	r3, r3
 800576a:	461a      	mov	r2, r3
 800576c:	79fb      	ldrb	r3, [r7, #7]
 800576e:	429a      	cmp	r2, r3
 8005770:	d093      	beq.n	800569a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3710      	adds	r7, #16
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
 8005788:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800578a:	e071      	b.n	8005870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005796:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800579a:	d123      	bne.n	80057e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057aa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80057b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2220      	movs	r2, #32
 80057c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d0:	f043 0204 	orr.w	r2, r3, #4
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e067      	b.n	80058b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ea:	d041      	beq.n	8005870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ec:	f7fe fcd4 	bl	8004198 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d302      	bcc.n	8005802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d136      	bne.n	8005870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	0c1b      	lsrs	r3, r3, #16
 8005806:	b2db      	uxtb	r3, r3
 8005808:	2b01      	cmp	r3, #1
 800580a:	d10c      	bne.n	8005826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	43da      	mvns	r2, r3
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	4013      	ands	r3, r2
 8005818:	b29b      	uxth	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	bf14      	ite	ne
 800581e:	2301      	movne	r3, #1
 8005820:	2300      	moveq	r3, #0
 8005822:	b2db      	uxtb	r3, r3
 8005824:	e00b      	b.n	800583e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	43da      	mvns	r2, r3
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	4013      	ands	r3, r2
 8005832:	b29b      	uxth	r3, r3
 8005834:	2b00      	cmp	r3, #0
 8005836:	bf14      	ite	ne
 8005838:	2301      	movne	r3, #1
 800583a:	2300      	moveq	r3, #0
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d016      	beq.n	8005870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2220      	movs	r2, #32
 800584c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800585c:	f043 0220 	orr.w	r2, r3, #32
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e021      	b.n	80058b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	0c1b      	lsrs	r3, r3, #16
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b01      	cmp	r3, #1
 8005878:	d10c      	bne.n	8005894 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	695b      	ldr	r3, [r3, #20]
 8005880:	43da      	mvns	r2, r3
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	4013      	ands	r3, r2
 8005886:	b29b      	uxth	r3, r3
 8005888:	2b00      	cmp	r3, #0
 800588a:	bf14      	ite	ne
 800588c:	2301      	movne	r3, #1
 800588e:	2300      	moveq	r3, #0
 8005890:	b2db      	uxtb	r3, r3
 8005892:	e00b      	b.n	80058ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	43da      	mvns	r2, r3
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	4013      	ands	r3, r2
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	bf14      	ite	ne
 80058a6:	2301      	movne	r3, #1
 80058a8:	2300      	moveq	r3, #0
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f47f af6d 	bne.w	800578c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058c8:	e034      	b.n	8005934 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f000 f8e3 	bl	8005a96 <I2C_IsAcknowledgeFailed>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e034      	b.n	8005944 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e0:	d028      	beq.n	8005934 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058e2:	f7fe fc59 	bl	8004198 <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d302      	bcc.n	80058f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d11d      	bne.n	8005934 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005902:	2b80      	cmp	r3, #128	@ 0x80
 8005904:	d016      	beq.n	8005934 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2200      	movs	r2, #0
 800590a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2220      	movs	r2, #32
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005920:	f043 0220 	orr.w	r2, r3, #32
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e007      	b.n	8005944 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800593e:	2b80      	cmp	r3, #128	@ 0x80
 8005940:	d1c3      	bne.n	80058ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3710      	adds	r7, #16
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005958:	e034      	b.n	80059c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	f000 f89b 	bl	8005a96 <I2C_IsAcknowledgeFailed>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d001      	beq.n	800596a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e034      	b.n	80059d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005970:	d028      	beq.n	80059c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005972:	f7fe fc11 	bl	8004198 <HAL_GetTick>
 8005976:	4602      	mov	r2, r0
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	429a      	cmp	r2, r3
 8005980:	d302      	bcc.n	8005988 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d11d      	bne.n	80059c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	f003 0304 	and.w	r3, r3, #4
 8005992:	2b04      	cmp	r3, #4
 8005994:	d016      	beq.n	80059c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2220      	movs	r2, #32
 80059a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b0:	f043 0220 	orr.w	r2, r3, #32
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e007      	b.n	80059d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	f003 0304 	and.w	r3, r3, #4
 80059ce:	2b04      	cmp	r3, #4
 80059d0:	d1c3      	bne.n	800595a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3710      	adds	r7, #16
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059e8:	e049      	b.n	8005a7e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	695b      	ldr	r3, [r3, #20]
 80059f0:	f003 0310 	and.w	r3, r3, #16
 80059f4:	2b10      	cmp	r3, #16
 80059f6:	d119      	bne.n	8005a2c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f06f 0210 	mvn.w	r2, #16
 8005a00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2220      	movs	r2, #32
 8005a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e030      	b.n	8005a8e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a2c:	f7fe fbb4 	bl	8004198 <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d302      	bcc.n	8005a42 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d11d      	bne.n	8005a7e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	695b      	ldr	r3, [r3, #20]
 8005a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a4c:	2b40      	cmp	r3, #64	@ 0x40
 8005a4e:	d016      	beq.n	8005a7e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2220      	movs	r2, #32
 8005a5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a6a:	f043 0220 	orr.w	r2, r3, #32
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e007      	b.n	8005a8e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	695b      	ldr	r3, [r3, #20]
 8005a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a88:	2b40      	cmp	r3, #64	@ 0x40
 8005a8a:	d1ae      	bne.n	80059ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a96:	b480      	push	{r7}
 8005a98:	b083      	sub	sp, #12
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005aa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005aac:	d11b      	bne.n	8005ae6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005ab6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ad2:	f043 0204 	orr.w	r2, r3, #4
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e000      	b.n	8005ae8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d101      	bne.n	8005b06 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e0bf      	b.n	8005c86 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d106      	bne.n	8005b20 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7fd fe44 	bl	80037a8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2202      	movs	r2, #2
 8005b24:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	699a      	ldr	r2, [r3, #24]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8005b36:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	6999      	ldr	r1, [r3, #24]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685a      	ldr	r2, [r3, #4]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005b4c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	430a      	orrs	r2, r1
 8005b5a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6899      	ldr	r1, [r3, #8]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	4b4a      	ldr	r3, [pc, #296]	@ (8005c90 <HAL_LTDC_Init+0x19c>)
 8005b68:	400b      	ands	r3, r1
 8005b6a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	695b      	ldr	r3, [r3, #20]
 8005b70:	041b      	lsls	r3, r3, #16
 8005b72:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	6899      	ldr	r1, [r3, #8]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	699a      	ldr	r2, [r3, #24]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	431a      	orrs	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	430a      	orrs	r2, r1
 8005b88:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68d9      	ldr	r1, [r3, #12]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	4b3e      	ldr	r3, [pc, #248]	@ (8005c90 <HAL_LTDC_Init+0x19c>)
 8005b96:	400b      	ands	r3, r1
 8005b98:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	69db      	ldr	r3, [r3, #28]
 8005b9e:	041b      	lsls	r3, r3, #16
 8005ba0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68d9      	ldr	r1, [r3, #12]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a1a      	ldr	r2, [r3, #32]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	431a      	orrs	r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6919      	ldr	r1, [r3, #16]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	4b33      	ldr	r3, [pc, #204]	@ (8005c90 <HAL_LTDC_Init+0x19c>)
 8005bc4:	400b      	ands	r3, r1
 8005bc6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bcc:	041b      	lsls	r3, r3, #16
 8005bce:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6919      	ldr	r1, [r3, #16]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	431a      	orrs	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	430a      	orrs	r2, r1
 8005be4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	6959      	ldr	r1, [r3, #20]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	4b27      	ldr	r3, [pc, #156]	@ (8005c90 <HAL_LTDC_Init+0x19c>)
 8005bf2:	400b      	ands	r3, r1
 8005bf4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bfa:	041b      	lsls	r3, r3, #16
 8005bfc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	6959      	ldr	r1, [r3, #20]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	431a      	orrs	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	430a      	orrs	r2, r1
 8005c12:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c1a:	021b      	lsls	r3, r3, #8
 8005c1c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005c24:	041b      	lsls	r3, r3, #16
 8005c26:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8005c36:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005c3e:	68ba      	ldr	r2, [r7, #8]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8005c4a:	431a      	orrs	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	430a      	orrs	r2, r1
 8005c52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f042 0206 	orr.w	r2, r2, #6
 8005c62:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	699a      	ldr	r2, [r3, #24]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f042 0201 	orr.w	r2, r2, #1
 8005c72:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3710      	adds	r7, #16
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	f000f800 	.word	0xf000f800

08005c94 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005c94:	b5b0      	push	{r4, r5, r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d101      	bne.n	8005cae <HAL_LTDC_ConfigLayer+0x1a>
 8005caa:	2302      	movs	r3, #2
 8005cac:	e02c      	b.n	8005d08 <HAL_LTDC_ConfigLayer+0x74>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2202      	movs	r2, #2
 8005cba:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2134      	movs	r1, #52	@ 0x34
 8005cc4:	fb01 f303 	mul.w	r3, r1, r3
 8005cc8:	4413      	add	r3, r2
 8005cca:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	4614      	mov	r4, r2
 8005cd2:	461d      	mov	r5, r3
 8005cd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005cd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005cd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005cda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005cdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005cde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ce0:	682b      	ldr	r3, [r5, #0]
 8005ce2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	68b9      	ldr	r1, [r7, #8]
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f000 f811 	bl	8005d10 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bdb0      	pop	{r4, r5, r7, pc}

08005d10 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b089      	sub	sp, #36	@ 0x24
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	685a      	ldr	r2, [r3, #4]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	0c1b      	lsrs	r3, r3, #16
 8005d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d2c:	4413      	add	r3, r2
 8005d2e:	041b      	lsls	r3, r3, #16
 8005d30:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	461a      	mov	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	01db      	lsls	r3, r3, #7
 8005d3c:	4413      	add	r3, r2
 8005d3e:	3384      	adds	r3, #132	@ 0x84
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	6812      	ldr	r2, [r2, #0]
 8005d46:	4611      	mov	r1, r2
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	01d2      	lsls	r2, r2, #7
 8005d4c:	440a      	add	r2, r1
 8005d4e:	3284      	adds	r2, #132	@ 0x84
 8005d50:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005d54:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	0c1b      	lsrs	r3, r3, #16
 8005d62:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005d66:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005d68:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4619      	mov	r1, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	01db      	lsls	r3, r3, #7
 8005d74:	440b      	add	r3, r1
 8005d76:	3384      	adds	r3, #132	@ 0x84
 8005d78:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005d7e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	68da      	ldr	r2, [r3, #12]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d8e:	4413      	add	r3, r2
 8005d90:	041b      	lsls	r3, r3, #16
 8005d92:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	461a      	mov	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	01db      	lsls	r3, r3, #7
 8005d9e:	4413      	add	r3, r2
 8005da0:	3384      	adds	r3, #132	@ 0x84
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	6812      	ldr	r2, [r2, #0]
 8005da8:	4611      	mov	r1, r2
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	01d2      	lsls	r2, r2, #7
 8005dae:	440a      	add	r2, r1
 8005db0:	3284      	adds	r2, #132	@ 0x84
 8005db2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005db6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	689a      	ldr	r2, [r3, #8]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005dc6:	4413      	add	r3, r2
 8005dc8:	1c5a      	adds	r2, r3, #1
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4619      	mov	r1, r3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	01db      	lsls	r3, r3, #7
 8005dd4:	440b      	add	r3, r1
 8005dd6:	3384      	adds	r3, #132	@ 0x84
 8005dd8:	4619      	mov	r1, r3
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	461a      	mov	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	01db      	lsls	r3, r3, #7
 8005dea:	4413      	add	r3, r2
 8005dec:	3384      	adds	r3, #132	@ 0x84
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	6812      	ldr	r2, [r2, #0]
 8005df4:	4611      	mov	r1, r2
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	01d2      	lsls	r2, r2, #7
 8005dfa:	440a      	add	r2, r1
 8005dfc:	3284      	adds	r2, #132	@ 0x84
 8005dfe:	f023 0307 	bic.w	r3, r3, #7
 8005e02:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	461a      	mov	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	01db      	lsls	r3, r3, #7
 8005e0e:	4413      	add	r3, r2
 8005e10:	3384      	adds	r3, #132	@ 0x84
 8005e12:	461a      	mov	r2, r3
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005e20:	021b      	lsls	r3, r3, #8
 8005e22:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005e2a:	041b      	lsls	r3, r3, #16
 8005e2c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	061b      	lsls	r3, r3, #24
 8005e34:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	01db      	lsls	r3, r3, #7
 8005e40:	4413      	add	r3, r2
 8005e42:	3384      	adds	r3, #132	@ 0x84
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	01db      	lsls	r3, r3, #7
 8005e50:	4413      	add	r3, r2
 8005e52:	3384      	adds	r3, #132	@ 0x84
 8005e54:	461a      	mov	r2, r3
 8005e56:	2300      	movs	r3, #0
 8005e58:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005e60:	461a      	mov	r2, r3
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	431a      	orrs	r2, r3
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	431a      	orrs	r2, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4619      	mov	r1, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	01db      	lsls	r3, r3, #7
 8005e74:	440b      	add	r3, r1
 8005e76:	3384      	adds	r3, #132	@ 0x84
 8005e78:	4619      	mov	r1, r3
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	461a      	mov	r2, r3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	01db      	lsls	r3, r3, #7
 8005e8a:	4413      	add	r3, r2
 8005e8c:	3384      	adds	r3, #132	@ 0x84
 8005e8e:	695b      	ldr	r3, [r3, #20]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	6812      	ldr	r2, [r2, #0]
 8005e94:	4611      	mov	r1, r2
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	01d2      	lsls	r2, r2, #7
 8005e9a:	440a      	add	r2, r1
 8005e9c:	3284      	adds	r2, #132	@ 0x84
 8005e9e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005ea2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	01db      	lsls	r3, r3, #7
 8005eae:	4413      	add	r3, r2
 8005eb0:	3384      	adds	r3, #132	@ 0x84
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	695b      	ldr	r3, [r3, #20]
 8005eb8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	01db      	lsls	r3, r3, #7
 8005ec4:	4413      	add	r3, r2
 8005ec6:	3384      	adds	r3, #132	@ 0x84
 8005ec8:	69db      	ldr	r3, [r3, #28]
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	6812      	ldr	r2, [r2, #0]
 8005ece:	4611      	mov	r1, r2
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	01d2      	lsls	r2, r2, #7
 8005ed4:	440a      	add	r2, r1
 8005ed6:	3284      	adds	r2, #132	@ 0x84
 8005ed8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005edc:	f023 0307 	bic.w	r3, r3, #7
 8005ee0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	69da      	ldr	r2, [r3, #28]
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	68f9      	ldr	r1, [r7, #12]
 8005eec:	6809      	ldr	r1, [r1, #0]
 8005eee:	4608      	mov	r0, r1
 8005ef0:	6879      	ldr	r1, [r7, #4]
 8005ef2:	01c9      	lsls	r1, r1, #7
 8005ef4:	4401      	add	r1, r0
 8005ef6:	3184      	adds	r1, #132	@ 0x84
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	461a      	mov	r2, r3
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	01db      	lsls	r3, r3, #7
 8005f06:	4413      	add	r3, r2
 8005f08:	3384      	adds	r3, #132	@ 0x84
 8005f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	461a      	mov	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	01db      	lsls	r3, r3, #7
 8005f16:	4413      	add	r3, r2
 8005f18:	3384      	adds	r3, #132	@ 0x84
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	461a      	mov	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	01db      	lsls	r3, r3, #7
 8005f2a:	4413      	add	r3, r2
 8005f2c:	3384      	adds	r3, #132	@ 0x84
 8005f2e:	461a      	mov	r2, r3
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f34:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d102      	bne.n	8005f44 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005f3e:	2304      	movs	r3, #4
 8005f40:	61fb      	str	r3, [r7, #28]
 8005f42:	e01b      	b.n	8005f7c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d102      	bne.n	8005f52 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	61fb      	str	r3, [r7, #28]
 8005f50:	e014      	b.n	8005f7c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	2b04      	cmp	r3, #4
 8005f58:	d00b      	beq.n	8005f72 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d007      	beq.n	8005f72 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005f66:	2b03      	cmp	r3, #3
 8005f68:	d003      	beq.n	8005f72 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005f6e:	2b07      	cmp	r3, #7
 8005f70:	d102      	bne.n	8005f78 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005f72:	2302      	movs	r3, #2
 8005f74:	61fb      	str	r3, [r7, #28]
 8005f76:	e001      	b.n	8005f7c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	461a      	mov	r2, r3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	01db      	lsls	r3, r3, #7
 8005f86:	4413      	add	r3, r2
 8005f88:	3384      	adds	r3, #132	@ 0x84
 8005f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	6812      	ldr	r2, [r2, #0]
 8005f90:	4611      	mov	r1, r2
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	01d2      	lsls	r2, r2, #7
 8005f96:	440a      	add	r2, r1
 8005f98:	3284      	adds	r2, #132	@ 0x84
 8005f9a:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005f9e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fa4:	69fa      	ldr	r2, [r7, #28]
 8005fa6:	fb02 f303 	mul.w	r3, r2, r3
 8005faa:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	6859      	ldr	r1, [r3, #4]
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	1acb      	subs	r3, r1, r3
 8005fb6:	69f9      	ldr	r1, [r7, #28]
 8005fb8:	fb01 f303 	mul.w	r3, r1, r3
 8005fbc:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005fbe:	68f9      	ldr	r1, [r7, #12]
 8005fc0:	6809      	ldr	r1, [r1, #0]
 8005fc2:	4608      	mov	r0, r1
 8005fc4:	6879      	ldr	r1, [r7, #4]
 8005fc6:	01c9      	lsls	r1, r1, #7
 8005fc8:	4401      	add	r1, r0
 8005fca:	3184      	adds	r1, #132	@ 0x84
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	01db      	lsls	r3, r3, #7
 8005fda:	4413      	add	r3, r2
 8005fdc:	3384      	adds	r3, #132	@ 0x84
 8005fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	6812      	ldr	r2, [r2, #0]
 8005fe4:	4611      	mov	r1, r2
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	01d2      	lsls	r2, r2, #7
 8005fea:	440a      	add	r2, r1
 8005fec:	3284      	adds	r2, #132	@ 0x84
 8005fee:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005ff2:	f023 0307 	bic.w	r3, r3, #7
 8005ff6:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	01db      	lsls	r3, r3, #7
 8006002:	4413      	add	r3, r2
 8006004:	3384      	adds	r3, #132	@ 0x84
 8006006:	461a      	mov	r2, r3
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800600c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	461a      	mov	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	01db      	lsls	r3, r3, #7
 8006018:	4413      	add	r3, r2
 800601a:	3384      	adds	r3, #132	@ 0x84
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	6812      	ldr	r2, [r2, #0]
 8006022:	4611      	mov	r1, r2
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	01d2      	lsls	r2, r2, #7
 8006028:	440a      	add	r2, r1
 800602a:	3284      	adds	r2, #132	@ 0x84
 800602c:	f043 0301 	orr.w	r3, r3, #1
 8006030:	6013      	str	r3, [r2, #0]
}
 8006032:	bf00      	nop
 8006034:	3724      	adds	r7, #36	@ 0x24
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
	...

08006040 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b086      	sub	sp, #24
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d101      	bne.n	8006052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e267      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	2b00      	cmp	r3, #0
 800605c:	d075      	beq.n	800614a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800605e:	4b88      	ldr	r3, [pc, #544]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	f003 030c 	and.w	r3, r3, #12
 8006066:	2b04      	cmp	r3, #4
 8006068:	d00c      	beq.n	8006084 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800606a:	4b85      	ldr	r3, [pc, #532]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006072:	2b08      	cmp	r3, #8
 8006074:	d112      	bne.n	800609c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006076:	4b82      	ldr	r3, [pc, #520]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800607e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006082:	d10b      	bne.n	800609c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006084:	4b7e      	ldr	r3, [pc, #504]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d05b      	beq.n	8006148 <HAL_RCC_OscConfig+0x108>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d157      	bne.n	8006148 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e242      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060a4:	d106      	bne.n	80060b4 <HAL_RCC_OscConfig+0x74>
 80060a6:	4b76      	ldr	r3, [pc, #472]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a75      	ldr	r2, [pc, #468]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 80060ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060b0:	6013      	str	r3, [r2, #0]
 80060b2:	e01d      	b.n	80060f0 <HAL_RCC_OscConfig+0xb0>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80060bc:	d10c      	bne.n	80060d8 <HAL_RCC_OscConfig+0x98>
 80060be:	4b70      	ldr	r3, [pc, #448]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a6f      	ldr	r2, [pc, #444]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 80060c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80060c8:	6013      	str	r3, [r2, #0]
 80060ca:	4b6d      	ldr	r3, [pc, #436]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a6c      	ldr	r2, [pc, #432]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 80060d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060d4:	6013      	str	r3, [r2, #0]
 80060d6:	e00b      	b.n	80060f0 <HAL_RCC_OscConfig+0xb0>
 80060d8:	4b69      	ldr	r3, [pc, #420]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a68      	ldr	r2, [pc, #416]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 80060de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060e2:	6013      	str	r3, [r2, #0]
 80060e4:	4b66      	ldr	r3, [pc, #408]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a65      	ldr	r2, [pc, #404]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 80060ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80060ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d013      	beq.n	8006120 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060f8:	f7fe f84e 	bl	8004198 <HAL_GetTick>
 80060fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060fe:	e008      	b.n	8006112 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006100:	f7fe f84a 	bl	8004198 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	2b64      	cmp	r3, #100	@ 0x64
 800610c:	d901      	bls.n	8006112 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e207      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006112:	4b5b      	ldr	r3, [pc, #364]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d0f0      	beq.n	8006100 <HAL_RCC_OscConfig+0xc0>
 800611e:	e014      	b.n	800614a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006120:	f7fe f83a 	bl	8004198 <HAL_GetTick>
 8006124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006126:	e008      	b.n	800613a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006128:	f7fe f836 	bl	8004198 <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	2b64      	cmp	r3, #100	@ 0x64
 8006134:	d901      	bls.n	800613a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e1f3      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800613a:	4b51      	ldr	r3, [pc, #324]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1f0      	bne.n	8006128 <HAL_RCC_OscConfig+0xe8>
 8006146:	e000      	b.n	800614a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0302 	and.w	r3, r3, #2
 8006152:	2b00      	cmp	r3, #0
 8006154:	d063      	beq.n	800621e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006156:	4b4a      	ldr	r3, [pc, #296]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f003 030c 	and.w	r3, r3, #12
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00b      	beq.n	800617a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006162:	4b47      	ldr	r3, [pc, #284]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800616a:	2b08      	cmp	r3, #8
 800616c:	d11c      	bne.n	80061a8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800616e:	4b44      	ldr	r3, [pc, #272]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d116      	bne.n	80061a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800617a:	4b41      	ldr	r3, [pc, #260]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	2b00      	cmp	r3, #0
 8006184:	d005      	beq.n	8006192 <HAL_RCC_OscConfig+0x152>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	2b01      	cmp	r3, #1
 800618c:	d001      	beq.n	8006192 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e1c7      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006192:	4b3b      	ldr	r3, [pc, #236]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	00db      	lsls	r3, r3, #3
 80061a0:	4937      	ldr	r1, [pc, #220]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061a6:	e03a      	b.n	800621e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d020      	beq.n	80061f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80061b0:	4b34      	ldr	r3, [pc, #208]	@ (8006284 <HAL_RCC_OscConfig+0x244>)
 80061b2:	2201      	movs	r2, #1
 80061b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b6:	f7fd ffef 	bl	8004198 <HAL_GetTick>
 80061ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061bc:	e008      	b.n	80061d0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061be:	f7fd ffeb 	bl	8004198 <HAL_GetTick>
 80061c2:	4602      	mov	r2, r0
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d901      	bls.n	80061d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80061cc:	2303      	movs	r3, #3
 80061ce:	e1a8      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061d0:	4b2b      	ldr	r3, [pc, #172]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0302 	and.w	r3, r3, #2
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d0f0      	beq.n	80061be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061dc:	4b28      	ldr	r3, [pc, #160]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	00db      	lsls	r3, r3, #3
 80061ea:	4925      	ldr	r1, [pc, #148]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	600b      	str	r3, [r1, #0]
 80061f0:	e015      	b.n	800621e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061f2:	4b24      	ldr	r3, [pc, #144]	@ (8006284 <HAL_RCC_OscConfig+0x244>)
 80061f4:	2200      	movs	r2, #0
 80061f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061f8:	f7fd ffce 	bl	8004198 <HAL_GetTick>
 80061fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061fe:	e008      	b.n	8006212 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006200:	f7fd ffca 	bl	8004198 <HAL_GetTick>
 8006204:	4602      	mov	r2, r0
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	2b02      	cmp	r3, #2
 800620c:	d901      	bls.n	8006212 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e187      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006212:	4b1b      	ldr	r3, [pc, #108]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 0302 	and.w	r3, r3, #2
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1f0      	bne.n	8006200 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0308 	and.w	r3, r3, #8
 8006226:	2b00      	cmp	r3, #0
 8006228:	d036      	beq.n	8006298 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	695b      	ldr	r3, [r3, #20]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d016      	beq.n	8006260 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006232:	4b15      	ldr	r3, [pc, #84]	@ (8006288 <HAL_RCC_OscConfig+0x248>)
 8006234:	2201      	movs	r2, #1
 8006236:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006238:	f7fd ffae 	bl	8004198 <HAL_GetTick>
 800623c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800623e:	e008      	b.n	8006252 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006240:	f7fd ffaa 	bl	8004198 <HAL_GetTick>
 8006244:	4602      	mov	r2, r0
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	2b02      	cmp	r3, #2
 800624c:	d901      	bls.n	8006252 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e167      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006252:	4b0b      	ldr	r3, [pc, #44]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 8006254:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006256:	f003 0302 	and.w	r3, r3, #2
 800625a:	2b00      	cmp	r3, #0
 800625c:	d0f0      	beq.n	8006240 <HAL_RCC_OscConfig+0x200>
 800625e:	e01b      	b.n	8006298 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006260:	4b09      	ldr	r3, [pc, #36]	@ (8006288 <HAL_RCC_OscConfig+0x248>)
 8006262:	2200      	movs	r2, #0
 8006264:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006266:	f7fd ff97 	bl	8004198 <HAL_GetTick>
 800626a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800626c:	e00e      	b.n	800628c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800626e:	f7fd ff93 	bl	8004198 <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	2b02      	cmp	r3, #2
 800627a:	d907      	bls.n	800628c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e150      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
 8006280:	40023800 	.word	0x40023800
 8006284:	42470000 	.word	0x42470000
 8006288:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800628c:	4b88      	ldr	r3, [pc, #544]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 800628e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006290:	f003 0302 	and.w	r3, r3, #2
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1ea      	bne.n	800626e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0304 	and.w	r3, r3, #4
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f000 8097 	beq.w	80063d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062a6:	2300      	movs	r3, #0
 80062a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062aa:	4b81      	ldr	r3, [pc, #516]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 80062ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d10f      	bne.n	80062d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062b6:	2300      	movs	r3, #0
 80062b8:	60bb      	str	r3, [r7, #8]
 80062ba:	4b7d      	ldr	r3, [pc, #500]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 80062bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062be:	4a7c      	ldr	r2, [pc, #496]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 80062c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80062c6:	4b7a      	ldr	r3, [pc, #488]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 80062c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062ce:	60bb      	str	r3, [r7, #8]
 80062d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062d2:	2301      	movs	r3, #1
 80062d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062d6:	4b77      	ldr	r3, [pc, #476]	@ (80064b4 <HAL_RCC_OscConfig+0x474>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d118      	bne.n	8006314 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062e2:	4b74      	ldr	r3, [pc, #464]	@ (80064b4 <HAL_RCC_OscConfig+0x474>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a73      	ldr	r2, [pc, #460]	@ (80064b4 <HAL_RCC_OscConfig+0x474>)
 80062e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062ee:	f7fd ff53 	bl	8004198 <HAL_GetTick>
 80062f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062f4:	e008      	b.n	8006308 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062f6:	f7fd ff4f 	bl	8004198 <HAL_GetTick>
 80062fa:	4602      	mov	r2, r0
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	2b02      	cmp	r3, #2
 8006302:	d901      	bls.n	8006308 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e10c      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006308:	4b6a      	ldr	r3, [pc, #424]	@ (80064b4 <HAL_RCC_OscConfig+0x474>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006310:	2b00      	cmp	r3, #0
 8006312:	d0f0      	beq.n	80062f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d106      	bne.n	800632a <HAL_RCC_OscConfig+0x2ea>
 800631c:	4b64      	ldr	r3, [pc, #400]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 800631e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006320:	4a63      	ldr	r2, [pc, #396]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 8006322:	f043 0301 	orr.w	r3, r3, #1
 8006326:	6713      	str	r3, [r2, #112]	@ 0x70
 8006328:	e01c      	b.n	8006364 <HAL_RCC_OscConfig+0x324>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	2b05      	cmp	r3, #5
 8006330:	d10c      	bne.n	800634c <HAL_RCC_OscConfig+0x30c>
 8006332:	4b5f      	ldr	r3, [pc, #380]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 8006334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006336:	4a5e      	ldr	r2, [pc, #376]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 8006338:	f043 0304 	orr.w	r3, r3, #4
 800633c:	6713      	str	r3, [r2, #112]	@ 0x70
 800633e:	4b5c      	ldr	r3, [pc, #368]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 8006340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006342:	4a5b      	ldr	r2, [pc, #364]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 8006344:	f043 0301 	orr.w	r3, r3, #1
 8006348:	6713      	str	r3, [r2, #112]	@ 0x70
 800634a:	e00b      	b.n	8006364 <HAL_RCC_OscConfig+0x324>
 800634c:	4b58      	ldr	r3, [pc, #352]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 800634e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006350:	4a57      	ldr	r2, [pc, #348]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 8006352:	f023 0301 	bic.w	r3, r3, #1
 8006356:	6713      	str	r3, [r2, #112]	@ 0x70
 8006358:	4b55      	ldr	r3, [pc, #340]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 800635a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800635c:	4a54      	ldr	r2, [pc, #336]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 800635e:	f023 0304 	bic.w	r3, r3, #4
 8006362:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d015      	beq.n	8006398 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800636c:	f7fd ff14 	bl	8004198 <HAL_GetTick>
 8006370:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006372:	e00a      	b.n	800638a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006374:	f7fd ff10 	bl	8004198 <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006382:	4293      	cmp	r3, r2
 8006384:	d901      	bls.n	800638a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e0cb      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800638a:	4b49      	ldr	r3, [pc, #292]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 800638c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800638e:	f003 0302 	and.w	r3, r3, #2
 8006392:	2b00      	cmp	r3, #0
 8006394:	d0ee      	beq.n	8006374 <HAL_RCC_OscConfig+0x334>
 8006396:	e014      	b.n	80063c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006398:	f7fd fefe 	bl	8004198 <HAL_GetTick>
 800639c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800639e:	e00a      	b.n	80063b6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063a0:	f7fd fefa 	bl	8004198 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d901      	bls.n	80063b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e0b5      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063b6:	4b3e      	ldr	r3, [pc, #248]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 80063b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063ba:	f003 0302 	and.w	r3, r3, #2
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1ee      	bne.n	80063a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80063c2:	7dfb      	ldrb	r3, [r7, #23]
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d105      	bne.n	80063d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063c8:	4b39      	ldr	r3, [pc, #228]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 80063ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063cc:	4a38      	ldr	r2, [pc, #224]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 80063ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f000 80a1 	beq.w	8006520 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80063de:	4b34      	ldr	r3, [pc, #208]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f003 030c 	and.w	r3, r3, #12
 80063e6:	2b08      	cmp	r3, #8
 80063e8:	d05c      	beq.n	80064a4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d141      	bne.n	8006476 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063f2:	4b31      	ldr	r3, [pc, #196]	@ (80064b8 <HAL_RCC_OscConfig+0x478>)
 80063f4:	2200      	movs	r2, #0
 80063f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063f8:	f7fd fece 	bl	8004198 <HAL_GetTick>
 80063fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063fe:	e008      	b.n	8006412 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006400:	f7fd feca 	bl	8004198 <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	2b02      	cmp	r3, #2
 800640c:	d901      	bls.n	8006412 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e087      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006412:	4b27      	ldr	r3, [pc, #156]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1f0      	bne.n	8006400 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	69da      	ldr	r2, [r3, #28]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6a1b      	ldr	r3, [r3, #32]
 8006426:	431a      	orrs	r2, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800642c:	019b      	lsls	r3, r3, #6
 800642e:	431a      	orrs	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006434:	085b      	lsrs	r3, r3, #1
 8006436:	3b01      	subs	r3, #1
 8006438:	041b      	lsls	r3, r3, #16
 800643a:	431a      	orrs	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006440:	061b      	lsls	r3, r3, #24
 8006442:	491b      	ldr	r1, [pc, #108]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 8006444:	4313      	orrs	r3, r2
 8006446:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006448:	4b1b      	ldr	r3, [pc, #108]	@ (80064b8 <HAL_RCC_OscConfig+0x478>)
 800644a:	2201      	movs	r2, #1
 800644c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800644e:	f7fd fea3 	bl	8004198 <HAL_GetTick>
 8006452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006454:	e008      	b.n	8006468 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006456:	f7fd fe9f 	bl	8004198 <HAL_GetTick>
 800645a:	4602      	mov	r2, r0
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	2b02      	cmp	r3, #2
 8006462:	d901      	bls.n	8006468 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	e05c      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006468:	4b11      	ldr	r3, [pc, #68]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d0f0      	beq.n	8006456 <HAL_RCC_OscConfig+0x416>
 8006474:	e054      	b.n	8006520 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006476:	4b10      	ldr	r3, [pc, #64]	@ (80064b8 <HAL_RCC_OscConfig+0x478>)
 8006478:	2200      	movs	r2, #0
 800647a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800647c:	f7fd fe8c 	bl	8004198 <HAL_GetTick>
 8006480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006482:	e008      	b.n	8006496 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006484:	f7fd fe88 	bl	8004198 <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	2b02      	cmp	r3, #2
 8006490:	d901      	bls.n	8006496 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e045      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006496:	4b06      	ldr	r3, [pc, #24]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1f0      	bne.n	8006484 <HAL_RCC_OscConfig+0x444>
 80064a2:	e03d      	b.n	8006520 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	699b      	ldr	r3, [r3, #24]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d107      	bne.n	80064bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e038      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
 80064b0:	40023800 	.word	0x40023800
 80064b4:	40007000 	.word	0x40007000
 80064b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80064bc:	4b1b      	ldr	r3, [pc, #108]	@ (800652c <HAL_RCC_OscConfig+0x4ec>)
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	699b      	ldr	r3, [r3, #24]
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d028      	beq.n	800651c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d121      	bne.n	800651c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d11a      	bne.n	800651c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80064ec:	4013      	ands	r3, r2
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80064f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d111      	bne.n	800651c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006502:	085b      	lsrs	r3, r3, #1
 8006504:	3b01      	subs	r3, #1
 8006506:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006508:	429a      	cmp	r2, r3
 800650a:	d107      	bne.n	800651c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006516:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006518:	429a      	cmp	r2, r3
 800651a:	d001      	beq.n	8006520 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e000      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3718      	adds	r7, #24
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	40023800 	.word	0x40023800

08006530 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d101      	bne.n	8006544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e0cc      	b.n	80066de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006544:	4b68      	ldr	r3, [pc, #416]	@ (80066e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 030f 	and.w	r3, r3, #15
 800654c:	683a      	ldr	r2, [r7, #0]
 800654e:	429a      	cmp	r2, r3
 8006550:	d90c      	bls.n	800656c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006552:	4b65      	ldr	r3, [pc, #404]	@ (80066e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006554:	683a      	ldr	r2, [r7, #0]
 8006556:	b2d2      	uxtb	r2, r2
 8006558:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800655a:	4b63      	ldr	r3, [pc, #396]	@ (80066e8 <HAL_RCC_ClockConfig+0x1b8>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 030f 	and.w	r3, r3, #15
 8006562:	683a      	ldr	r2, [r7, #0]
 8006564:	429a      	cmp	r2, r3
 8006566:	d001      	beq.n	800656c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	e0b8      	b.n	80066de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 0302 	and.w	r3, r3, #2
 8006574:	2b00      	cmp	r3, #0
 8006576:	d020      	beq.n	80065ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0304 	and.w	r3, r3, #4
 8006580:	2b00      	cmp	r3, #0
 8006582:	d005      	beq.n	8006590 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006584:	4b59      	ldr	r3, [pc, #356]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	4a58      	ldr	r2, [pc, #352]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 800658a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800658e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 0308 	and.w	r3, r3, #8
 8006598:	2b00      	cmp	r3, #0
 800659a:	d005      	beq.n	80065a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800659c:	4b53      	ldr	r3, [pc, #332]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	4a52      	ldr	r2, [pc, #328]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 80065a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80065a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065a8:	4b50      	ldr	r3, [pc, #320]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	494d      	ldr	r1, [pc, #308]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 80065b6:	4313      	orrs	r3, r2
 80065b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0301 	and.w	r3, r3, #1
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d044      	beq.n	8006650 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d107      	bne.n	80065de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065ce:	4b47      	ldr	r3, [pc, #284]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d119      	bne.n	800660e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e07f      	b.n	80066de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d003      	beq.n	80065ee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065ea:	2b03      	cmp	r3, #3
 80065ec:	d107      	bne.n	80065fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065ee:	4b3f      	ldr	r3, [pc, #252]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d109      	bne.n	800660e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e06f      	b.n	80066de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065fe:	4b3b      	ldr	r3, [pc, #236]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0302 	and.w	r3, r3, #2
 8006606:	2b00      	cmp	r3, #0
 8006608:	d101      	bne.n	800660e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e067      	b.n	80066de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800660e:	4b37      	ldr	r3, [pc, #220]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	f023 0203 	bic.w	r2, r3, #3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	4934      	ldr	r1, [pc, #208]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 800661c:	4313      	orrs	r3, r2
 800661e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006620:	f7fd fdba 	bl	8004198 <HAL_GetTick>
 8006624:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006626:	e00a      	b.n	800663e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006628:	f7fd fdb6 	bl	8004198 <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006636:	4293      	cmp	r3, r2
 8006638:	d901      	bls.n	800663e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e04f      	b.n	80066de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800663e:	4b2b      	ldr	r3, [pc, #172]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f003 020c 	and.w	r2, r3, #12
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	429a      	cmp	r2, r3
 800664e:	d1eb      	bne.n	8006628 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006650:	4b25      	ldr	r3, [pc, #148]	@ (80066e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 030f 	and.w	r3, r3, #15
 8006658:	683a      	ldr	r2, [r7, #0]
 800665a:	429a      	cmp	r2, r3
 800665c:	d20c      	bcs.n	8006678 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800665e:	4b22      	ldr	r3, [pc, #136]	@ (80066e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006660:	683a      	ldr	r2, [r7, #0]
 8006662:	b2d2      	uxtb	r2, r2
 8006664:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006666:	4b20      	ldr	r3, [pc, #128]	@ (80066e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 030f 	and.w	r3, r3, #15
 800666e:	683a      	ldr	r2, [r7, #0]
 8006670:	429a      	cmp	r2, r3
 8006672:	d001      	beq.n	8006678 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e032      	b.n	80066de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0304 	and.w	r3, r3, #4
 8006680:	2b00      	cmp	r3, #0
 8006682:	d008      	beq.n	8006696 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006684:	4b19      	ldr	r3, [pc, #100]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	4916      	ldr	r1, [pc, #88]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 8006692:	4313      	orrs	r3, r2
 8006694:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 0308 	and.w	r3, r3, #8
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d009      	beq.n	80066b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80066a2:	4b12      	ldr	r3, [pc, #72]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	00db      	lsls	r3, r3, #3
 80066b0:	490e      	ldr	r1, [pc, #56]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 80066b2:	4313      	orrs	r3, r2
 80066b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80066b6:	f000 f821 	bl	80066fc <HAL_RCC_GetSysClockFreq>
 80066ba:	4602      	mov	r2, r0
 80066bc:	4b0b      	ldr	r3, [pc, #44]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	091b      	lsrs	r3, r3, #4
 80066c2:	f003 030f 	and.w	r3, r3, #15
 80066c6:	490a      	ldr	r1, [pc, #40]	@ (80066f0 <HAL_RCC_ClockConfig+0x1c0>)
 80066c8:	5ccb      	ldrb	r3, [r1, r3]
 80066ca:	fa22 f303 	lsr.w	r3, r2, r3
 80066ce:	4a09      	ldr	r2, [pc, #36]	@ (80066f4 <HAL_RCC_ClockConfig+0x1c4>)
 80066d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80066d2:	4b09      	ldr	r3, [pc, #36]	@ (80066f8 <HAL_RCC_ClockConfig+0x1c8>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7fd fd1a 	bl	8004110 <HAL_InitTick>

  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3710      	adds	r7, #16
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	40023c00 	.word	0x40023c00
 80066ec:	40023800 	.word	0x40023800
 80066f0:	080091a0 	.word	0x080091a0
 80066f4:	20000018 	.word	0x20000018
 80066f8:	2000001c 	.word	0x2000001c

080066fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006700:	b094      	sub	sp, #80	@ 0x50
 8006702:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006704:	2300      	movs	r3, #0
 8006706:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006708:	2300      	movs	r3, #0
 800670a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800670c:	2300      	movs	r3, #0
 800670e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006710:	2300      	movs	r3, #0
 8006712:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006714:	4b79      	ldr	r3, [pc, #484]	@ (80068fc <HAL_RCC_GetSysClockFreq+0x200>)
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	f003 030c 	and.w	r3, r3, #12
 800671c:	2b08      	cmp	r3, #8
 800671e:	d00d      	beq.n	800673c <HAL_RCC_GetSysClockFreq+0x40>
 8006720:	2b08      	cmp	r3, #8
 8006722:	f200 80e1 	bhi.w	80068e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006726:	2b00      	cmp	r3, #0
 8006728:	d002      	beq.n	8006730 <HAL_RCC_GetSysClockFreq+0x34>
 800672a:	2b04      	cmp	r3, #4
 800672c:	d003      	beq.n	8006736 <HAL_RCC_GetSysClockFreq+0x3a>
 800672e:	e0db      	b.n	80068e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006730:	4b73      	ldr	r3, [pc, #460]	@ (8006900 <HAL_RCC_GetSysClockFreq+0x204>)
 8006732:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006734:	e0db      	b.n	80068ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006736:	4b73      	ldr	r3, [pc, #460]	@ (8006904 <HAL_RCC_GetSysClockFreq+0x208>)
 8006738:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800673a:	e0d8      	b.n	80068ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800673c:	4b6f      	ldr	r3, [pc, #444]	@ (80068fc <HAL_RCC_GetSysClockFreq+0x200>)
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006744:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006746:	4b6d      	ldr	r3, [pc, #436]	@ (80068fc <HAL_RCC_GetSysClockFreq+0x200>)
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d063      	beq.n	800681a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006752:	4b6a      	ldr	r3, [pc, #424]	@ (80068fc <HAL_RCC_GetSysClockFreq+0x200>)
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	099b      	lsrs	r3, r3, #6
 8006758:	2200      	movs	r2, #0
 800675a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800675c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800675e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006764:	633b      	str	r3, [r7, #48]	@ 0x30
 8006766:	2300      	movs	r3, #0
 8006768:	637b      	str	r3, [r7, #52]	@ 0x34
 800676a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800676e:	4622      	mov	r2, r4
 8006770:	462b      	mov	r3, r5
 8006772:	f04f 0000 	mov.w	r0, #0
 8006776:	f04f 0100 	mov.w	r1, #0
 800677a:	0159      	lsls	r1, r3, #5
 800677c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006780:	0150      	lsls	r0, r2, #5
 8006782:	4602      	mov	r2, r0
 8006784:	460b      	mov	r3, r1
 8006786:	4621      	mov	r1, r4
 8006788:	1a51      	subs	r1, r2, r1
 800678a:	6139      	str	r1, [r7, #16]
 800678c:	4629      	mov	r1, r5
 800678e:	eb63 0301 	sbc.w	r3, r3, r1
 8006792:	617b      	str	r3, [r7, #20]
 8006794:	f04f 0200 	mov.w	r2, #0
 8006798:	f04f 0300 	mov.w	r3, #0
 800679c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80067a0:	4659      	mov	r1, fp
 80067a2:	018b      	lsls	r3, r1, #6
 80067a4:	4651      	mov	r1, sl
 80067a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80067aa:	4651      	mov	r1, sl
 80067ac:	018a      	lsls	r2, r1, #6
 80067ae:	4651      	mov	r1, sl
 80067b0:	ebb2 0801 	subs.w	r8, r2, r1
 80067b4:	4659      	mov	r1, fp
 80067b6:	eb63 0901 	sbc.w	r9, r3, r1
 80067ba:	f04f 0200 	mov.w	r2, #0
 80067be:	f04f 0300 	mov.w	r3, #0
 80067c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80067c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80067ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80067ce:	4690      	mov	r8, r2
 80067d0:	4699      	mov	r9, r3
 80067d2:	4623      	mov	r3, r4
 80067d4:	eb18 0303 	adds.w	r3, r8, r3
 80067d8:	60bb      	str	r3, [r7, #8]
 80067da:	462b      	mov	r3, r5
 80067dc:	eb49 0303 	adc.w	r3, r9, r3
 80067e0:	60fb      	str	r3, [r7, #12]
 80067e2:	f04f 0200 	mov.w	r2, #0
 80067e6:	f04f 0300 	mov.w	r3, #0
 80067ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80067ee:	4629      	mov	r1, r5
 80067f0:	024b      	lsls	r3, r1, #9
 80067f2:	4621      	mov	r1, r4
 80067f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80067f8:	4621      	mov	r1, r4
 80067fa:	024a      	lsls	r2, r1, #9
 80067fc:	4610      	mov	r0, r2
 80067fe:	4619      	mov	r1, r3
 8006800:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006802:	2200      	movs	r2, #0
 8006804:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006806:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006808:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800680c:	f7f9 fcee 	bl	80001ec <__aeabi_uldivmod>
 8006810:	4602      	mov	r2, r0
 8006812:	460b      	mov	r3, r1
 8006814:	4613      	mov	r3, r2
 8006816:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006818:	e058      	b.n	80068cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800681a:	4b38      	ldr	r3, [pc, #224]	@ (80068fc <HAL_RCC_GetSysClockFreq+0x200>)
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	099b      	lsrs	r3, r3, #6
 8006820:	2200      	movs	r2, #0
 8006822:	4618      	mov	r0, r3
 8006824:	4611      	mov	r1, r2
 8006826:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800682a:	623b      	str	r3, [r7, #32]
 800682c:	2300      	movs	r3, #0
 800682e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006830:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006834:	4642      	mov	r2, r8
 8006836:	464b      	mov	r3, r9
 8006838:	f04f 0000 	mov.w	r0, #0
 800683c:	f04f 0100 	mov.w	r1, #0
 8006840:	0159      	lsls	r1, r3, #5
 8006842:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006846:	0150      	lsls	r0, r2, #5
 8006848:	4602      	mov	r2, r0
 800684a:	460b      	mov	r3, r1
 800684c:	4641      	mov	r1, r8
 800684e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006852:	4649      	mov	r1, r9
 8006854:	eb63 0b01 	sbc.w	fp, r3, r1
 8006858:	f04f 0200 	mov.w	r2, #0
 800685c:	f04f 0300 	mov.w	r3, #0
 8006860:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006864:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006868:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800686c:	ebb2 040a 	subs.w	r4, r2, sl
 8006870:	eb63 050b 	sbc.w	r5, r3, fp
 8006874:	f04f 0200 	mov.w	r2, #0
 8006878:	f04f 0300 	mov.w	r3, #0
 800687c:	00eb      	lsls	r3, r5, #3
 800687e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006882:	00e2      	lsls	r2, r4, #3
 8006884:	4614      	mov	r4, r2
 8006886:	461d      	mov	r5, r3
 8006888:	4643      	mov	r3, r8
 800688a:	18e3      	adds	r3, r4, r3
 800688c:	603b      	str	r3, [r7, #0]
 800688e:	464b      	mov	r3, r9
 8006890:	eb45 0303 	adc.w	r3, r5, r3
 8006894:	607b      	str	r3, [r7, #4]
 8006896:	f04f 0200 	mov.w	r2, #0
 800689a:	f04f 0300 	mov.w	r3, #0
 800689e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80068a2:	4629      	mov	r1, r5
 80068a4:	028b      	lsls	r3, r1, #10
 80068a6:	4621      	mov	r1, r4
 80068a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80068ac:	4621      	mov	r1, r4
 80068ae:	028a      	lsls	r2, r1, #10
 80068b0:	4610      	mov	r0, r2
 80068b2:	4619      	mov	r1, r3
 80068b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068b6:	2200      	movs	r2, #0
 80068b8:	61bb      	str	r3, [r7, #24]
 80068ba:	61fa      	str	r2, [r7, #28]
 80068bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068c0:	f7f9 fc94 	bl	80001ec <__aeabi_uldivmod>
 80068c4:	4602      	mov	r2, r0
 80068c6:	460b      	mov	r3, r1
 80068c8:	4613      	mov	r3, r2
 80068ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80068cc:	4b0b      	ldr	r3, [pc, #44]	@ (80068fc <HAL_RCC_GetSysClockFreq+0x200>)
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	0c1b      	lsrs	r3, r3, #16
 80068d2:	f003 0303 	and.w	r3, r3, #3
 80068d6:	3301      	adds	r3, #1
 80068d8:	005b      	lsls	r3, r3, #1
 80068da:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80068dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80068de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80068e6:	e002      	b.n	80068ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80068e8:	4b05      	ldr	r3, [pc, #20]	@ (8006900 <HAL_RCC_GetSysClockFreq+0x204>)
 80068ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80068ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3750      	adds	r7, #80	@ 0x50
 80068f4:	46bd      	mov	sp, r7
 80068f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068fa:	bf00      	nop
 80068fc:	40023800 	.word	0x40023800
 8006900:	00f42400 	.word	0x00f42400
 8006904:	007a1200 	.word	0x007a1200

08006908 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006908:	b480      	push	{r7}
 800690a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800690c:	4b03      	ldr	r3, [pc, #12]	@ (800691c <HAL_RCC_GetHCLKFreq+0x14>)
 800690e:	681b      	ldr	r3, [r3, #0]
}
 8006910:	4618      	mov	r0, r3
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr
 800691a:	bf00      	nop
 800691c:	20000018 	.word	0x20000018

08006920 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006924:	f7ff fff0 	bl	8006908 <HAL_RCC_GetHCLKFreq>
 8006928:	4602      	mov	r2, r0
 800692a:	4b05      	ldr	r3, [pc, #20]	@ (8006940 <HAL_RCC_GetPCLK1Freq+0x20>)
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	0a9b      	lsrs	r3, r3, #10
 8006930:	f003 0307 	and.w	r3, r3, #7
 8006934:	4903      	ldr	r1, [pc, #12]	@ (8006944 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006936:	5ccb      	ldrb	r3, [r1, r3]
 8006938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800693c:	4618      	mov	r0, r3
 800693e:	bd80      	pop	{r7, pc}
 8006940:	40023800 	.word	0x40023800
 8006944:	080091b0 	.word	0x080091b0

08006948 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006950:	2300      	movs	r3, #0
 8006952:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006954:	2300      	movs	r3, #0
 8006956:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0301 	and.w	r3, r3, #1
 8006960:	2b00      	cmp	r3, #0
 8006962:	d10b      	bne.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800696c:	2b00      	cmp	r3, #0
 800696e:	d105      	bne.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006978:	2b00      	cmp	r3, #0
 800697a:	d075      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800697c:	4b91      	ldr	r3, [pc, #580]	@ (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800697e:	2200      	movs	r2, #0
 8006980:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006982:	f7fd fc09 	bl	8004198 <HAL_GetTick>
 8006986:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006988:	e008      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800698a:	f7fd fc05 	bl	8004198 <HAL_GetTick>
 800698e:	4602      	mov	r2, r0
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	2b02      	cmp	r3, #2
 8006996:	d901      	bls.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e189      	b.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800699c:	4b8a      	ldr	r3, [pc, #552]	@ (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d1f0      	bne.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0301 	and.w	r3, r3, #1
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d009      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	019a      	lsls	r2, r3, #6
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	071b      	lsls	r3, r3, #28
 80069c0:	4981      	ldr	r1, [pc, #516]	@ (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80069c2:	4313      	orrs	r3, r2
 80069c4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 0302 	and.w	r3, r3, #2
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d01f      	beq.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80069d4:	4b7c      	ldr	r3, [pc, #496]	@ (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80069d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069da:	0f1b      	lsrs	r3, r3, #28
 80069dc:	f003 0307 	and.w	r3, r3, #7
 80069e0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	019a      	lsls	r2, r3, #6
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	061b      	lsls	r3, r3, #24
 80069ee:	431a      	orrs	r2, r3
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	071b      	lsls	r3, r3, #28
 80069f4:	4974      	ldr	r1, [pc, #464]	@ (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80069f6:	4313      	orrs	r3, r2
 80069f8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80069fc:	4b72      	ldr	r3, [pc, #456]	@ (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80069fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a02:	f023 021f 	bic.w	r2, r3, #31
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	69db      	ldr	r3, [r3, #28]
 8006a0a:	3b01      	subs	r3, #1
 8006a0c:	496e      	ldr	r1, [pc, #440]	@ (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d00d      	beq.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	019a      	lsls	r2, r3, #6
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	061b      	lsls	r3, r3, #24
 8006a2c:	431a      	orrs	r2, r3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	071b      	lsls	r3, r3, #28
 8006a34:	4964      	ldr	r1, [pc, #400]	@ (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a36:	4313      	orrs	r3, r2
 8006a38:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006a3c:	4b61      	ldr	r3, [pc, #388]	@ (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006a3e:	2201      	movs	r2, #1
 8006a40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006a42:	f7fd fba9 	bl	8004198 <HAL_GetTick>
 8006a46:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a48:	e008      	b.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006a4a:	f7fd fba5 	bl	8004198 <HAL_GetTick>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d901      	bls.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	e129      	b.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a5c:	4b5a      	ldr	r3, [pc, #360]	@ (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d0f0      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 0304 	and.w	r3, r3, #4
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d105      	bne.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d079      	beq.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006a80:	4b52      	ldr	r3, [pc, #328]	@ (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006a82:	2200      	movs	r2, #0
 8006a84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006a86:	f7fd fb87 	bl	8004198 <HAL_GetTick>
 8006a8a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006a8c:	e008      	b.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006a8e:	f7fd fb83 	bl	8004198 <HAL_GetTick>
 8006a92:	4602      	mov	r2, r0
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	1ad3      	subs	r3, r2, r3
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d901      	bls.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	e107      	b.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006aa0:	4b49      	ldr	r3, [pc, #292]	@ (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006aa8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006aac:	d0ef      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 0304 	and.w	r3, r3, #4
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d020      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006aba:	4b43      	ldr	r3, [pc, #268]	@ (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ac0:	0f1b      	lsrs	r3, r3, #28
 8006ac2:	f003 0307 	and.w	r3, r3, #7
 8006ac6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	019a      	lsls	r2, r3, #6
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	695b      	ldr	r3, [r3, #20]
 8006ad2:	061b      	lsls	r3, r3, #24
 8006ad4:	431a      	orrs	r2, r3
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	071b      	lsls	r3, r3, #28
 8006ada:	493b      	ldr	r1, [pc, #236]	@ (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006adc:	4313      	orrs	r3, r2
 8006ade:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006ae2:	4b39      	ldr	r3, [pc, #228]	@ (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ae8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6a1b      	ldr	r3, [r3, #32]
 8006af0:	3b01      	subs	r3, #1
 8006af2:	021b      	lsls	r3, r3, #8
 8006af4:	4934      	ldr	r1, [pc, #208]	@ (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0308 	and.w	r3, r3, #8
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d01e      	beq.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006b08:	4b2f      	ldr	r3, [pc, #188]	@ (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b0e:	0e1b      	lsrs	r3, r3, #24
 8006b10:	f003 030f 	and.w	r3, r3, #15
 8006b14:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	019a      	lsls	r2, r3, #6
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	061b      	lsls	r3, r3, #24
 8006b20:	431a      	orrs	r2, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	699b      	ldr	r3, [r3, #24]
 8006b26:	071b      	lsls	r3, r3, #28
 8006b28:	4927      	ldr	r1, [pc, #156]	@ (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006b30:	4b25      	ldr	r3, [pc, #148]	@ (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b36:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b3e:	4922      	ldr	r1, [pc, #136]	@ (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b40:	4313      	orrs	r3, r2
 8006b42:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006b46:	4b21      	ldr	r3, [pc, #132]	@ (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006b48:	2201      	movs	r2, #1
 8006b4a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b4c:	f7fd fb24 	bl	8004198 <HAL_GetTick>
 8006b50:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006b52:	e008      	b.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006b54:	f7fd fb20 	bl	8004198 <HAL_GetTick>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d901      	bls.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e0a4      	b.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006b66:	4b18      	ldr	r3, [pc, #96]	@ (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b72:	d1ef      	bne.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 0320 	and.w	r3, r3, #32
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f000 808b 	beq.w	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006b82:	2300      	movs	r3, #0
 8006b84:	60fb      	str	r3, [r7, #12]
 8006b86:	4b10      	ldr	r3, [pc, #64]	@ (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b8a:	4a0f      	ldr	r2, [pc, #60]	@ (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b90:	6413      	str	r3, [r2, #64]	@ 0x40
 8006b92:	4b0d      	ldr	r3, [pc, #52]	@ (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b9a:	60fb      	str	r3, [r7, #12]
 8006b9c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a0b      	ldr	r2, [pc, #44]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006ba4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ba8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006baa:	f7fd faf5 	bl	8004198 <HAL_GetTick>
 8006bae:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006bb0:	e010      	b.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bb2:	f7fd faf1 	bl	8004198 <HAL_GetTick>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d909      	bls.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e075      	b.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006bc4:	42470068 	.word	0x42470068
 8006bc8:	40023800 	.word	0x40023800
 8006bcc:	42470070 	.word	0x42470070
 8006bd0:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006bd4:	4b38      	ldr	r3, [pc, #224]	@ (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d0e8      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006be0:	4b36      	ldr	r3, [pc, #216]	@ (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006be2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006be4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006be8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d02f      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bf4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bf8:	693a      	ldr	r2, [r7, #16]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d028      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006bfe:	4b2f      	ldr	r3, [pc, #188]	@ (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c06:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c08:	4b2d      	ldr	r3, [pc, #180]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c0e:	4b2c      	ldr	r3, [pc, #176]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006c10:	2200      	movs	r2, #0
 8006c12:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006c14:	4a29      	ldr	r2, [pc, #164]	@ (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006c1a:	4b28      	ldr	r3, [pc, #160]	@ (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d114      	bne.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006c26:	f7fd fab7 	bl	8004198 <HAL_GetTick>
 8006c2a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c2c:	e00a      	b.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c2e:	f7fd fab3 	bl	8004198 <HAL_GetTick>
 8006c32:	4602      	mov	r2, r0
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	1ad3      	subs	r3, r2, r3
 8006c38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d901      	bls.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006c40:	2303      	movs	r3, #3
 8006c42:	e035      	b.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c44:	4b1d      	ldr	r3, [pc, #116]	@ (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c48:	f003 0302 	and.w	r3, r3, #2
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d0ee      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c5c:	d10d      	bne.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006c5e:	4b17      	ldr	r3, [pc, #92]	@ (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c6a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006c6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c72:	4912      	ldr	r1, [pc, #72]	@ (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c74:	4313      	orrs	r3, r2
 8006c76:	608b      	str	r3, [r1, #8]
 8006c78:	e005      	b.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006c7a:	4b10      	ldr	r3, [pc, #64]	@ (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	4a0f      	ldr	r2, [pc, #60]	@ (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c80:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006c84:	6093      	str	r3, [r2, #8]
 8006c86:	4b0d      	ldr	r3, [pc, #52]	@ (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c88:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c92:	490a      	ldr	r1, [pc, #40]	@ (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c94:	4313      	orrs	r3, r2
 8006c96:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 0310 	and.w	r3, r3, #16
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d004      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8006caa:	4b06      	ldr	r3, [pc, #24]	@ (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006cac:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006cae:	2300      	movs	r3, #0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3718      	adds	r7, #24
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	40007000 	.word	0x40007000
 8006cbc:	40023800 	.word	0x40023800
 8006cc0:	42470e40 	.word	0x42470e40
 8006cc4:	424711e0 	.word	0x424711e0

08006cc8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d101      	bne.n	8006cda <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e01c      	b.n	8006d14 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	795b      	ldrb	r3, [r3, #5]
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d105      	bne.n	8006cf0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f7fc fe84 	bl	80039f8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2202      	movs	r2, #2
 8006cf4:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f042 0204 	orr.w	r2, r2, #4
 8006d04:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3708      	adds	r7, #8
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d26:	2300      	movs	r3, #0
 8006d28:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	791b      	ldrb	r3, [r3, #4]
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d101      	bne.n	8006d36 <HAL_RNG_GenerateRandomNumber+0x1a>
 8006d32:	2302      	movs	r3, #2
 8006d34:	e044      	b.n	8006dc0 <HAL_RNG_GenerateRandomNumber+0xa4>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	795b      	ldrb	r3, [r3, #5]
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d133      	bne.n	8006dae <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2202      	movs	r2, #2
 8006d4a:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006d4c:	f7fd fa24 	bl	8004198 <HAL_GetTick>
 8006d50:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006d52:	e018      	b.n	8006d86 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006d54:	f7fd fa20 	bl	8004198 <HAL_GetTick>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	2b02      	cmp	r3, #2
 8006d60:	d911      	bls.n	8006d86 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	f003 0301 	and.w	r3, r3, #1
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d00a      	beq.n	8006d86 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2202      	movs	r2, #2
 8006d7a:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e01c      	b.n	8006dc0 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	f003 0301 	and.w	r3, r3, #1
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d1df      	bne.n	8006d54 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	689a      	ldr	r2, [r3, #8]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	68da      	ldr	r2, [r3, #12]
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2201      	movs	r2, #1
 8006daa:	715a      	strb	r2, [r3, #5]
 8006dac:	e004      	b.n	8006db8 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2204      	movs	r2, #4
 8006db2:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	711a      	strb	r2, [r3, #4]

  return status;
 8006dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3710      	adds	r7, #16
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d101      	bne.n	8006dda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e07b      	b.n	8006ed2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d108      	bne.n	8006df4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006dea:	d009      	beq.n	8006e00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	61da      	str	r2, [r3, #28]
 8006df2:	e005      	b.n	8006e00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d106      	bne.n	8006e20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f7fc fe0e 	bl	8003a3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2202      	movs	r2, #2
 8006e24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e36:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006e48:	431a      	orrs	r2, r3
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e52:	431a      	orrs	r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	691b      	ldr	r3, [r3, #16]
 8006e58:	f003 0302 	and.w	r3, r3, #2
 8006e5c:	431a      	orrs	r2, r3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	695b      	ldr	r3, [r3, #20]
 8006e62:	f003 0301 	and.w	r3, r3, #1
 8006e66:	431a      	orrs	r2, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	699b      	ldr	r3, [r3, #24]
 8006e6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e70:	431a      	orrs	r2, r3
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	69db      	ldr	r3, [r3, #28]
 8006e76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e7a:	431a      	orrs	r2, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6a1b      	ldr	r3, [r3, #32]
 8006e80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e84:	ea42 0103 	orr.w	r1, r2, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e8c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	430a      	orrs	r2, r1
 8006e96:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	699b      	ldr	r3, [r3, #24]
 8006e9c:	0c1b      	lsrs	r3, r3, #16
 8006e9e:	f003 0104 	and.w	r1, r3, #4
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ea6:	f003 0210 	and.w	r2, r3, #16
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	430a      	orrs	r2, r1
 8006eb0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	69da      	ldr	r2, [r3, #28]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006ec0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3708      	adds	r7, #8
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b082      	sub	sp, #8
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d101      	bne.n	8006eec <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e01a      	b.n	8006f22 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2202      	movs	r2, #2
 8006ef0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f02:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f7fc fde1 	bl	8003acc <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3708      	adds	r7, #8
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b088      	sub	sp, #32
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	60f8      	str	r0, [r7, #12]
 8006f32:	60b9      	str	r1, [r7, #8]
 8006f34:	603b      	str	r3, [r7, #0]
 8006f36:	4613      	mov	r3, r2
 8006f38:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f3a:	f7fd f92d 	bl	8004198 <HAL_GetTick>
 8006f3e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006f40:	88fb      	ldrh	r3, [r7, #6]
 8006f42:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d001      	beq.n	8006f54 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006f50:	2302      	movs	r3, #2
 8006f52:	e12a      	b.n	80071aa <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d002      	beq.n	8006f60 <HAL_SPI_Transmit+0x36>
 8006f5a:	88fb      	ldrh	r3, [r7, #6]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d101      	bne.n	8006f64 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	e122      	b.n	80071aa <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d101      	bne.n	8006f72 <HAL_SPI_Transmit+0x48>
 8006f6e:	2302      	movs	r3, #2
 8006f70:	e11b      	b.n	80071aa <HAL_SPI_Transmit+0x280>
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2201      	movs	r2, #1
 8006f76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2203      	movs	r2, #3
 8006f7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	68ba      	ldr	r2, [r7, #8]
 8006f8c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	88fa      	ldrh	r2, [r7, #6]
 8006f92:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	88fa      	ldrh	r2, [r7, #6]
 8006f98:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fc0:	d10f      	bne.n	8006fe2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fd0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006fe0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fec:	2b40      	cmp	r3, #64	@ 0x40
 8006fee:	d007      	beq.n	8007000 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ffe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007008:	d152      	bne.n	80070b0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d002      	beq.n	8007018 <HAL_SPI_Transmit+0xee>
 8007012:	8b7b      	ldrh	r3, [r7, #26]
 8007014:	2b01      	cmp	r3, #1
 8007016:	d145      	bne.n	80070a4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800701c:	881a      	ldrh	r2, [r3, #0]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007028:	1c9a      	adds	r2, r3, #2
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007032:	b29b      	uxth	r3, r3
 8007034:	3b01      	subs	r3, #1
 8007036:	b29a      	uxth	r2, r3
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800703c:	e032      	b.n	80070a4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f003 0302 	and.w	r3, r3, #2
 8007048:	2b02      	cmp	r3, #2
 800704a:	d112      	bne.n	8007072 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007050:	881a      	ldrh	r2, [r3, #0]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800705c:	1c9a      	adds	r2, r3, #2
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007066:	b29b      	uxth	r3, r3
 8007068:	3b01      	subs	r3, #1
 800706a:	b29a      	uxth	r2, r3
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007070:	e018      	b.n	80070a4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007072:	f7fd f891 	bl	8004198 <HAL_GetTick>
 8007076:	4602      	mov	r2, r0
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	683a      	ldr	r2, [r7, #0]
 800707e:	429a      	cmp	r2, r3
 8007080:	d803      	bhi.n	800708a <HAL_SPI_Transmit+0x160>
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007088:	d102      	bne.n	8007090 <HAL_SPI_Transmit+0x166>
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d109      	bne.n	80070a4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2200      	movs	r2, #0
 800709c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80070a0:	2303      	movs	r3, #3
 80070a2:	e082      	b.n	80071aa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d1c7      	bne.n	800703e <HAL_SPI_Transmit+0x114>
 80070ae:	e053      	b.n	8007158 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d002      	beq.n	80070be <HAL_SPI_Transmit+0x194>
 80070b8:	8b7b      	ldrh	r3, [r7, #26]
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d147      	bne.n	800714e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	330c      	adds	r3, #12
 80070c8:	7812      	ldrb	r2, [r2, #0]
 80070ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070d0:	1c5a      	adds	r2, r3, #1
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070da:	b29b      	uxth	r3, r3
 80070dc:	3b01      	subs	r3, #1
 80070de:	b29a      	uxth	r2, r3
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80070e4:	e033      	b.n	800714e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	f003 0302 	and.w	r3, r3, #2
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d113      	bne.n	800711c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	330c      	adds	r3, #12
 80070fe:	7812      	ldrb	r2, [r2, #0]
 8007100:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007106:	1c5a      	adds	r2, r3, #1
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007110:	b29b      	uxth	r3, r3
 8007112:	3b01      	subs	r3, #1
 8007114:	b29a      	uxth	r2, r3
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	86da      	strh	r2, [r3, #54]	@ 0x36
 800711a:	e018      	b.n	800714e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800711c:	f7fd f83c 	bl	8004198 <HAL_GetTick>
 8007120:	4602      	mov	r2, r0
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	1ad3      	subs	r3, r2, r3
 8007126:	683a      	ldr	r2, [r7, #0]
 8007128:	429a      	cmp	r2, r3
 800712a:	d803      	bhi.n	8007134 <HAL_SPI_Transmit+0x20a>
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007132:	d102      	bne.n	800713a <HAL_SPI_Transmit+0x210>
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d109      	bne.n	800714e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2200      	movs	r2, #0
 8007146:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e02d      	b.n	80071aa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007152:	b29b      	uxth	r3, r3
 8007154:	2b00      	cmp	r3, #0
 8007156:	d1c6      	bne.n	80070e6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007158:	69fa      	ldr	r2, [r7, #28]
 800715a:	6839      	ldr	r1, [r7, #0]
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f000 f8bf 	bl	80072e0 <SPI_EndRxTxTransaction>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d002      	beq.n	800716e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2220      	movs	r2, #32
 800716c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d10a      	bne.n	800718c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007176:	2300      	movs	r3, #0
 8007178:	617b      	str	r3, [r7, #20]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	617b      	str	r3, [r7, #20]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	617b      	str	r3, [r7, #20]
 800718a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2200      	movs	r2, #0
 8007198:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d001      	beq.n	80071a8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	e000      	b.n	80071aa <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80071a8:	2300      	movs	r3, #0
  }
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3720      	adds	r7, #32
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80071b2:	b480      	push	{r7}
 80071b4:	b083      	sub	sp, #12
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80071c0:	b2db      	uxtb	r3, r3
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	370c      	adds	r7, #12
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
	...

080071d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b088      	sub	sp, #32
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	603b      	str	r3, [r7, #0]
 80071dc:	4613      	mov	r3, r2
 80071de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80071e0:	f7fc ffda 	bl	8004198 <HAL_GetTick>
 80071e4:	4602      	mov	r2, r0
 80071e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e8:	1a9b      	subs	r3, r3, r2
 80071ea:	683a      	ldr	r2, [r7, #0]
 80071ec:	4413      	add	r3, r2
 80071ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80071f0:	f7fc ffd2 	bl	8004198 <HAL_GetTick>
 80071f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80071f6:	4b39      	ldr	r3, [pc, #228]	@ (80072dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	015b      	lsls	r3, r3, #5
 80071fc:	0d1b      	lsrs	r3, r3, #20
 80071fe:	69fa      	ldr	r2, [r7, #28]
 8007200:	fb02 f303 	mul.w	r3, r2, r3
 8007204:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007206:	e054      	b.n	80072b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800720e:	d050      	beq.n	80072b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007210:	f7fc ffc2 	bl	8004198 <HAL_GetTick>
 8007214:	4602      	mov	r2, r0
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	1ad3      	subs	r3, r2, r3
 800721a:	69fa      	ldr	r2, [r7, #28]
 800721c:	429a      	cmp	r2, r3
 800721e:	d902      	bls.n	8007226 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d13d      	bne.n	80072a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	685a      	ldr	r2, [r3, #4]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007234:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800723e:	d111      	bne.n	8007264 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007248:	d004      	beq.n	8007254 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007252:	d107      	bne.n	8007264 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007262:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007268:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800726c:	d10f      	bne.n	800728e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800727c:	601a      	str	r2, [r3, #0]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800728c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2201      	movs	r2, #1
 8007292:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2200      	movs	r2, #0
 800729a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800729e:	2303      	movs	r3, #3
 80072a0:	e017      	b.n	80072d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d101      	bne.n	80072ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80072a8:	2300      	movs	r3, #0
 80072aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	3b01      	subs	r3, #1
 80072b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	689a      	ldr	r2, [r3, #8]
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	4013      	ands	r3, r2
 80072bc:	68ba      	ldr	r2, [r7, #8]
 80072be:	429a      	cmp	r2, r3
 80072c0:	bf0c      	ite	eq
 80072c2:	2301      	moveq	r3, #1
 80072c4:	2300      	movne	r3, #0
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	461a      	mov	r2, r3
 80072ca:	79fb      	ldrb	r3, [r7, #7]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d19b      	bne.n	8007208 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3720      	adds	r7, #32
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	20000018 	.word	0x20000018

080072e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b088      	sub	sp, #32
 80072e4:	af02      	add	r7, sp, #8
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	9300      	str	r3, [sp, #0]
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	2201      	movs	r2, #1
 80072f4:	2102      	movs	r1, #2
 80072f6:	68f8      	ldr	r0, [r7, #12]
 80072f8:	f7ff ff6a 	bl	80071d0 <SPI_WaitFlagStateUntilTimeout>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d007      	beq.n	8007312 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007306:	f043 0220 	orr.w	r2, r3, #32
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800730e:	2303      	movs	r3, #3
 8007310:	e032      	b.n	8007378 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007312:	4b1b      	ldr	r3, [pc, #108]	@ (8007380 <SPI_EndRxTxTransaction+0xa0>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a1b      	ldr	r2, [pc, #108]	@ (8007384 <SPI_EndRxTxTransaction+0xa4>)
 8007318:	fba2 2303 	umull	r2, r3, r2, r3
 800731c:	0d5b      	lsrs	r3, r3, #21
 800731e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007322:	fb02 f303 	mul.w	r3, r2, r3
 8007326:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007330:	d112      	bne.n	8007358 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	2200      	movs	r2, #0
 800733a:	2180      	movs	r1, #128	@ 0x80
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	f7ff ff47 	bl	80071d0 <SPI_WaitFlagStateUntilTimeout>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d016      	beq.n	8007376 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800734c:	f043 0220 	orr.w	r2, r3, #32
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007354:	2303      	movs	r3, #3
 8007356:	e00f      	b.n	8007378 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00a      	beq.n	8007374 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	3b01      	subs	r3, #1
 8007362:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800736e:	2b80      	cmp	r3, #128	@ 0x80
 8007370:	d0f2      	beq.n	8007358 <SPI_EndRxTxTransaction+0x78>
 8007372:	e000      	b.n	8007376 <SPI_EndRxTxTransaction+0x96>
        break;
 8007374:	bf00      	nop
  }

  return HAL_OK;
 8007376:	2300      	movs	r3, #0
}
 8007378:	4618      	mov	r0, r3
 800737a:	3718      	adds	r7, #24
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}
 8007380:	20000018 	.word	0x20000018
 8007384:	165e9f81 	.word	0x165e9f81

08007388 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d101      	bne.n	800739a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	e041      	b.n	800741e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d106      	bne.n	80073b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f7fc fbaa 	bl	8003b08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2202      	movs	r2, #2
 80073b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	3304      	adds	r3, #4
 80073c4:	4619      	mov	r1, r3
 80073c6:	4610      	mov	r0, r2
 80073c8:	f000 f89e 	bl	8007508 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3708      	adds	r7, #8
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
	...

08007428 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007428:	b480      	push	{r7}
 800742a:	b085      	sub	sp, #20
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007436:	b2db      	uxtb	r3, r3
 8007438:	2b01      	cmp	r3, #1
 800743a:	d001      	beq.n	8007440 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	e04e      	b.n	80074de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2202      	movs	r2, #2
 8007444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68da      	ldr	r2, [r3, #12]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f042 0201 	orr.w	r2, r2, #1
 8007456:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a23      	ldr	r2, [pc, #140]	@ (80074ec <HAL_TIM_Base_Start_IT+0xc4>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d022      	beq.n	80074a8 <HAL_TIM_Base_Start_IT+0x80>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800746a:	d01d      	beq.n	80074a8 <HAL_TIM_Base_Start_IT+0x80>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a1f      	ldr	r2, [pc, #124]	@ (80074f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d018      	beq.n	80074a8 <HAL_TIM_Base_Start_IT+0x80>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a1e      	ldr	r2, [pc, #120]	@ (80074f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d013      	beq.n	80074a8 <HAL_TIM_Base_Start_IT+0x80>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a1c      	ldr	r2, [pc, #112]	@ (80074f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d00e      	beq.n	80074a8 <HAL_TIM_Base_Start_IT+0x80>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a1b      	ldr	r2, [pc, #108]	@ (80074fc <HAL_TIM_Base_Start_IT+0xd4>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d009      	beq.n	80074a8 <HAL_TIM_Base_Start_IT+0x80>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a19      	ldr	r2, [pc, #100]	@ (8007500 <HAL_TIM_Base_Start_IT+0xd8>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d004      	beq.n	80074a8 <HAL_TIM_Base_Start_IT+0x80>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a18      	ldr	r2, [pc, #96]	@ (8007504 <HAL_TIM_Base_Start_IT+0xdc>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d111      	bne.n	80074cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	f003 0307 	and.w	r3, r3, #7
 80074b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2b06      	cmp	r3, #6
 80074b8:	d010      	beq.n	80074dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f042 0201 	orr.w	r2, r2, #1
 80074c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074ca:	e007      	b.n	80074dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f042 0201 	orr.w	r2, r2, #1
 80074da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3714      	adds	r7, #20
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr
 80074ea:	bf00      	nop
 80074ec:	40010000 	.word	0x40010000
 80074f0:	40000400 	.word	0x40000400
 80074f4:	40000800 	.word	0x40000800
 80074f8:	40000c00 	.word	0x40000c00
 80074fc:	40010400 	.word	0x40010400
 8007500:	40014000 	.word	0x40014000
 8007504:	40001800 	.word	0x40001800

08007508 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a46      	ldr	r2, [pc, #280]	@ (8007634 <TIM_Base_SetConfig+0x12c>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d013      	beq.n	8007548 <TIM_Base_SetConfig+0x40>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007526:	d00f      	beq.n	8007548 <TIM_Base_SetConfig+0x40>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a43      	ldr	r2, [pc, #268]	@ (8007638 <TIM_Base_SetConfig+0x130>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d00b      	beq.n	8007548 <TIM_Base_SetConfig+0x40>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a42      	ldr	r2, [pc, #264]	@ (800763c <TIM_Base_SetConfig+0x134>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d007      	beq.n	8007548 <TIM_Base_SetConfig+0x40>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a41      	ldr	r2, [pc, #260]	@ (8007640 <TIM_Base_SetConfig+0x138>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d003      	beq.n	8007548 <TIM_Base_SetConfig+0x40>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a40      	ldr	r2, [pc, #256]	@ (8007644 <TIM_Base_SetConfig+0x13c>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d108      	bne.n	800755a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800754e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	4313      	orrs	r3, r2
 8007558:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a35      	ldr	r2, [pc, #212]	@ (8007634 <TIM_Base_SetConfig+0x12c>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d02b      	beq.n	80075ba <TIM_Base_SetConfig+0xb2>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007568:	d027      	beq.n	80075ba <TIM_Base_SetConfig+0xb2>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a32      	ldr	r2, [pc, #200]	@ (8007638 <TIM_Base_SetConfig+0x130>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d023      	beq.n	80075ba <TIM_Base_SetConfig+0xb2>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a31      	ldr	r2, [pc, #196]	@ (800763c <TIM_Base_SetConfig+0x134>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d01f      	beq.n	80075ba <TIM_Base_SetConfig+0xb2>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4a30      	ldr	r2, [pc, #192]	@ (8007640 <TIM_Base_SetConfig+0x138>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d01b      	beq.n	80075ba <TIM_Base_SetConfig+0xb2>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a2f      	ldr	r2, [pc, #188]	@ (8007644 <TIM_Base_SetConfig+0x13c>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d017      	beq.n	80075ba <TIM_Base_SetConfig+0xb2>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4a2e      	ldr	r2, [pc, #184]	@ (8007648 <TIM_Base_SetConfig+0x140>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d013      	beq.n	80075ba <TIM_Base_SetConfig+0xb2>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a2d      	ldr	r2, [pc, #180]	@ (800764c <TIM_Base_SetConfig+0x144>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d00f      	beq.n	80075ba <TIM_Base_SetConfig+0xb2>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a2c      	ldr	r2, [pc, #176]	@ (8007650 <TIM_Base_SetConfig+0x148>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d00b      	beq.n	80075ba <TIM_Base_SetConfig+0xb2>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4a2b      	ldr	r2, [pc, #172]	@ (8007654 <TIM_Base_SetConfig+0x14c>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d007      	beq.n	80075ba <TIM_Base_SetConfig+0xb2>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a2a      	ldr	r2, [pc, #168]	@ (8007658 <TIM_Base_SetConfig+0x150>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d003      	beq.n	80075ba <TIM_Base_SetConfig+0xb2>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a29      	ldr	r2, [pc, #164]	@ (800765c <TIM_Base_SetConfig+0x154>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d108      	bne.n	80075cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	68fa      	ldr	r2, [r7, #12]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	695b      	ldr	r3, [r3, #20]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	689a      	ldr	r2, [r3, #8]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4a10      	ldr	r2, [pc, #64]	@ (8007634 <TIM_Base_SetConfig+0x12c>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d003      	beq.n	8007600 <TIM_Base_SetConfig+0xf8>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4a12      	ldr	r2, [pc, #72]	@ (8007644 <TIM_Base_SetConfig+0x13c>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d103      	bne.n	8007608 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	691a      	ldr	r2, [r3, #16]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	691b      	ldr	r3, [r3, #16]
 8007612:	f003 0301 	and.w	r3, r3, #1
 8007616:	2b01      	cmp	r3, #1
 8007618:	d105      	bne.n	8007626 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	691b      	ldr	r3, [r3, #16]
 800761e:	f023 0201 	bic.w	r2, r3, #1
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	611a      	str	r2, [r3, #16]
  }
}
 8007626:	bf00      	nop
 8007628:	3714      	adds	r7, #20
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr
 8007632:	bf00      	nop
 8007634:	40010000 	.word	0x40010000
 8007638:	40000400 	.word	0x40000400
 800763c:	40000800 	.word	0x40000800
 8007640:	40000c00 	.word	0x40000c00
 8007644:	40010400 	.word	0x40010400
 8007648:	40014000 	.word	0x40014000
 800764c:	40014400 	.word	0x40014400
 8007650:	40014800 	.word	0x40014800
 8007654:	40001800 	.word	0x40001800
 8007658:	40001c00 	.word	0x40001c00
 800765c:	40002000 	.word	0x40002000

08007660 <memset>:
 8007660:	4402      	add	r2, r0
 8007662:	4603      	mov	r3, r0
 8007664:	4293      	cmp	r3, r2
 8007666:	d100      	bne.n	800766a <memset+0xa>
 8007668:	4770      	bx	lr
 800766a:	f803 1b01 	strb.w	r1, [r3], #1
 800766e:	e7f9      	b.n	8007664 <memset+0x4>

08007670 <__libc_init_array>:
 8007670:	b570      	push	{r4, r5, r6, lr}
 8007672:	4d0d      	ldr	r5, [pc, #52]	@ (80076a8 <__libc_init_array+0x38>)
 8007674:	4c0d      	ldr	r4, [pc, #52]	@ (80076ac <__libc_init_array+0x3c>)
 8007676:	1b64      	subs	r4, r4, r5
 8007678:	10a4      	asrs	r4, r4, #2
 800767a:	2600      	movs	r6, #0
 800767c:	42a6      	cmp	r6, r4
 800767e:	d109      	bne.n	8007694 <__libc_init_array+0x24>
 8007680:	4d0b      	ldr	r5, [pc, #44]	@ (80076b0 <__libc_init_array+0x40>)
 8007682:	4c0c      	ldr	r4, [pc, #48]	@ (80076b4 <__libc_init_array+0x44>)
 8007684:	f000 f818 	bl	80076b8 <_init>
 8007688:	1b64      	subs	r4, r4, r5
 800768a:	10a4      	asrs	r4, r4, #2
 800768c:	2600      	movs	r6, #0
 800768e:	42a6      	cmp	r6, r4
 8007690:	d105      	bne.n	800769e <__libc_init_array+0x2e>
 8007692:	bd70      	pop	{r4, r5, r6, pc}
 8007694:	f855 3b04 	ldr.w	r3, [r5], #4
 8007698:	4798      	blx	r3
 800769a:	3601      	adds	r6, #1
 800769c:	e7ee      	b.n	800767c <__libc_init_array+0xc>
 800769e:	f855 3b04 	ldr.w	r3, [r5], #4
 80076a2:	4798      	blx	r3
 80076a4:	3601      	adds	r6, #1
 80076a6:	e7f2      	b.n	800768e <__libc_init_array+0x1e>
 80076a8:	080091c0 	.word	0x080091c0
 80076ac:	080091c0 	.word	0x080091c0
 80076b0:	080091c0 	.word	0x080091c0
 80076b4:	080091c4 	.word	0x080091c4

080076b8 <_init>:
 80076b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ba:	bf00      	nop
 80076bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076be:	bc08      	pop	{r3}
 80076c0:	469e      	mov	lr, r3
 80076c2:	4770      	bx	lr

080076c4 <_fini>:
 80076c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076c6:	bf00      	nop
 80076c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ca:	bc08      	pop	{r3}
 80076cc:	469e      	mov	lr, r3
 80076ce:	4770      	bx	lr
