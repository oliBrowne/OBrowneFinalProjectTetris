
OBrowneFinalProjectTetris.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c7c  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ae0  08003e28  08003e28  00004e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005908  08005908  00007024  2**0
                  CONTENTS
  4 .ARM          00000008  08005908  08005908  00006908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005910  08005910  00007024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005910  08005910  00006910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005914  08005914  00006914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08005918  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007024  2**0
                  CONTENTS
 10 .bss          00025958  20000024  20000024  00007024  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2002597c  2002597c  00007024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007024  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009a65  00000000  00000000  00007054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ec5  00000000  00000000  00010ab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a18  00000000  00000000  00012980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000774  00000000  00000000  00013398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025c07  00000000  00000000  00013b0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c836  00000000  00000000  00039713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0565  00000000  00000000  00045f49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001264ae  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002784  00000000  00000000  001264f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000086  00000000  00000000  00128c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000024 	.word	0x20000024
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003e10 	.word	0x08003e10

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000028 	.word	0x20000028
 80001e8:	08003e10 	.word	0x08003e10

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80004e0:	f001 fc2f 	bl	8001d42 <initialise_monitor_handles>
    LTCD__Init();
 80004e4:	f000 f918 	bl	8000718 <LTCD__Init>
    LTCD_Layer_Init(0);
 80004e8:	2000      	movs	r0, #0
 80004ea:	f000 f8d5 	bl	8000698 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 80004ee:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80004f2:	2000      	movs	r0, #0
 80004f4:	f000 fa02 	bl	80008fc <LCD_Clear>
	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}

080004fc <LCD_Visual_Demo>:

void LCD_Visual_Demo(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	visualDemo();
 8000500:	f000 ff02 	bl	8001308 <visualDemo>
}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}

08000508 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08c      	sub	sp, #48	@ 0x30
 800050c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800050e:	2300      	movs	r3, #0
 8000510:	61bb      	str	r3, [r7, #24]
 8000512:	4b5a      	ldr	r3, [pc, #360]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000516:	4a59      	ldr	r2, [pc, #356]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000518:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800051c:	6453      	str	r3, [r2, #68]	@ 0x44
 800051e:	4b57      	ldr	r3, [pc, #348]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000522:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000526:	61bb      	str	r3, [r7, #24]
 8000528:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	617b      	str	r3, [r7, #20]
 800052e:	4b53      	ldr	r3, [pc, #332]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000532:	4a52      	ldr	r2, [pc, #328]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	6313      	str	r3, [r2, #48]	@ 0x30
 800053a:	4b50      	ldr	r3, [pc, #320]	@ (800067c <LCD_GPIO_Init+0x174>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	617b      	str	r3, [r7, #20]
 8000544:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000546:	2300      	movs	r3, #0
 8000548:	613b      	str	r3, [r7, #16]
 800054a:	4b4c      	ldr	r3, [pc, #304]	@ (800067c <LCD_GPIO_Init+0x174>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054e:	4a4b      	ldr	r2, [pc, #300]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000550:	f043 0302 	orr.w	r3, r3, #2
 8000554:	6313      	str	r3, [r2, #48]	@ 0x30
 8000556:	4b49      	ldr	r3, [pc, #292]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055a:	f003 0302 	and.w	r3, r3, #2
 800055e:	613b      	str	r3, [r7, #16]
 8000560:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000562:	2300      	movs	r3, #0
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	4b45      	ldr	r3, [pc, #276]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056a:	4a44      	ldr	r2, [pc, #272]	@ (800067c <LCD_GPIO_Init+0x174>)
 800056c:	f043 0304 	orr.w	r3, r3, #4
 8000570:	6313      	str	r3, [r2, #48]	@ 0x30
 8000572:	4b42      	ldr	r3, [pc, #264]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000576:	f003 0304 	and.w	r3, r3, #4
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	4b3e      	ldr	r3, [pc, #248]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000586:	4a3d      	ldr	r2, [pc, #244]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000588:	f043 0308 	orr.w	r3, r3, #8
 800058c:	6313      	str	r3, [r2, #48]	@ 0x30
 800058e:	4b3b      	ldr	r3, [pc, #236]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000592:	f003 0308 	and.w	r3, r3, #8
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	4b37      	ldr	r3, [pc, #220]	@ (800067c <LCD_GPIO_Init+0x174>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a2:	4a36      	ldr	r2, [pc, #216]	@ (800067c <LCD_GPIO_Init+0x174>)
 80005a4:	f043 0320 	orr.w	r3, r3, #32
 80005a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005aa:	4b34      	ldr	r3, [pc, #208]	@ (800067c <LCD_GPIO_Init+0x174>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	f003 0320 	and.w	r3, r3, #32
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	603b      	str	r3, [r7, #0]
 80005ba:	4b30      	ldr	r3, [pc, #192]	@ (800067c <LCD_GPIO_Init+0x174>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005be:	4a2f      	ldr	r2, [pc, #188]	@ (800067c <LCD_GPIO_Init+0x174>)
 80005c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005c6:	4b2d      	ldr	r3, [pc, #180]	@ (800067c <LCD_GPIO_Init+0x174>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80005ce:	603b      	str	r3, [r7, #0]
 80005d0:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80005d2:	f641 0358 	movw	r3, #6232	@ 0x1858
 80005d6:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80005d8:	2302      	movs	r3, #2
 80005da:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80005dc:	2300      	movs	r3, #0
 80005de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80005e0:	2302      	movs	r3, #2
 80005e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80005e4:	230e      	movs	r3, #14
 80005e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80005e8:	f107 031c 	add.w	r3, r7, #28
 80005ec:	4619      	mov	r1, r3
 80005ee:	4824      	ldr	r0, [pc, #144]	@ (8000680 <LCD_GPIO_Init+0x178>)
 80005f0:	f001 fd66 	bl	80020c0 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80005f4:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80005f8:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80005fa:	f107 031c 	add.w	r3, r7, #28
 80005fe:	4619      	mov	r1, r3
 8000600:	4820      	ldr	r0, [pc, #128]	@ (8000684 <LCD_GPIO_Init+0x17c>)
 8000602:	f001 fd5d 	bl	80020c0 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000606:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800060a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800060c:	f107 031c 	add.w	r3, r7, #28
 8000610:	4619      	mov	r1, r3
 8000612:	481d      	ldr	r0, [pc, #116]	@ (8000688 <LCD_GPIO_Init+0x180>)
 8000614:	f001 fd54 	bl	80020c0 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000618:	2348      	movs	r3, #72	@ 0x48
 800061a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800061c:	f107 031c 	add.w	r3, r7, #28
 8000620:	4619      	mov	r1, r3
 8000622:	481a      	ldr	r0, [pc, #104]	@ (800068c <LCD_GPIO_Init+0x184>)
 8000624:	f001 fd4c 	bl	80020c0 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000628:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800062c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800062e:	f107 031c 	add.w	r3, r7, #28
 8000632:	4619      	mov	r1, r3
 8000634:	4816      	ldr	r0, [pc, #88]	@ (8000690 <LCD_GPIO_Init+0x188>)
 8000636:	f001 fd43 	bl	80020c0 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800063a:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800063e:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000640:	f107 031c 	add.w	r3, r7, #28
 8000644:	4619      	mov	r1, r3
 8000646:	4813      	ldr	r0, [pc, #76]	@ (8000694 <LCD_GPIO_Init+0x18c>)
 8000648:	f001 fd3a 	bl	80020c0 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800064c:	2303      	movs	r3, #3
 800064e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000650:	2309      	movs	r3, #9
 8000652:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000654:	f107 031c 	add.w	r3, r7, #28
 8000658:	4619      	mov	r1, r3
 800065a:	480a      	ldr	r0, [pc, #40]	@ (8000684 <LCD_GPIO_Init+0x17c>)
 800065c:	f001 fd30 	bl	80020c0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000660:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000664:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000666:	f107 031c 	add.w	r3, r7, #28
 800066a:	4619      	mov	r1, r3
 800066c:	4809      	ldr	r0, [pc, #36]	@ (8000694 <LCD_GPIO_Init+0x18c>)
 800066e:	f001 fd27 	bl	80020c0 <HAL_GPIO_Init>
}
 8000672:	bf00      	nop
 8000674:	3730      	adds	r7, #48	@ 0x30
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40023800 	.word	0x40023800
 8000680:	40020000 	.word	0x40020000
 8000684:	40020400 	.word	0x40020400
 8000688:	40020800 	.word	0x40020800
 800068c:	40020c00 	.word	0x40020c00
 8000690:	40021400 	.word	0x40021400
 8000694:	40021800 	.word	0x40021800

08000698 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b090      	sub	sp, #64	@ 0x40
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 80006a2:	2300      	movs	r3, #0
 80006a4:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 80006a6:	23f0      	movs	r3, #240	@ 0xf0
 80006a8:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 80006ae:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80006b2:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 80006b4:	2302      	movs	r3, #2
 80006b6:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 80006b8:	23ff      	movs	r3, #255	@ 0xff
 80006ba:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80006c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80006c6:	2305      	movs	r3, #5
 80006c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d101      	bne.n	80006d4 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000710 <LTCD_Layer_Init+0x78>)
 80006d2:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 80006d4:	23f0      	movs	r3, #240	@ 0xf0
 80006d6:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 80006d8:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80006dc:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 80006f0:	79fa      	ldrb	r2, [r7, #7]
 80006f2:	f107 030c 	add.w	r3, r7, #12
 80006f6:	4619      	mov	r1, r3
 80006f8:	4806      	ldr	r0, [pc, #24]	@ (8000714 <LTCD_Layer_Init+0x7c>)
 80006fa:	f002 f883 	bl	8002804 <HAL_LTDC_ConfigLayer>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000704:	f000 fe12 	bl	800132c <LCD_Error_Handler>
	}
}
 8000708:	bf00      	nop
 800070a:	3740      	adds	r7, #64	@ 0x40
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	2000011c 	.word	0x2000011c
 8000714:	20000040 	.word	0x20000040

08000718 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 800071c:	4b2a      	ldr	r3, [pc, #168]	@ (80007c8 <LTCD__Init+0xb0>)
 800071e:	4a2b      	ldr	r2, [pc, #172]	@ (80007cc <LTCD__Init+0xb4>)
 8000720:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000722:	4b29      	ldr	r3, [pc, #164]	@ (80007c8 <LTCD__Init+0xb0>)
 8000724:	2209      	movs	r2, #9
 8000726:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000728:	4b27      	ldr	r3, [pc, #156]	@ (80007c8 <LTCD__Init+0xb0>)
 800072a:	2201      	movs	r2, #1
 800072c:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 800072e:	4b26      	ldr	r3, [pc, #152]	@ (80007c8 <LTCD__Init+0xb0>)
 8000730:	221d      	movs	r2, #29
 8000732:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000734:	4b24      	ldr	r3, [pc, #144]	@ (80007c8 <LTCD__Init+0xb0>)
 8000736:	2203      	movs	r2, #3
 8000738:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 800073a:	4b23      	ldr	r3, [pc, #140]	@ (80007c8 <LTCD__Init+0xb0>)
 800073c:	f240 120d 	movw	r2, #269	@ 0x10d
 8000740:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000742:	4b21      	ldr	r3, [pc, #132]	@ (80007c8 <LTCD__Init+0xb0>)
 8000744:	f240 1243 	movw	r2, #323	@ 0x143
 8000748:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 800074a:	4b1f      	ldr	r3, [pc, #124]	@ (80007c8 <LTCD__Init+0xb0>)
 800074c:	f240 1217 	movw	r2, #279	@ 0x117
 8000750:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000752:	4b1d      	ldr	r3, [pc, #116]	@ (80007c8 <LTCD__Init+0xb0>)
 8000754:	f240 1247 	movw	r2, #327	@ 0x147
 8000758:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 800075a:	4b1b      	ldr	r3, [pc, #108]	@ (80007c8 <LTCD__Init+0xb0>)
 800075c:	2200      	movs	r2, #0
 800075e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000762:	4b19      	ldr	r3, [pc, #100]	@ (80007c8 <LTCD__Init+0xb0>)
 8000764:	2200      	movs	r2, #0
 8000766:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 800076a:	4b17      	ldr	r3, [pc, #92]	@ (80007c8 <LTCD__Init+0xb0>)
 800076c:	2200      	movs	r2, #0
 800076e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000772:	4b17      	ldr	r3, [pc, #92]	@ (80007d0 <LTCD__Init+0xb8>)
 8000774:	2208      	movs	r2, #8
 8000776:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000778:	4b15      	ldr	r3, [pc, #84]	@ (80007d0 <LTCD__Init+0xb8>)
 800077a:	22c0      	movs	r2, #192	@ 0xc0
 800077c:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800077e:	4b14      	ldr	r3, [pc, #80]	@ (80007d0 <LTCD__Init+0xb8>)
 8000780:	2204      	movs	r2, #4
 8000782:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000784:	4b12      	ldr	r3, [pc, #72]	@ (80007d0 <LTCD__Init+0xb8>)
 8000786:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800078a:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800078c:	4810      	ldr	r0, [pc, #64]	@ (80007d0 <LTCD__Init+0xb8>)
 800078e:	f002 fe73 	bl	8003478 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000792:	4b0d      	ldr	r3, [pc, #52]	@ (80007c8 <LTCD__Init+0xb0>)
 8000794:	2200      	movs	r2, #0
 8000796:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000798:	4b0b      	ldr	r3, [pc, #44]	@ (80007c8 <LTCD__Init+0xb0>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800079e:	4b0a      	ldr	r3, [pc, #40]	@ (80007c8 <LTCD__Init+0xb0>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80007a4:	4b08      	ldr	r3, [pc, #32]	@ (80007c8 <LTCD__Init+0xb0>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 80007aa:	f7ff fead 	bl	8000508 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80007ae:	4806      	ldr	r0, [pc, #24]	@ (80007c8 <LTCD__Init+0xb0>)
 80007b0:	f001 ff58 	bl	8002664 <HAL_LTDC_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 80007ba:	f000 fdb7 	bl	800132c <LCD_Error_Handler>
	 }

	ili9341_Init();
 80007be:	f000 fdbb 	bl	8001338 <ili9341_Init>
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000040 	.word	0x20000040
 80007cc:	40016800 	.word	0x40016800
 80007d0:	200000e8 	.word	0x200000e8

080007d4 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	80fb      	strh	r3, [r7, #6]
 80007de:	460b      	mov	r3, r1
 80007e0:	80bb      	strh	r3, [r7, #4]
 80007e2:	4613      	mov	r3, r2
 80007e4:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 80007e6:	88ba      	ldrh	r2, [r7, #4]
 80007e8:	4613      	mov	r3, r2
 80007ea:	011b      	lsls	r3, r3, #4
 80007ec:	1a9b      	subs	r3, r3, r2
 80007ee:	011b      	lsls	r3, r3, #4
 80007f0:	461a      	mov	r2, r3
 80007f2:	88fb      	ldrh	r3, [r7, #6]
 80007f4:	4413      	add	r3, r2
 80007f6:	4905      	ldr	r1, [pc, #20]	@ (800080c <LCD_Draw_Pixel+0x38>)
 80007f8:	887a      	ldrh	r2, [r7, #2]
 80007fa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	2000011c 	.word	0x2000011c

08000810 <LCD_Draw_Vertical_Line>:
        }
    }
}

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000810:	b590      	push	{r4, r7, lr}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	4604      	mov	r4, r0
 8000818:	4608      	mov	r0, r1
 800081a:	4611      	mov	r1, r2
 800081c:	461a      	mov	r2, r3
 800081e:	4623      	mov	r3, r4
 8000820:	80fb      	strh	r3, [r7, #6]
 8000822:	4603      	mov	r3, r0
 8000824:	80bb      	strh	r3, [r7, #4]
 8000826:	460b      	mov	r3, r1
 8000828:	807b      	strh	r3, [r7, #2]
 800082a:	4613      	mov	r3, r2
 800082c:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 800082e:	2300      	movs	r3, #0
 8000830:	81fb      	strh	r3, [r7, #14]
 8000832:	e00b      	b.n	800084c <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8000834:	89fa      	ldrh	r2, [r7, #14]
 8000836:	88bb      	ldrh	r3, [r7, #4]
 8000838:	4413      	add	r3, r2
 800083a:	b299      	uxth	r1, r3
 800083c:	883a      	ldrh	r2, [r7, #0]
 800083e:	88fb      	ldrh	r3, [r7, #6]
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ffc7 	bl	80007d4 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000846:	89fb      	ldrh	r3, [r7, #14]
 8000848:	3301      	adds	r3, #1
 800084a:	81fb      	strh	r3, [r7, #14]
 800084c:	89fa      	ldrh	r2, [r7, #14]
 800084e:	887b      	ldrh	r3, [r7, #2]
 8000850:	429a      	cmp	r2, r3
 8000852:	d3ef      	bcc.n	8000834 <LCD_Draw_Vertical_Line+0x24>
  }
}
 8000854:	bf00      	nop
 8000856:	bf00      	nop
 8000858:	3714      	adds	r7, #20
 800085a:	46bd      	mov	sp, r7
 800085c:	bd90      	pop	{r4, r7, pc}

0800085e <LCD_Draw_Horizontal_Line>:
void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 800085e:	b590      	push	{r4, r7, lr}
 8000860:	b085      	sub	sp, #20
 8000862:	af00      	add	r7, sp, #0
 8000864:	4604      	mov	r4, r0
 8000866:	4608      	mov	r0, r1
 8000868:	4611      	mov	r1, r2
 800086a:	461a      	mov	r2, r3
 800086c:	4623      	mov	r3, r4
 800086e:	80fb      	strh	r3, [r7, #6]
 8000870:	4603      	mov	r3, r0
 8000872:	80bb      	strh	r3, [r7, #4]
 8000874:	460b      	mov	r3, r1
 8000876:	807b      	strh	r3, [r7, #2]
 8000878:	4613      	mov	r3, r2
 800087a:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 800087c:	2300      	movs	r3, #0
 800087e:	81fb      	strh	r3, [r7, #14]
 8000880:	e00b      	b.n	800089a <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(x+i, y, color);
 8000882:	88fa      	ldrh	r2, [r7, #6]
 8000884:	89fb      	ldrh	r3, [r7, #14]
 8000886:	4413      	add	r3, r2
 8000888:	b29b      	uxth	r3, r3
 800088a:	883a      	ldrh	r2, [r7, #0]
 800088c:	88b9      	ldrh	r1, [r7, #4]
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff ffa0 	bl	80007d4 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000894:	89fb      	ldrh	r3, [r7, #14]
 8000896:	3301      	adds	r3, #1
 8000898:	81fb      	strh	r3, [r7, #14]
 800089a:	89fa      	ldrh	r2, [r7, #14]
 800089c:	887b      	ldrh	r3, [r7, #2]
 800089e:	429a      	cmp	r2, r3
 80008a0:	d3ef      	bcc.n	8000882 <LCD_Draw_Horizontal_Line+0x24>
  }
}
 80008a2:	bf00      	nop
 80008a4:	bf00      	nop
 80008a6:	3714      	adds	r7, #20
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd90      	pop	{r4, r7, pc}

080008ac <LCD_Draw_Box>:
void LCD_Draw_Box(uint16_t x, uint16_t y,uint16_t len, uint16_t color){
 80008ac:	b590      	push	{r4, r7, lr}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4604      	mov	r4, r0
 80008b4:	4608      	mov	r0, r1
 80008b6:	4611      	mov	r1, r2
 80008b8:	461a      	mov	r2, r3
 80008ba:	4623      	mov	r3, r4
 80008bc:	80fb      	strh	r3, [r7, #6]
 80008be:	4603      	mov	r3, r0
 80008c0:	80bb      	strh	r3, [r7, #4]
 80008c2:	460b      	mov	r3, r1
 80008c4:	807b      	strh	r3, [r7, #2]
 80008c6:	4613      	mov	r3, r2
 80008c8:	803b      	strh	r3, [r7, #0]
	for (uint16_t i = 0; i < len; i++){
 80008ca:	2300      	movs	r3, #0
 80008cc:	81fb      	strh	r3, [r7, #14]
 80008ce:	e00b      	b.n	80008e8 <LCD_Draw_Box+0x3c>
		LCD_Draw_Vertical_Line(x+i,y,len,color);
 80008d0:	88fa      	ldrh	r2, [r7, #6]
 80008d2:	89fb      	ldrh	r3, [r7, #14]
 80008d4:	4413      	add	r3, r2
 80008d6:	b298      	uxth	r0, r3
 80008d8:	883b      	ldrh	r3, [r7, #0]
 80008da:	887a      	ldrh	r2, [r7, #2]
 80008dc:	88b9      	ldrh	r1, [r7, #4]
 80008de:	f7ff ff97 	bl	8000810 <LCD_Draw_Vertical_Line>
	for (uint16_t i = 0; i < len; i++){
 80008e2:	89fb      	ldrh	r3, [r7, #14]
 80008e4:	3301      	adds	r3, #1
 80008e6:	81fb      	strh	r3, [r7, #14]
 80008e8:	89fa      	ldrh	r2, [r7, #14]
 80008ea:	887b      	ldrh	r3, [r7, #2]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d3ef      	bcc.n	80008d0 <LCD_Draw_Box+0x24>
	}

}
 80008f0:	bf00      	nop
 80008f2:	bf00      	nop
 80008f4:	3714      	adds	r7, #20
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd90      	pop	{r4, r7, pc}
	...

080008fc <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	460a      	mov	r2, r1
 8000906:	71fb      	strb	r3, [r7, #7]
 8000908:	4613      	mov	r3, r2
 800090a:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d10e      	bne.n	8000930 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	e007      	b.n	8000928 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000918:	4908      	ldr	r1, [pc, #32]	@ (800093c <LCD_Clear+0x40>)
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	88ba      	ldrh	r2, [r7, #4]
 800091e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	3301      	adds	r3, #1
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 800092e:	d3f3      	bcc.n	8000918 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000930:	bf00      	nop
 8000932:	3714      	adds	r7, #20
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	2000011c 	.word	0x2000011c

08000940 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 800094a:	4a04      	ldr	r2, [pc, #16]	@ (800095c <LCD_SetTextColor+0x1c>)
 800094c:	88fb      	ldrh	r3, [r7, #6]
 800094e:	8013      	strh	r3, [r2, #0]
}
 8000950:	bf00      	nop
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	20000000 	.word	0x20000000

08000960 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000968:	4a04      	ldr	r2, [pc, #16]	@ (800097c <LCD_SetFont+0x1c>)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	6013      	str	r3, [r2, #0]
}
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	20000118 	.word	0x20000118

08000980 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	603a      	str	r2, [r7, #0]
 800098a:	80fb      	strh	r3, [r7, #6]
 800098c:	460b      	mov	r3, r1
 800098e:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	2300      	movs	r3, #0
 8000996:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000998:	2300      	movs	r3, #0
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	e04c      	b.n	8000a38 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 800099e:	2300      	movs	r3, #0
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	e03f      	b.n	8000a24 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	683a      	ldr	r2, [r7, #0]
 80009aa:	4413      	add	r3, r2
 80009ac:	881b      	ldrh	r3, [r3, #0]
 80009ae:	4619      	mov	r1, r3
 80009b0:	4b27      	ldr	r3, [pc, #156]	@ (8000a50 <LCD_Draw_Char+0xd0>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	889b      	ldrh	r3, [r3, #4]
 80009b6:	4a27      	ldr	r2, [pc, #156]	@ (8000a54 <LCD_Draw_Char+0xd4>)
 80009b8:	fba2 2303 	umull	r2, r3, r2, r3
 80009bc:	08db      	lsrs	r3, r3, #3
 80009be:	b29b      	uxth	r3, r3
 80009c0:	00db      	lsls	r3, r3, #3
 80009c2:	2280      	movs	r2, #128	@ 0x80
 80009c4:	409a      	lsls	r2, r3
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	fa42 f303 	asr.w	r3, r2, r3
 80009cc:	400b      	ands	r3, r1
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d104      	bne.n	80009dc <LCD_Draw_Char+0x5c>
 80009d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a50 <LCD_Draw_Char+0xd0>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	889b      	ldrh	r3, [r3, #4]
 80009d8:	2b0c      	cmp	r3, #12
 80009da:	d920      	bls.n	8000a1e <LCD_Draw_Char+0x9e>
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	683a      	ldr	r2, [r7, #0]
 80009e2:	4413      	add	r3, r2
 80009e4:	881b      	ldrh	r3, [r3, #0]
 80009e6:	461a      	mov	r2, r3
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	fa42 f303 	asr.w	r3, r2, r3
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d104      	bne.n	8000a00 <LCD_Draw_Char+0x80>
 80009f6:	4b16      	ldr	r3, [pc, #88]	@ (8000a50 <LCD_Draw_Char+0xd0>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	889b      	ldrh	r3, [r3, #4]
 80009fc:	2b0c      	cmp	r3, #12
 80009fe:	d80e      	bhi.n	8000a1e <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	b29a      	uxth	r2, r3
 8000a04:	88fb      	ldrh	r3, [r7, #6]
 8000a06:	4413      	add	r3, r2
 8000a08:	b298      	uxth	r0, r3
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	b29a      	uxth	r2, r3
 8000a0e:	88bb      	ldrh	r3, [r7, #4]
 8000a10:	4413      	add	r3, r2
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	4a10      	ldr	r2, [pc, #64]	@ (8000a58 <LCD_Draw_Char+0xd8>)
 8000a16:	8812      	ldrh	r2, [r2, #0]
 8000a18:	4619      	mov	r1, r3
 8000a1a:	f7ff fedb 	bl	80007d4 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	3301      	adds	r3, #1
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	4b0a      	ldr	r3, [pc, #40]	@ (8000a50 <LCD_Draw_Char+0xd0>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	889b      	ldrh	r3, [r3, #4]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d3b8      	bcc.n	80009a4 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	3301      	adds	r3, #1
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	4b05      	ldr	r3, [pc, #20]	@ (8000a50 <LCD_Draw_Char+0xd0>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	88db      	ldrh	r3, [r3, #6]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d3ab      	bcc.n	800099e <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000a46:	bf00      	nop
 8000a48:	bf00      	nop
 8000a4a:	3710      	adds	r7, #16
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000118 	.word	0x20000118
 8000a54:	aaaaaaab 	.word	0xaaaaaaab
 8000a58:	20000000 	.word	0x20000000

08000a5c <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	80fb      	strh	r3, [r7, #6]
 8000a66:	460b      	mov	r3, r1
 8000a68:	80bb      	strh	r3, [r7, #4]
 8000a6a:	4613      	mov	r3, r2
 8000a6c:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000a6e:	78fb      	ldrb	r3, [r7, #3]
 8000a70:	3b20      	subs	r3, #32
 8000a72:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000a74:	4b09      	ldr	r3, [pc, #36]	@ (8000a9c <LCD_DisplayChar+0x40>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	78fb      	ldrb	r3, [r7, #3]
 8000a7c:	4907      	ldr	r1, [pc, #28]	@ (8000a9c <LCD_DisplayChar+0x40>)
 8000a7e:	6809      	ldr	r1, [r1, #0]
 8000a80:	88c9      	ldrh	r1, [r1, #6]
 8000a82:	fb01 f303 	mul.w	r3, r1, r3
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	441a      	add	r2, r3
 8000a8a:	88b9      	ldrh	r1, [r7, #4]
 8000a8c:	88fb      	ldrh	r3, [r7, #6]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff ff76 	bl	8000980 <LCD_Draw_Char>
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000118 	.word	0x20000118

08000aa0 <title_screen>:
void title_screen(void){
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0

	LCD_SetFont(&Font16x24);
 8000aa4:	48fd      	ldr	r0, [pc, #1012]	@ (8000e9c <title_screen+0x3fc>)
 8000aa6:	f7ff ff5b 	bl	8000960 <LCD_SetFont>

	LCD_SetTextColor(LCD_COLOR_BLACK);
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f7ff ff48 	bl	8000940 <LCD_SetTextColor>
	LCD_DisplayChar(100,140,'T');
 8000ab0:	2254      	movs	r2, #84	@ 0x54
 8000ab2:	218c      	movs	r1, #140	@ 0x8c
 8000ab4:	2064      	movs	r0, #100	@ 0x64
 8000ab6:	f7ff ffd1 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(115,140,'E');
 8000aba:	2245      	movs	r2, #69	@ 0x45
 8000abc:	218c      	movs	r1, #140	@ 0x8c
 8000abe:	2073      	movs	r0, #115	@ 0x73
 8000ac0:	f7ff ffcc 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(130,140,'T');
 8000ac4:	2254      	movs	r2, #84	@ 0x54
 8000ac6:	218c      	movs	r1, #140	@ 0x8c
 8000ac8:	2082      	movs	r0, #130	@ 0x82
 8000aca:	f7ff ffc7 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(145,140,'R');
 8000ace:	2252      	movs	r2, #82	@ 0x52
 8000ad0:	218c      	movs	r1, #140	@ 0x8c
 8000ad2:	2091      	movs	r0, #145	@ 0x91
 8000ad4:	f7ff ffc2 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(155,140,'I');
 8000ad8:	2249      	movs	r2, #73	@ 0x49
 8000ada:	218c      	movs	r1, #140	@ 0x8c
 8000adc:	209b      	movs	r0, #155	@ 0x9b
 8000ade:	f7ff ffbd 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(165,140,'S');
 8000ae2:	2253      	movs	r2, #83	@ 0x53
 8000ae4:	218c      	movs	r1, #140	@ 0x8c
 8000ae6:	20a5      	movs	r0, #165	@ 0xa5
 8000ae8:	f7ff ffb8 	bl	8000a5c <LCD_DisplayChar>

	//line
	LCD_Draw_Box(20,80,20,LCD_COLOR_CYAN);
 8000aec:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000af0:	2214      	movs	r2, #20
 8000af2:	2150      	movs	r1, #80	@ 0x50
 8000af4:	2014      	movs	r0, #20
 8000af6:	f7ff fed9 	bl	80008ac <LCD_Draw_Box>
	LCD_Draw_Box(20,60,20,LCD_COLOR_CYAN);
 8000afa:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000afe:	2214      	movs	r2, #20
 8000b00:	213c      	movs	r1, #60	@ 0x3c
 8000b02:	2014      	movs	r0, #20
 8000b04:	f7ff fed2 	bl	80008ac <LCD_Draw_Box>
	LCD_Draw_Box(20,20,20,LCD_COLOR_CYAN);
 8000b08:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000b0c:	2214      	movs	r2, #20
 8000b0e:	2114      	movs	r1, #20
 8000b10:	2014      	movs	r0, #20
 8000b12:	f7ff fecb 	bl	80008ac <LCD_Draw_Box>
	LCD_Draw_Box(20,40,20,LCD_COLOR_CYAN);
 8000b16:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000b1a:	2214      	movs	r2, #20
 8000b1c:	2128      	movs	r1, #40	@ 0x28
 8000b1e:	2014      	movs	r0, #20
 8000b20:	f7ff fec4 	bl	80008ac <LCD_Draw_Box>

	HAL_Delay(500);
 8000b24:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b28:	f001 f9c0 	bl	8001eac <HAL_Delay>
	LCD_Clear(0, LCD_COLOR_BLACK);
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	2000      	movs	r0, #0
 8000b30:	f7ff fee4 	bl	80008fc <LCD_Clear>

	LCD_SetTextColor(LCD_COLOR_WHITE);
 8000b34:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000b38:	f7ff ff02 	bl	8000940 <LCD_SetTextColor>
	LCD_DisplayChar(100,140,'T');
 8000b3c:	2254      	movs	r2, #84	@ 0x54
 8000b3e:	218c      	movs	r1, #140	@ 0x8c
 8000b40:	2064      	movs	r0, #100	@ 0x64
 8000b42:	f7ff ff8b 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(115,140,'E');
 8000b46:	2245      	movs	r2, #69	@ 0x45
 8000b48:	218c      	movs	r1, #140	@ 0x8c
 8000b4a:	2073      	movs	r0, #115	@ 0x73
 8000b4c:	f7ff ff86 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(130,140,'T');
 8000b50:	2254      	movs	r2, #84	@ 0x54
 8000b52:	218c      	movs	r1, #140	@ 0x8c
 8000b54:	2082      	movs	r0, #130	@ 0x82
 8000b56:	f7ff ff81 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(145,140,'R');
 8000b5a:	2252      	movs	r2, #82	@ 0x52
 8000b5c:	218c      	movs	r1, #140	@ 0x8c
 8000b5e:	2091      	movs	r0, #145	@ 0x91
 8000b60:	f7ff ff7c 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(155,140,'I');
 8000b64:	2249      	movs	r2, #73	@ 0x49
 8000b66:	218c      	movs	r1, #140	@ 0x8c
 8000b68:	209b      	movs	r0, #155	@ 0x9b
 8000b6a:	f7ff ff77 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(165,140,'S');
 8000b6e:	2253      	movs	r2, #83	@ 0x53
 8000b70:	218c      	movs	r1, #140	@ 0x8c
 8000b72:	20a5      	movs	r0, #165	@ 0xa5
 8000b74:	f7ff ff72 	bl	8000a5c <LCD_DisplayChar>
	//square
	LCD_Draw_Box(160,200,20,LCD_COLOR_RED);
 8000b78:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000b7c:	2214      	movs	r2, #20
 8000b7e:	21c8      	movs	r1, #200	@ 0xc8
 8000b80:	20a0      	movs	r0, #160	@ 0xa0
 8000b82:	f7ff fe93 	bl	80008ac <LCD_Draw_Box>
	LCD_Draw_Box(180,200,20,LCD_COLOR_RED);
 8000b86:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000b8a:	2214      	movs	r2, #20
 8000b8c:	21c8      	movs	r1, #200	@ 0xc8
 8000b8e:	20b4      	movs	r0, #180	@ 0xb4
 8000b90:	f7ff fe8c 	bl	80008ac <LCD_Draw_Box>
	LCD_Draw_Box(180,220,20,LCD_COLOR_RED);
 8000b94:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000b98:	2214      	movs	r2, #20
 8000b9a:	21dc      	movs	r1, #220	@ 0xdc
 8000b9c:	20b4      	movs	r0, #180	@ 0xb4
 8000b9e:	f7ff fe85 	bl	80008ac <LCD_Draw_Box>
	LCD_Draw_Box(160,220,20,LCD_COLOR_RED);
 8000ba2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000ba6:	2214      	movs	r2, #20
 8000ba8:	21dc      	movs	r1, #220	@ 0xdc
 8000baa:	20a0      	movs	r0, #160	@ 0xa0
 8000bac:	f7ff fe7e 	bl	80008ac <LCD_Draw_Box>

	HAL_Delay(500);
 8000bb0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000bb4:	f001 f97a 	bl	8001eac <HAL_Delay>
	LCD_Clear(0, LCD_COLOR_WHITE);
 8000bb8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	f7ff fe9d 	bl	80008fc <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	f7ff febc 	bl	8000940 <LCD_SetTextColor>
	LCD_DisplayChar(100,140,'T');
 8000bc8:	2254      	movs	r2, #84	@ 0x54
 8000bca:	218c      	movs	r1, #140	@ 0x8c
 8000bcc:	2064      	movs	r0, #100	@ 0x64
 8000bce:	f7ff ff45 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(115,140,'E');
 8000bd2:	2245      	movs	r2, #69	@ 0x45
 8000bd4:	218c      	movs	r1, #140	@ 0x8c
 8000bd6:	2073      	movs	r0, #115	@ 0x73
 8000bd8:	f7ff ff40 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(130,140,'T');
 8000bdc:	2254      	movs	r2, #84	@ 0x54
 8000bde:	218c      	movs	r1, #140	@ 0x8c
 8000be0:	2082      	movs	r0, #130	@ 0x82
 8000be2:	f7ff ff3b 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(145,140,'R');
 8000be6:	2252      	movs	r2, #82	@ 0x52
 8000be8:	218c      	movs	r1, #140	@ 0x8c
 8000bea:	2091      	movs	r0, #145	@ 0x91
 8000bec:	f7ff ff36 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(155,140,'I');
 8000bf0:	2249      	movs	r2, #73	@ 0x49
 8000bf2:	218c      	movs	r1, #140	@ 0x8c
 8000bf4:	209b      	movs	r0, #155	@ 0x9b
 8000bf6:	f7ff ff31 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(165,140,'S');
 8000bfa:	2253      	movs	r2, #83	@ 0x53
 8000bfc:	218c      	movs	r1, #140	@ 0x8c
 8000bfe:	20a5      	movs	r0, #165	@ 0xa5
 8000c00:	f7ff ff2c 	bl	8000a5c <LCD_DisplayChar>
	//L
	LCD_Draw_Box(20,220,20,LCD_COLOR_BLUE);
 8000c04:	231f      	movs	r3, #31
 8000c06:	2214      	movs	r2, #20
 8000c08:	21dc      	movs	r1, #220	@ 0xdc
 8000c0a:	2014      	movs	r0, #20
 8000c0c:	f7ff fe4e 	bl	80008ac <LCD_Draw_Box>
	LCD_Draw_Box(20,240,20,LCD_COLOR_BLUE);
 8000c10:	231f      	movs	r3, #31
 8000c12:	2214      	movs	r2, #20
 8000c14:	21f0      	movs	r1, #240	@ 0xf0
 8000c16:	2014      	movs	r0, #20
 8000c18:	f7ff fe48 	bl	80008ac <LCD_Draw_Box>
	LCD_Draw_Box(20,260,20,LCD_COLOR_BLUE);
 8000c1c:	231f      	movs	r3, #31
 8000c1e:	2214      	movs	r2, #20
 8000c20:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8000c24:	2014      	movs	r0, #20
 8000c26:	f7ff fe41 	bl	80008ac <LCD_Draw_Box>
	LCD_Draw_Box(40,260,20,LCD_COLOR_BLUE);
 8000c2a:	231f      	movs	r3, #31
 8000c2c:	2214      	movs	r2, #20
 8000c2e:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8000c32:	2028      	movs	r0, #40	@ 0x28
 8000c34:	f7ff fe3a 	bl	80008ac <LCD_Draw_Box>

	HAL_Delay(500);
 8000c38:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c3c:	f001 f936 	bl	8001eac <HAL_Delay>
	LCD_Clear(0, LCD_COLOR_BLACK);
 8000c40:	2100      	movs	r1, #0
 8000c42:	2000      	movs	r0, #0
 8000c44:	f7ff fe5a 	bl	80008fc <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8000c48:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000c4c:	f7ff fe78 	bl	8000940 <LCD_SetTextColor>
	LCD_DisplayChar(100,140,'T');
 8000c50:	2254      	movs	r2, #84	@ 0x54
 8000c52:	218c      	movs	r1, #140	@ 0x8c
 8000c54:	2064      	movs	r0, #100	@ 0x64
 8000c56:	f7ff ff01 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(115,140,'E');
 8000c5a:	2245      	movs	r2, #69	@ 0x45
 8000c5c:	218c      	movs	r1, #140	@ 0x8c
 8000c5e:	2073      	movs	r0, #115	@ 0x73
 8000c60:	f7ff fefc 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(130,140,'T');
 8000c64:	2254      	movs	r2, #84	@ 0x54
 8000c66:	218c      	movs	r1, #140	@ 0x8c
 8000c68:	2082      	movs	r0, #130	@ 0x82
 8000c6a:	f7ff fef7 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(145,140,'R');
 8000c6e:	2252      	movs	r2, #82	@ 0x52
 8000c70:	218c      	movs	r1, #140	@ 0x8c
 8000c72:	2091      	movs	r0, #145	@ 0x91
 8000c74:	f7ff fef2 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(155,140,'I');
 8000c78:	2249      	movs	r2, #73	@ 0x49
 8000c7a:	218c      	movs	r1, #140	@ 0x8c
 8000c7c:	209b      	movs	r0, #155	@ 0x9b
 8000c7e:	f7ff feed 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(165,140,'S');
 8000c82:	2253      	movs	r2, #83	@ 0x53
 8000c84:	218c      	movs	r1, #140	@ 0x8c
 8000c86:	20a5      	movs	r0, #165	@ 0xa5
 8000c88:	f7ff fee8 	bl	8000a5c <LCD_DisplayChar>

	//other L
	LCD_Draw_Box(80,80,20,LCD_COLOR_GREEN);
 8000c8c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000c90:	2214      	movs	r2, #20
 8000c92:	2150      	movs	r1, #80	@ 0x50
 8000c94:	2050      	movs	r0, #80	@ 0x50
 8000c96:	f7ff fe09 	bl	80008ac <LCD_Draw_Box>
	LCD_Draw_Box(80,100,20,LCD_COLOR_GREEN);
 8000c9a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000c9e:	2214      	movs	r2, #20
 8000ca0:	2164      	movs	r1, #100	@ 0x64
 8000ca2:	2050      	movs	r0, #80	@ 0x50
 8000ca4:	f7ff fe02 	bl	80008ac <LCD_Draw_Box>
	LCD_Draw_Box(80,120,20,LCD_COLOR_GREEN);
 8000ca8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000cac:	2214      	movs	r2, #20
 8000cae:	2178      	movs	r1, #120	@ 0x78
 8000cb0:	2050      	movs	r0, #80	@ 0x50
 8000cb2:	f7ff fdfb 	bl	80008ac <LCD_Draw_Box>
	LCD_Draw_Box(60,120,20,LCD_COLOR_GREEN);
 8000cb6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000cba:	2214      	movs	r2, #20
 8000cbc:	2178      	movs	r1, #120	@ 0x78
 8000cbe:	203c      	movs	r0, #60	@ 0x3c
 8000cc0:	f7ff fdf4 	bl	80008ac <LCD_Draw_Box>

	HAL_Delay(500);
 8000cc4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000cc8:	f001 f8f0 	bl	8001eac <HAL_Delay>
	LCD_Clear(0, LCD_COLOR_WHITE);
 8000ccc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f7ff fe13 	bl	80008fc <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f7ff fe32 	bl	8000940 <LCD_SetTextColor>
	LCD_DisplayChar(100,140,'T');
 8000cdc:	2254      	movs	r2, #84	@ 0x54
 8000cde:	218c      	movs	r1, #140	@ 0x8c
 8000ce0:	2064      	movs	r0, #100	@ 0x64
 8000ce2:	f7ff febb 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(115,140,'E');
 8000ce6:	2245      	movs	r2, #69	@ 0x45
 8000ce8:	218c      	movs	r1, #140	@ 0x8c
 8000cea:	2073      	movs	r0, #115	@ 0x73
 8000cec:	f7ff feb6 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(130,140,'T');
 8000cf0:	2254      	movs	r2, #84	@ 0x54
 8000cf2:	218c      	movs	r1, #140	@ 0x8c
 8000cf4:	2082      	movs	r0, #130	@ 0x82
 8000cf6:	f7ff feb1 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(145,140,'R');
 8000cfa:	2252      	movs	r2, #82	@ 0x52
 8000cfc:	218c      	movs	r1, #140	@ 0x8c
 8000cfe:	2091      	movs	r0, #145	@ 0x91
 8000d00:	f7ff feac 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(155,140,'I');
 8000d04:	2249      	movs	r2, #73	@ 0x49
 8000d06:	218c      	movs	r1, #140	@ 0x8c
 8000d08:	209b      	movs	r0, #155	@ 0x9b
 8000d0a:	f7ff fea7 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(165,140,'S');
 8000d0e:	2253      	movs	r2, #83	@ 0x53
 8000d10:	218c      	movs	r1, #140	@ 0x8c
 8000d12:	20a5      	movs	r0, #165	@ 0xa5
 8000d14:	f7ff fea2 	bl	8000a5c <LCD_DisplayChar>
	// smol pp
	LCD_Draw_Box(150,20,20,LCD_COLOR_BLUE2);
 8000d18:	f240 531f 	movw	r3, #1311	@ 0x51f
 8000d1c:	2214      	movs	r2, #20
 8000d1e:	2114      	movs	r1, #20
 8000d20:	2096      	movs	r0, #150	@ 0x96
 8000d22:	f7ff fdc3 	bl	80008ac <LCD_Draw_Box>
	LCD_Draw_Box(150,40,20,LCD_COLOR_BLUE2);
 8000d26:	f240 531f 	movw	r3, #1311	@ 0x51f
 8000d2a:	2214      	movs	r2, #20
 8000d2c:	2128      	movs	r1, #40	@ 0x28
 8000d2e:	2096      	movs	r0, #150	@ 0x96
 8000d30:	f7ff fdbc 	bl	80008ac <LCD_Draw_Box>
	LCD_Draw_Box(170,20,20,LCD_COLOR_BLUE2);
 8000d34:	f240 531f 	movw	r3, #1311	@ 0x51f
 8000d38:	2214      	movs	r2, #20
 8000d3a:	2114      	movs	r1, #20
 8000d3c:	20aa      	movs	r0, #170	@ 0xaa
 8000d3e:	f7ff fdb5 	bl	80008ac <LCD_Draw_Box>
	LCD_Draw_Box(130,20,20,LCD_COLOR_BLUE2);
 8000d42:	f240 531f 	movw	r3, #1311	@ 0x51f
 8000d46:	2214      	movs	r2, #20
 8000d48:	2114      	movs	r1, #20
 8000d4a:	2082      	movs	r0, #130	@ 0x82
 8000d4c:	f7ff fdae 	bl	80008ac <LCD_Draw_Box>

	HAL_Delay(500);
 8000d50:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d54:	f001 f8aa 	bl	8001eac <HAL_Delay>
	LCD_Clear(0, LCD_COLOR_BLACK);
 8000d58:	2100      	movs	r1, #0
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f7ff fdce 	bl	80008fc <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8000d60:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000d64:	f7ff fdec 	bl	8000940 <LCD_SetTextColor>
	LCD_DisplayChar(100,140,'T');
 8000d68:	2254      	movs	r2, #84	@ 0x54
 8000d6a:	218c      	movs	r1, #140	@ 0x8c
 8000d6c:	2064      	movs	r0, #100	@ 0x64
 8000d6e:	f7ff fe75 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(115,140,'E');
 8000d72:	2245      	movs	r2, #69	@ 0x45
 8000d74:	218c      	movs	r1, #140	@ 0x8c
 8000d76:	2073      	movs	r0, #115	@ 0x73
 8000d78:	f7ff fe70 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(130,140,'T');
 8000d7c:	2254      	movs	r2, #84	@ 0x54
 8000d7e:	218c      	movs	r1, #140	@ 0x8c
 8000d80:	2082      	movs	r0, #130	@ 0x82
 8000d82:	f7ff fe6b 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(145,140,'R');
 8000d86:	2252      	movs	r2, #82	@ 0x52
 8000d88:	218c      	movs	r1, #140	@ 0x8c
 8000d8a:	2091      	movs	r0, #145	@ 0x91
 8000d8c:	f7ff fe66 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(155,140,'I');
 8000d90:	2249      	movs	r2, #73	@ 0x49
 8000d92:	218c      	movs	r1, #140	@ 0x8c
 8000d94:	209b      	movs	r0, #155	@ 0x9b
 8000d96:	f7ff fe61 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(165,140,'S');
 8000d9a:	2253      	movs	r2, #83	@ 0x53
 8000d9c:	218c      	movs	r1, #140	@ 0x8c
 8000d9e:	20a5      	movs	r0, #165	@ 0xa5
 8000da0:	f7ff fe5c 	bl	8000a5c <LCD_DisplayChar>
	//squiggle
	LCD_Draw_Box(70,170,20,LCD_COLOR_MAGENTA);
 8000da4:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000da8:	2214      	movs	r2, #20
 8000daa:	21aa      	movs	r1, #170	@ 0xaa
 8000dac:	2046      	movs	r0, #70	@ 0x46
 8000dae:	f7ff fd7d 	bl	80008ac <LCD_Draw_Box>
	LCD_Draw_Box(90,170,20,LCD_COLOR_MAGENTA);
 8000db2:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000db6:	2214      	movs	r2, #20
 8000db8:	21aa      	movs	r1, #170	@ 0xaa
 8000dba:	205a      	movs	r0, #90	@ 0x5a
 8000dbc:	f7ff fd76 	bl	80008ac <LCD_Draw_Box>
	LCD_Draw_Box(90,190,20,LCD_COLOR_MAGENTA);
 8000dc0:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000dc4:	2214      	movs	r2, #20
 8000dc6:	21be      	movs	r1, #190	@ 0xbe
 8000dc8:	205a      	movs	r0, #90	@ 0x5a
 8000dca:	f7ff fd6f 	bl	80008ac <LCD_Draw_Box>
	LCD_Draw_Box(110,190,20,LCD_COLOR_MAGENTA);
 8000dce:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000dd2:	2214      	movs	r2, #20
 8000dd4:	21be      	movs	r1, #190	@ 0xbe
 8000dd6:	206e      	movs	r0, #110	@ 0x6e
 8000dd8:	f7ff fd68 	bl	80008ac <LCD_Draw_Box>

	HAL_Delay(500);
 8000ddc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000de0:	f001 f864 	bl	8001eac <HAL_Delay>
	LCD_Clear(0, LCD_COLOR_WHITE);
 8000de4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000de8:	2000      	movs	r0, #0
 8000dea:	f7ff fd87 	bl	80008fc <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 8000dee:	2000      	movs	r0, #0
 8000df0:	f7ff fda6 	bl	8000940 <LCD_SetTextColor>
	LCD_DisplayChar(100,140,'T');
 8000df4:	2254      	movs	r2, #84	@ 0x54
 8000df6:	218c      	movs	r1, #140	@ 0x8c
 8000df8:	2064      	movs	r0, #100	@ 0x64
 8000dfa:	f7ff fe2f 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(115,140,'E');
 8000dfe:	2245      	movs	r2, #69	@ 0x45
 8000e00:	218c      	movs	r1, #140	@ 0x8c
 8000e02:	2073      	movs	r0, #115	@ 0x73
 8000e04:	f7ff fe2a 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(130,140,'T');
 8000e08:	2254      	movs	r2, #84	@ 0x54
 8000e0a:	218c      	movs	r1, #140	@ 0x8c
 8000e0c:	2082      	movs	r0, #130	@ 0x82
 8000e0e:	f7ff fe25 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(145,140,'R');
 8000e12:	2252      	movs	r2, #82	@ 0x52
 8000e14:	218c      	movs	r1, #140	@ 0x8c
 8000e16:	2091      	movs	r0, #145	@ 0x91
 8000e18:	f7ff fe20 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(155,140,'I');
 8000e1c:	2249      	movs	r2, #73	@ 0x49
 8000e1e:	218c      	movs	r1, #140	@ 0x8c
 8000e20:	209b      	movs	r0, #155	@ 0x9b
 8000e22:	f7ff fe1b 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(165,140,'S');
 8000e26:	2253      	movs	r2, #83	@ 0x53
 8000e28:	218c      	movs	r1, #140	@ 0x8c
 8000e2a:	20a5      	movs	r0, #165	@ 0xa5
 8000e2c:	f7ff fe16 	bl	8000a5c <LCD_DisplayChar>
	//other squiggle
	LCD_Draw_Box(160,270,20,LCD_COLOR_YELLOW);
 8000e30:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000e34:	2214      	movs	r2, #20
 8000e36:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8000e3a:	20a0      	movs	r0, #160	@ 0xa0
 8000e3c:	f7ff fd36 	bl	80008ac <LCD_Draw_Box>
	LCD_Draw_Box(180,270,20,LCD_COLOR_YELLOW);
 8000e40:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000e44:	2214      	movs	r2, #20
 8000e46:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8000e4a:	20b4      	movs	r0, #180	@ 0xb4
 8000e4c:	f7ff fd2e 	bl	80008ac <LCD_Draw_Box>
	LCD_Draw_Box(160,290,20,LCD_COLOR_YELLOW);
 8000e50:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000e54:	2214      	movs	r2, #20
 8000e56:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8000e5a:	20a0      	movs	r0, #160	@ 0xa0
 8000e5c:	f7ff fd26 	bl	80008ac <LCD_Draw_Box>
	LCD_Draw_Box(140,290,20,LCD_COLOR_YELLOW);
 8000e60:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000e64:	2214      	movs	r2, #20
 8000e66:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8000e6a:	208c      	movs	r0, #140	@ 0x8c
 8000e6c:	f7ff fd1e 	bl	80008ac <LCD_Draw_Box>


	HAL_Delay(500);
 8000e70:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e74:	f001 f81a 	bl	8001eac <HAL_Delay>
	LCD_Clear(0, LCD_COLOR_BLACK);
 8000e78:	2100      	movs	r1, #0
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f7ff fd3e 	bl	80008fc <LCD_Clear>


	//line
	LCD_Draw_Box(20,80,20,LCD_COLOR_CYAN);
 8000e80:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000e84:	2214      	movs	r2, #20
 8000e86:	2150      	movs	r1, #80	@ 0x50
 8000e88:	2014      	movs	r0, #20
 8000e8a:	f7ff fd0f 	bl	80008ac <LCD_Draw_Box>
	LCD_Draw_Box(20,60,20,LCD_COLOR_CYAN);
 8000e8e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000e92:	2214      	movs	r2, #20
 8000e94:	213c      	movs	r1, #60	@ 0x3c
 8000e96:	2014      	movs	r0, #20
 8000e98:	e002      	b.n	8000ea0 <title_screen+0x400>
 8000e9a:	bf00      	nop
 8000e9c:	20000004 	.word	0x20000004
 8000ea0:	f7ff fd04 	bl	80008ac <LCD_Draw_Box>
	LCD_Draw_Box(20,20,20,LCD_COLOR_CYAN);
 8000ea4:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000ea8:	2214      	movs	r2, #20
 8000eaa:	2114      	movs	r1, #20
 8000eac:	2014      	movs	r0, #20
 8000eae:	f7ff fcfd 	bl	80008ac <LCD_Draw_Box>
	LCD_Draw_Box(20,40,20,LCD_COLOR_CYAN);
 8000eb2:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000eb6:	2214      	movs	r2, #20
 8000eb8:	2128      	movs	r1, #40	@ 0x28
 8000eba:	2014      	movs	r0, #20
 8000ebc:	f7ff fcf6 	bl	80008ac <LCD_Draw_Box>



	//square
	LCD_Draw_Box(160,200,20,LCD_COLOR_RED);
 8000ec0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000ec4:	2214      	movs	r2, #20
 8000ec6:	21c8      	movs	r1, #200	@ 0xc8
 8000ec8:	20a0      	movs	r0, #160	@ 0xa0
 8000eca:	f7ff fcef 	bl	80008ac <LCD_Draw_Box>
	LCD_Draw_Box(180,200,20,LCD_COLOR_RED);
 8000ece:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000ed2:	2214      	movs	r2, #20
 8000ed4:	21c8      	movs	r1, #200	@ 0xc8
 8000ed6:	20b4      	movs	r0, #180	@ 0xb4
 8000ed8:	f7ff fce8 	bl	80008ac <LCD_Draw_Box>
	LCD_Draw_Box(180,220,20,LCD_COLOR_RED);
 8000edc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000ee0:	2214      	movs	r2, #20
 8000ee2:	21dc      	movs	r1, #220	@ 0xdc
 8000ee4:	20b4      	movs	r0, #180	@ 0xb4
 8000ee6:	f7ff fce1 	bl	80008ac <LCD_Draw_Box>
	LCD_Draw_Box(160,220,20,LCD_COLOR_RED);
 8000eea:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000eee:	2214      	movs	r2, #20
 8000ef0:	21dc      	movs	r1, #220	@ 0xdc
 8000ef2:	20a0      	movs	r0, #160	@ 0xa0
 8000ef4:	f7ff fcda 	bl	80008ac <LCD_Draw_Box>


	//L
	LCD_Draw_Box(20,220,20,LCD_COLOR_BLUE);
 8000ef8:	231f      	movs	r3, #31
 8000efa:	2214      	movs	r2, #20
 8000efc:	21dc      	movs	r1, #220	@ 0xdc
 8000efe:	2014      	movs	r0, #20
 8000f00:	f7ff fcd4 	bl	80008ac <LCD_Draw_Box>
	LCD_Draw_Box(20,240,20,LCD_COLOR_BLUE);
 8000f04:	231f      	movs	r3, #31
 8000f06:	2214      	movs	r2, #20
 8000f08:	21f0      	movs	r1, #240	@ 0xf0
 8000f0a:	2014      	movs	r0, #20
 8000f0c:	f7ff fcce 	bl	80008ac <LCD_Draw_Box>
	LCD_Draw_Box(20,260,20,LCD_COLOR_BLUE);
 8000f10:	231f      	movs	r3, #31
 8000f12:	2214      	movs	r2, #20
 8000f14:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8000f18:	2014      	movs	r0, #20
 8000f1a:	f7ff fcc7 	bl	80008ac <LCD_Draw_Box>
	LCD_Draw_Box(40,260,20,LCD_COLOR_BLUE);
 8000f1e:	231f      	movs	r3, #31
 8000f20:	2214      	movs	r2, #20
 8000f22:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8000f26:	2028      	movs	r0, #40	@ 0x28
 8000f28:	f7ff fcc0 	bl	80008ac <LCD_Draw_Box>


	//other L
	LCD_Draw_Box(80,80,20,LCD_COLOR_GREEN);
 8000f2c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000f30:	2214      	movs	r2, #20
 8000f32:	2150      	movs	r1, #80	@ 0x50
 8000f34:	2050      	movs	r0, #80	@ 0x50
 8000f36:	f7ff fcb9 	bl	80008ac <LCD_Draw_Box>
	LCD_Draw_Box(80,100,20,LCD_COLOR_GREEN);
 8000f3a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000f3e:	2214      	movs	r2, #20
 8000f40:	2164      	movs	r1, #100	@ 0x64
 8000f42:	2050      	movs	r0, #80	@ 0x50
 8000f44:	f7ff fcb2 	bl	80008ac <LCD_Draw_Box>
	LCD_Draw_Box(80,120,20,LCD_COLOR_GREEN);
 8000f48:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000f4c:	2214      	movs	r2, #20
 8000f4e:	2178      	movs	r1, #120	@ 0x78
 8000f50:	2050      	movs	r0, #80	@ 0x50
 8000f52:	f7ff fcab 	bl	80008ac <LCD_Draw_Box>
	LCD_Draw_Box(60,120,20,LCD_COLOR_GREEN);
 8000f56:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000f5a:	2214      	movs	r2, #20
 8000f5c:	2178      	movs	r1, #120	@ 0x78
 8000f5e:	203c      	movs	r0, #60	@ 0x3c
 8000f60:	f7ff fca4 	bl	80008ac <LCD_Draw_Box>


	// smol pp
	LCD_Draw_Box(150,20,20,LCD_COLOR_BLUE2);
 8000f64:	f240 531f 	movw	r3, #1311	@ 0x51f
 8000f68:	2214      	movs	r2, #20
 8000f6a:	2114      	movs	r1, #20
 8000f6c:	2096      	movs	r0, #150	@ 0x96
 8000f6e:	f7ff fc9d 	bl	80008ac <LCD_Draw_Box>
	LCD_Draw_Box(150,40,20,LCD_COLOR_BLUE2);
 8000f72:	f240 531f 	movw	r3, #1311	@ 0x51f
 8000f76:	2214      	movs	r2, #20
 8000f78:	2128      	movs	r1, #40	@ 0x28
 8000f7a:	2096      	movs	r0, #150	@ 0x96
 8000f7c:	f7ff fc96 	bl	80008ac <LCD_Draw_Box>
	LCD_Draw_Box(170,20,20,LCD_COLOR_BLUE2);
 8000f80:	f240 531f 	movw	r3, #1311	@ 0x51f
 8000f84:	2214      	movs	r2, #20
 8000f86:	2114      	movs	r1, #20
 8000f88:	20aa      	movs	r0, #170	@ 0xaa
 8000f8a:	f7ff fc8f 	bl	80008ac <LCD_Draw_Box>
	LCD_Draw_Box(130,20,20,LCD_COLOR_BLUE2);
 8000f8e:	f240 531f 	movw	r3, #1311	@ 0x51f
 8000f92:	2214      	movs	r2, #20
 8000f94:	2114      	movs	r1, #20
 8000f96:	2082      	movs	r0, #130	@ 0x82
 8000f98:	f7ff fc88 	bl	80008ac <LCD_Draw_Box>


	//squiggle
	LCD_Draw_Box(70,170,20,LCD_COLOR_MAGENTA);
 8000f9c:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000fa0:	2214      	movs	r2, #20
 8000fa2:	21aa      	movs	r1, #170	@ 0xaa
 8000fa4:	2046      	movs	r0, #70	@ 0x46
 8000fa6:	f7ff fc81 	bl	80008ac <LCD_Draw_Box>
	LCD_Draw_Box(90,170,20,LCD_COLOR_MAGENTA);
 8000faa:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000fae:	2214      	movs	r2, #20
 8000fb0:	21aa      	movs	r1, #170	@ 0xaa
 8000fb2:	205a      	movs	r0, #90	@ 0x5a
 8000fb4:	f7ff fc7a 	bl	80008ac <LCD_Draw_Box>
	LCD_Draw_Box(90,190,20,LCD_COLOR_MAGENTA);
 8000fb8:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000fbc:	2214      	movs	r2, #20
 8000fbe:	21be      	movs	r1, #190	@ 0xbe
 8000fc0:	205a      	movs	r0, #90	@ 0x5a
 8000fc2:	f7ff fc73 	bl	80008ac <LCD_Draw_Box>
	LCD_Draw_Box(110,190,20,LCD_COLOR_MAGENTA);
 8000fc6:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000fca:	2214      	movs	r2, #20
 8000fcc:	21be      	movs	r1, #190	@ 0xbe
 8000fce:	206e      	movs	r0, #110	@ 0x6e
 8000fd0:	f7ff fc6c 	bl	80008ac <LCD_Draw_Box>


	//other squiggle
	LCD_Draw_Box(160,270,20,LCD_COLOR_YELLOW);
 8000fd4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000fd8:	2214      	movs	r2, #20
 8000fda:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8000fde:	20a0      	movs	r0, #160	@ 0xa0
 8000fe0:	f7ff fc64 	bl	80008ac <LCD_Draw_Box>
	LCD_Draw_Box(180,270,20,LCD_COLOR_YELLOW);
 8000fe4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000fe8:	2214      	movs	r2, #20
 8000fea:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8000fee:	20b4      	movs	r0, #180	@ 0xb4
 8000ff0:	f7ff fc5c 	bl	80008ac <LCD_Draw_Box>
	LCD_Draw_Box(160,290,20,LCD_COLOR_YELLOW);
 8000ff4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000ff8:	2214      	movs	r2, #20
 8000ffa:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8000ffe:	20a0      	movs	r0, #160	@ 0xa0
 8001000:	f7ff fc54 	bl	80008ac <LCD_Draw_Box>
	LCD_Draw_Box(140,290,20,LCD_COLOR_YELLOW);
 8001004:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001008:	2214      	movs	r2, #20
 800100a:	f44f 7191 	mov.w	r1, #290	@ 0x122
 800100e:	208c      	movs	r0, #140	@ 0x8c
 8001010:	f7ff fc4c 	bl	80008ac <LCD_Draw_Box>

	LCD_SetTextColor(LCD_COLOR_WHITE);
 8001014:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001018:	f7ff fc92 	bl	8000940 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 800101c:	4811      	ldr	r0, [pc, #68]	@ (8001064 <title_screen+0x5c4>)
 800101e:	f7ff fc9f 	bl	8000960 <LCD_SetFont>
	LCD_DisplayChar(100,140,'T');
 8001022:	2254      	movs	r2, #84	@ 0x54
 8001024:	218c      	movs	r1, #140	@ 0x8c
 8001026:	2064      	movs	r0, #100	@ 0x64
 8001028:	f7ff fd18 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(115,140,'E');
 800102c:	2245      	movs	r2, #69	@ 0x45
 800102e:	218c      	movs	r1, #140	@ 0x8c
 8001030:	2073      	movs	r0, #115	@ 0x73
 8001032:	f7ff fd13 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(130,140,'T');
 8001036:	2254      	movs	r2, #84	@ 0x54
 8001038:	218c      	movs	r1, #140	@ 0x8c
 800103a:	2082      	movs	r0, #130	@ 0x82
 800103c:	f7ff fd0e 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(145,140,'R');
 8001040:	2252      	movs	r2, #82	@ 0x52
 8001042:	218c      	movs	r1, #140	@ 0x8c
 8001044:	2091      	movs	r0, #145	@ 0x91
 8001046:	f7ff fd09 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(155,140,'I');
 800104a:	2249      	movs	r2, #73	@ 0x49
 800104c:	218c      	movs	r1, #140	@ 0x8c
 800104e:	209b      	movs	r0, #155	@ 0x9b
 8001050:	f7ff fd04 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(165,140,'S');
 8001054:	2253      	movs	r2, #83	@ 0x53
 8001056:	218c      	movs	r1, #140	@ 0x8c
 8001058:	20a5      	movs	r0, #165	@ 0xa5
 800105a:	f7ff fcff 	bl	8000a5c <LCD_DisplayChar>

}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000004 	.word	0x20000004

08001068 <game_screen>:
void game_screen(void){
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
	LCD_Clear(0, LCD_COLOR_BLACK);
 800106e:	2100      	movs	r1, #0
 8001070:	2000      	movs	r0, #0
 8001072:	f7ff fc43 	bl	80008fc <LCD_Clear>
	for(uint16_t i = 30;i < 230; i=i+20 ){
 8001076:	231e      	movs	r3, #30
 8001078:	80fb      	strh	r3, [r7, #6]
 800107a:	e009      	b.n	8001090 <game_screen+0x28>
		LCD_Draw_Vertical_Line(i, 40, 220,LCD_COLOR_WHITE);
 800107c:	88f8      	ldrh	r0, [r7, #6]
 800107e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001082:	22dc      	movs	r2, #220	@ 0xdc
 8001084:	2128      	movs	r1, #40	@ 0x28
 8001086:	f7ff fbc3 	bl	8000810 <LCD_Draw_Vertical_Line>
	for(uint16_t i = 30;i < 230; i=i+20 ){
 800108a:	88fb      	ldrh	r3, [r7, #6]
 800108c:	3314      	adds	r3, #20
 800108e:	80fb      	strh	r3, [r7, #6]
 8001090:	88fb      	ldrh	r3, [r7, #6]
 8001092:	2be5      	cmp	r3, #229	@ 0xe5
 8001094:	d9f2      	bls.n	800107c <game_screen+0x14>

	}
	for(uint16_t i = 40;i < 280; i=i + 20){
 8001096:	2328      	movs	r3, #40	@ 0x28
 8001098:	80bb      	strh	r3, [r7, #4]
 800109a:	e009      	b.n	80010b0 <game_screen+0x48>
		LCD_Draw_Horizontal_Line(30, i, 180,LCD_COLOR_WHITE);
 800109c:	88b9      	ldrh	r1, [r7, #4]
 800109e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010a2:	22b4      	movs	r2, #180	@ 0xb4
 80010a4:	201e      	movs	r0, #30
 80010a6:	f7ff fbda 	bl	800085e <LCD_Draw_Horizontal_Line>
	for(uint16_t i = 40;i < 280; i=i + 20){
 80010aa:	88bb      	ldrh	r3, [r7, #4]
 80010ac:	3314      	adds	r3, #20
 80010ae:	80bb      	strh	r3, [r7, #4]
 80010b0:	88bb      	ldrh	r3, [r7, #4]
 80010b2:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 80010b6:	d3f1      	bcc.n	800109c <game_screen+0x34>

	}
	LCD_SetTextColor(LCD_COLOR_WHITE);
 80010b8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80010bc:	f7ff fc40 	bl	8000940 <LCD_SetTextColor>
	LCD_SetFont(&Font12x12);
 80010c0:	4812      	ldr	r0, [pc, #72]	@ (800110c <game_screen+0xa4>)
 80010c2:	f7ff fc4d 	bl	8000960 <LCD_SetFont>
	LCD_DisplayChar(100,25,'T');
 80010c6:	2254      	movs	r2, #84	@ 0x54
 80010c8:	2119      	movs	r1, #25
 80010ca:	2064      	movs	r0, #100	@ 0x64
 80010cc:	f7ff fcc6 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(107,25,'E');
 80010d0:	2245      	movs	r2, #69	@ 0x45
 80010d2:	2119      	movs	r1, #25
 80010d4:	206b      	movs	r0, #107	@ 0x6b
 80010d6:	f7ff fcc1 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(114,25,'T');
 80010da:	2254      	movs	r2, #84	@ 0x54
 80010dc:	2119      	movs	r1, #25
 80010de:	2072      	movs	r0, #114	@ 0x72
 80010e0:	f7ff fcbc 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(120,25,'R');
 80010e4:	2252      	movs	r2, #82	@ 0x52
 80010e6:	2119      	movs	r1, #25
 80010e8:	2078      	movs	r0, #120	@ 0x78
 80010ea:	f7ff fcb7 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(127,25,'I');
 80010ee:	2249      	movs	r2, #73	@ 0x49
 80010f0:	2119      	movs	r1, #25
 80010f2:	207f      	movs	r0, #127	@ 0x7f
 80010f4:	f7ff fcb2 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(130,25,'S');
 80010f8:	2253      	movs	r2, #83	@ 0x53
 80010fa:	2119      	movs	r1, #25
 80010fc:	2082      	movs	r0, #130	@ 0x82
 80010fe:	f7ff fcad 	bl	8000a5c <LCD_DisplayChar>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	2000000c 	.word	0x2000000c

08001110 <end_screen>:
void end_screen(void){
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
	LCD_Clear(0, LCD_COLOR_BLACK);
 8001114:	2100      	movs	r1, #0
 8001116:	2000      	movs	r0, #0
 8001118:	f7ff fbf0 	bl	80008fc <LCD_Clear>
	LCD_SetFont(&Font16x24);
 800111c:	4879      	ldr	r0, [pc, #484]	@ (8001304 <end_screen+0x1f4>)
 800111e:	f7ff fc1f 	bl	8000960 <LCD_SetFont>
	LCD_DisplayChar(120,140,'G');
 8001122:	2247      	movs	r2, #71	@ 0x47
 8001124:	218c      	movs	r1, #140	@ 0x8c
 8001126:	2078      	movs	r0, #120	@ 0x78
 8001128:	f7ff fc98 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(135,140,'A');
 800112c:	2241      	movs	r2, #65	@ 0x41
 800112e:	218c      	movs	r1, #140	@ 0x8c
 8001130:	2087      	movs	r0, #135	@ 0x87
 8001132:	f7ff fc93 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(150,140,'M');
 8001136:	224d      	movs	r2, #77	@ 0x4d
 8001138:	218c      	movs	r1, #140	@ 0x8c
 800113a:	2096      	movs	r0, #150	@ 0x96
 800113c:	f7ff fc8e 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(165,140,'E');
 8001140:	2245      	movs	r2, #69	@ 0x45
 8001142:	218c      	movs	r1, #140	@ 0x8c
 8001144:	20a5      	movs	r0, #165	@ 0xa5
 8001146:	f7ff fc89 	bl	8000a5c <LCD_DisplayChar>

	LCD_DisplayChar(120,170,'O');
 800114a:	224f      	movs	r2, #79	@ 0x4f
 800114c:	21aa      	movs	r1, #170	@ 0xaa
 800114e:	2078      	movs	r0, #120	@ 0x78
 8001150:	f7ff fc84 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(135,170,'V');
 8001154:	2256      	movs	r2, #86	@ 0x56
 8001156:	21aa      	movs	r1, #170	@ 0xaa
 8001158:	2087      	movs	r0, #135	@ 0x87
 800115a:	f7ff fc7f 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(150,170,'E');
 800115e:	2245      	movs	r2, #69	@ 0x45
 8001160:	21aa      	movs	r1, #170	@ 0xaa
 8001162:	2096      	movs	r0, #150	@ 0x96
 8001164:	f7ff fc7a 	bl	8000a5c <LCD_DisplayChar>
	LCD_DisplayChar(165,170,'R');
 8001168:	2252      	movs	r2, #82	@ 0x52
 800116a:	21aa      	movs	r1, #170	@ 0xaa
 800116c:	20a5      	movs	r0, #165	@ 0xa5
 800116e:	f7ff fc75 	bl	8000a5c <LCD_DisplayChar>

	//line
		LCD_Draw_Box(20,80,20,LCD_COLOR_CYAN);
 8001172:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8001176:	2214      	movs	r2, #20
 8001178:	2150      	movs	r1, #80	@ 0x50
 800117a:	2014      	movs	r0, #20
 800117c:	f7ff fb96 	bl	80008ac <LCD_Draw_Box>
		LCD_Draw_Box(20,60,20,LCD_COLOR_CYAN);
 8001180:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8001184:	2214      	movs	r2, #20
 8001186:	213c      	movs	r1, #60	@ 0x3c
 8001188:	2014      	movs	r0, #20
 800118a:	f7ff fb8f 	bl	80008ac <LCD_Draw_Box>
		LCD_Draw_Box(20,20,20,LCD_COLOR_CYAN);
 800118e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8001192:	2214      	movs	r2, #20
 8001194:	2114      	movs	r1, #20
 8001196:	2014      	movs	r0, #20
 8001198:	f7ff fb88 	bl	80008ac <LCD_Draw_Box>
		LCD_Draw_Box(20,40,20,LCD_COLOR_CYAN);
 800119c:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80011a0:	2214      	movs	r2, #20
 80011a2:	2128      	movs	r1, #40	@ 0x28
 80011a4:	2014      	movs	r0, #20
 80011a6:	f7ff fb81 	bl	80008ac <LCD_Draw_Box>



		//square
		LCD_Draw_Box(160,200,20,LCD_COLOR_RED);
 80011aa:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80011ae:	2214      	movs	r2, #20
 80011b0:	21c8      	movs	r1, #200	@ 0xc8
 80011b2:	20a0      	movs	r0, #160	@ 0xa0
 80011b4:	f7ff fb7a 	bl	80008ac <LCD_Draw_Box>
		LCD_Draw_Box(180,200,20,LCD_COLOR_RED);
 80011b8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80011bc:	2214      	movs	r2, #20
 80011be:	21c8      	movs	r1, #200	@ 0xc8
 80011c0:	20b4      	movs	r0, #180	@ 0xb4
 80011c2:	f7ff fb73 	bl	80008ac <LCD_Draw_Box>
		LCD_Draw_Box(180,220,20,LCD_COLOR_RED);
 80011c6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80011ca:	2214      	movs	r2, #20
 80011cc:	21dc      	movs	r1, #220	@ 0xdc
 80011ce:	20b4      	movs	r0, #180	@ 0xb4
 80011d0:	f7ff fb6c 	bl	80008ac <LCD_Draw_Box>
		LCD_Draw_Box(160,220,20,LCD_COLOR_RED);
 80011d4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80011d8:	2214      	movs	r2, #20
 80011da:	21dc      	movs	r1, #220	@ 0xdc
 80011dc:	20a0      	movs	r0, #160	@ 0xa0
 80011de:	f7ff fb65 	bl	80008ac <LCD_Draw_Box>


		//L
		LCD_Draw_Box(20,220,20,LCD_COLOR_BLUE);
 80011e2:	231f      	movs	r3, #31
 80011e4:	2214      	movs	r2, #20
 80011e6:	21dc      	movs	r1, #220	@ 0xdc
 80011e8:	2014      	movs	r0, #20
 80011ea:	f7ff fb5f 	bl	80008ac <LCD_Draw_Box>
		LCD_Draw_Box(20,240,20,LCD_COLOR_BLUE);
 80011ee:	231f      	movs	r3, #31
 80011f0:	2214      	movs	r2, #20
 80011f2:	21f0      	movs	r1, #240	@ 0xf0
 80011f4:	2014      	movs	r0, #20
 80011f6:	f7ff fb59 	bl	80008ac <LCD_Draw_Box>
		LCD_Draw_Box(20,260,20,LCD_COLOR_BLUE);
 80011fa:	231f      	movs	r3, #31
 80011fc:	2214      	movs	r2, #20
 80011fe:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8001202:	2014      	movs	r0, #20
 8001204:	f7ff fb52 	bl	80008ac <LCD_Draw_Box>
		LCD_Draw_Box(40,260,20,LCD_COLOR_BLUE);
 8001208:	231f      	movs	r3, #31
 800120a:	2214      	movs	r2, #20
 800120c:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8001210:	2028      	movs	r0, #40	@ 0x28
 8001212:	f7ff fb4b 	bl	80008ac <LCD_Draw_Box>


		//other L
		LCD_Draw_Box(80,80,20,LCD_COLOR_GREEN);
 8001216:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800121a:	2214      	movs	r2, #20
 800121c:	2150      	movs	r1, #80	@ 0x50
 800121e:	2050      	movs	r0, #80	@ 0x50
 8001220:	f7ff fb44 	bl	80008ac <LCD_Draw_Box>
		LCD_Draw_Box(80,100,20,LCD_COLOR_GREEN);
 8001224:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001228:	2214      	movs	r2, #20
 800122a:	2164      	movs	r1, #100	@ 0x64
 800122c:	2050      	movs	r0, #80	@ 0x50
 800122e:	f7ff fb3d 	bl	80008ac <LCD_Draw_Box>
		LCD_Draw_Box(80,120,20,LCD_COLOR_GREEN);
 8001232:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001236:	2214      	movs	r2, #20
 8001238:	2178      	movs	r1, #120	@ 0x78
 800123a:	2050      	movs	r0, #80	@ 0x50
 800123c:	f7ff fb36 	bl	80008ac <LCD_Draw_Box>
		LCD_Draw_Box(60,120,20,LCD_COLOR_GREEN);
 8001240:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001244:	2214      	movs	r2, #20
 8001246:	2178      	movs	r1, #120	@ 0x78
 8001248:	203c      	movs	r0, #60	@ 0x3c
 800124a:	f7ff fb2f 	bl	80008ac <LCD_Draw_Box>


		// smol pp
		LCD_Draw_Box(150,20,20,LCD_COLOR_BLUE2);
 800124e:	f240 531f 	movw	r3, #1311	@ 0x51f
 8001252:	2214      	movs	r2, #20
 8001254:	2114      	movs	r1, #20
 8001256:	2096      	movs	r0, #150	@ 0x96
 8001258:	f7ff fb28 	bl	80008ac <LCD_Draw_Box>
		LCD_Draw_Box(150,40,20,LCD_COLOR_BLUE2);
 800125c:	f240 531f 	movw	r3, #1311	@ 0x51f
 8001260:	2214      	movs	r2, #20
 8001262:	2128      	movs	r1, #40	@ 0x28
 8001264:	2096      	movs	r0, #150	@ 0x96
 8001266:	f7ff fb21 	bl	80008ac <LCD_Draw_Box>
		LCD_Draw_Box(170,20,20,LCD_COLOR_BLUE2);
 800126a:	f240 531f 	movw	r3, #1311	@ 0x51f
 800126e:	2214      	movs	r2, #20
 8001270:	2114      	movs	r1, #20
 8001272:	20aa      	movs	r0, #170	@ 0xaa
 8001274:	f7ff fb1a 	bl	80008ac <LCD_Draw_Box>
		LCD_Draw_Box(130,20,20,LCD_COLOR_BLUE2);
 8001278:	f240 531f 	movw	r3, #1311	@ 0x51f
 800127c:	2214      	movs	r2, #20
 800127e:	2114      	movs	r1, #20
 8001280:	2082      	movs	r0, #130	@ 0x82
 8001282:	f7ff fb13 	bl	80008ac <LCD_Draw_Box>


		//squiggle
		LCD_Draw_Box(70,170,20,LCD_COLOR_MAGENTA);
 8001286:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800128a:	2214      	movs	r2, #20
 800128c:	21aa      	movs	r1, #170	@ 0xaa
 800128e:	2046      	movs	r0, #70	@ 0x46
 8001290:	f7ff fb0c 	bl	80008ac <LCD_Draw_Box>
		LCD_Draw_Box(90,170,20,LCD_COLOR_MAGENTA);
 8001294:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8001298:	2214      	movs	r2, #20
 800129a:	21aa      	movs	r1, #170	@ 0xaa
 800129c:	205a      	movs	r0, #90	@ 0x5a
 800129e:	f7ff fb05 	bl	80008ac <LCD_Draw_Box>
		LCD_Draw_Box(90,190,20,LCD_COLOR_MAGENTA);
 80012a2:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80012a6:	2214      	movs	r2, #20
 80012a8:	21be      	movs	r1, #190	@ 0xbe
 80012aa:	205a      	movs	r0, #90	@ 0x5a
 80012ac:	f7ff fafe 	bl	80008ac <LCD_Draw_Box>
		LCD_Draw_Box(110,190,20,LCD_COLOR_MAGENTA);
 80012b0:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80012b4:	2214      	movs	r2, #20
 80012b6:	21be      	movs	r1, #190	@ 0xbe
 80012b8:	206e      	movs	r0, #110	@ 0x6e
 80012ba:	f7ff faf7 	bl	80008ac <LCD_Draw_Box>


		//other squiggle
		LCD_Draw_Box(160,270,20,LCD_COLOR_YELLOW);
 80012be:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80012c2:	2214      	movs	r2, #20
 80012c4:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80012c8:	20a0      	movs	r0, #160	@ 0xa0
 80012ca:	f7ff faef 	bl	80008ac <LCD_Draw_Box>
		LCD_Draw_Box(180,270,20,LCD_COLOR_YELLOW);
 80012ce:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80012d2:	2214      	movs	r2, #20
 80012d4:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80012d8:	20b4      	movs	r0, #180	@ 0xb4
 80012da:	f7ff fae7 	bl	80008ac <LCD_Draw_Box>
		LCD_Draw_Box(160,290,20,LCD_COLOR_YELLOW);
 80012de:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80012e2:	2214      	movs	r2, #20
 80012e4:	f44f 7191 	mov.w	r1, #290	@ 0x122
 80012e8:	20a0      	movs	r0, #160	@ 0xa0
 80012ea:	f7ff fadf 	bl	80008ac <LCD_Draw_Box>
		LCD_Draw_Box(140,290,20,LCD_COLOR_YELLOW);
 80012ee:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80012f2:	2214      	movs	r2, #20
 80012f4:	f44f 7191 	mov.w	r1, #290	@ 0x122
 80012f8:	208c      	movs	r0, #140	@ 0x8c
 80012fa:	f7ff fad7 	bl	80008ac <LCD_Draw_Box>
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000004 	.word	0x20000004

08001308 <visualDemo>:
void visualDemo(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
//			else
//				frameBuffer[x*y] = LCD_COLOR_BLACK;
//		}
//	}

	title_screen();
 800130c:	f7ff fbc8 	bl	8000aa0 <title_screen>
	HAL_Delay(3000);
 8001310:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001314:	f000 fdca 	bl	8001eac <HAL_Delay>
	game_screen();
 8001318:	f7ff fea6 	bl	8001068 <game_screen>
	HAL_Delay(3000);
 800131c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001320:	f000 fdc4 	bl	8001eac <HAL_Delay>
	end_screen();
 8001324:	f7ff fef4 	bl	8001110 <end_screen>
//	LCD_DisplayChar(100,160,'W');
//	LCD_DisplayChar(115,160,'o');
//	LCD_DisplayChar(125,160,'r');
//	LCD_DisplayChar(130,160,'l');
//	LCD_DisplayChar(140,160,'d');
}
 8001328:	bf00      	nop
 800132a:	bd80      	pop	{r7, pc}

0800132c <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001330:	b672      	cpsid	i
}
 8001332:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001334:	bf00      	nop
 8001336:	e7fd      	b.n	8001334 <LCD_Error_Handler+0x8>

08001338 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800133c:	f000 f9fe 	bl	800173c <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001340:	20ca      	movs	r0, #202	@ 0xca
 8001342:	f000 f943 	bl	80015cc <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001346:	20c3      	movs	r0, #195	@ 0xc3
 8001348:	f000 f94d 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 800134c:	2008      	movs	r0, #8
 800134e:	f000 f94a 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8001352:	2050      	movs	r0, #80	@ 0x50
 8001354:	f000 f947 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001358:	20cf      	movs	r0, #207	@ 0xcf
 800135a:	f000 f937 	bl	80015cc <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 800135e:	2000      	movs	r0, #0
 8001360:	f000 f941 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001364:	20c1      	movs	r0, #193	@ 0xc1
 8001366:	f000 f93e 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 800136a:	2030      	movs	r0, #48	@ 0x30
 800136c:	f000 f93b 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001370:	20ed      	movs	r0, #237	@ 0xed
 8001372:	f000 f92b 	bl	80015cc <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001376:	2064      	movs	r0, #100	@ 0x64
 8001378:	f000 f935 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 800137c:	2003      	movs	r0, #3
 800137e:	f000 f932 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001382:	2012      	movs	r0, #18
 8001384:	f000 f92f 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001388:	2081      	movs	r0, #129	@ 0x81
 800138a:	f000 f92c 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 800138e:	20e8      	movs	r0, #232	@ 0xe8
 8001390:	f000 f91c 	bl	80015cc <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001394:	2085      	movs	r0, #133	@ 0x85
 8001396:	f000 f926 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800139a:	2000      	movs	r0, #0
 800139c:	f000 f923 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80013a0:	2078      	movs	r0, #120	@ 0x78
 80013a2:	f000 f920 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 80013a6:	20cb      	movs	r0, #203	@ 0xcb
 80013a8:	f000 f910 	bl	80015cc <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 80013ac:	2039      	movs	r0, #57	@ 0x39
 80013ae:	f000 f91a 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 80013b2:	202c      	movs	r0, #44	@ 0x2c
 80013b4:	f000 f917 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80013b8:	2000      	movs	r0, #0
 80013ba:	f000 f914 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 80013be:	2034      	movs	r0, #52	@ 0x34
 80013c0:	f000 f911 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 80013c4:	2002      	movs	r0, #2
 80013c6:	f000 f90e 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 80013ca:	20f7      	movs	r0, #247	@ 0xf7
 80013cc:	f000 f8fe 	bl	80015cc <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 80013d0:	2020      	movs	r0, #32
 80013d2:	f000 f908 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 80013d6:	20ea      	movs	r0, #234	@ 0xea
 80013d8:	f000 f8f8 	bl	80015cc <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80013dc:	2000      	movs	r0, #0
 80013de:	f000 f902 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80013e2:	2000      	movs	r0, #0
 80013e4:	f000 f8ff 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 80013e8:	20b1      	movs	r0, #177	@ 0xb1
 80013ea:	f000 f8ef 	bl	80015cc <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80013ee:	2000      	movs	r0, #0
 80013f0:	f000 f8f9 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80013f4:	201b      	movs	r0, #27
 80013f6:	f000 f8f6 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80013fa:	20b6      	movs	r0, #182	@ 0xb6
 80013fc:	f000 f8e6 	bl	80015cc <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001400:	200a      	movs	r0, #10
 8001402:	f000 f8f0 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001406:	20a2      	movs	r0, #162	@ 0xa2
 8001408:	f000 f8ed 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 800140c:	20c0      	movs	r0, #192	@ 0xc0
 800140e:	f000 f8dd 	bl	80015cc <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001412:	2010      	movs	r0, #16
 8001414:	f000 f8e7 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001418:	20c1      	movs	r0, #193	@ 0xc1
 800141a:	f000 f8d7 	bl	80015cc <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 800141e:	2010      	movs	r0, #16
 8001420:	f000 f8e1 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001424:	20c5      	movs	r0, #197	@ 0xc5
 8001426:	f000 f8d1 	bl	80015cc <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 800142a:	2045      	movs	r0, #69	@ 0x45
 800142c:	f000 f8db 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001430:	2015      	movs	r0, #21
 8001432:	f000 f8d8 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001436:	20c7      	movs	r0, #199	@ 0xc7
 8001438:	f000 f8c8 	bl	80015cc <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 800143c:	2090      	movs	r0, #144	@ 0x90
 800143e:	f000 f8d2 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001442:	2036      	movs	r0, #54	@ 0x36
 8001444:	f000 f8c2 	bl	80015cc <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001448:	20c8      	movs	r0, #200	@ 0xc8
 800144a:	f000 f8cc 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 800144e:	20f2      	movs	r0, #242	@ 0xf2
 8001450:	f000 f8bc 	bl	80015cc <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001454:	2000      	movs	r0, #0
 8001456:	f000 f8c6 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 800145a:	20b0      	movs	r0, #176	@ 0xb0
 800145c:	f000 f8b6 	bl	80015cc <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001460:	20c2      	movs	r0, #194	@ 0xc2
 8001462:	f000 f8c0 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001466:	20b6      	movs	r0, #182	@ 0xb6
 8001468:	f000 f8b0 	bl	80015cc <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 800146c:	200a      	movs	r0, #10
 800146e:	f000 f8ba 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8001472:	20a7      	movs	r0, #167	@ 0xa7
 8001474:	f000 f8b7 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001478:	2027      	movs	r0, #39	@ 0x27
 800147a:	f000 f8b4 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800147e:	2004      	movs	r0, #4
 8001480:	f000 f8b1 	bl	80015e6 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001484:	202a      	movs	r0, #42	@ 0x2a
 8001486:	f000 f8a1 	bl	80015cc <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800148a:	2000      	movs	r0, #0
 800148c:	f000 f8ab 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001490:	2000      	movs	r0, #0
 8001492:	f000 f8a8 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001496:	2000      	movs	r0, #0
 8001498:	f000 f8a5 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 800149c:	20ef      	movs	r0, #239	@ 0xef
 800149e:	f000 f8a2 	bl	80015e6 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 80014a2:	202b      	movs	r0, #43	@ 0x2b
 80014a4:	f000 f892 	bl	80015cc <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80014a8:	2000      	movs	r0, #0
 80014aa:	f000 f89c 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80014ae:	2000      	movs	r0, #0
 80014b0:	f000 f899 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 80014b4:	2001      	movs	r0, #1
 80014b6:	f000 f896 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 80014ba:	203f      	movs	r0, #63	@ 0x3f
 80014bc:	f000 f893 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 80014c0:	20f6      	movs	r0, #246	@ 0xf6
 80014c2:	f000 f883 	bl	80015cc <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80014c6:	2001      	movs	r0, #1
 80014c8:	f000 f88d 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80014cc:	2000      	movs	r0, #0
 80014ce:	f000 f88a 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 80014d2:	2006      	movs	r0, #6
 80014d4:	f000 f887 	bl	80015e6 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 80014d8:	202c      	movs	r0, #44	@ 0x2c
 80014da:	f000 f877 	bl	80015cc <ili9341_Write_Reg>
  LCD_Delay(200);
 80014de:	20c8      	movs	r0, #200	@ 0xc8
 80014e0:	f000 f9e8 	bl	80018b4 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 80014e4:	2026      	movs	r0, #38	@ 0x26
 80014e6:	f000 f871 	bl	80015cc <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80014ea:	2001      	movs	r0, #1
 80014ec:	f000 f87b 	bl	80015e6 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 80014f0:	20e0      	movs	r0, #224	@ 0xe0
 80014f2:	f000 f86b 	bl	80015cc <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 80014f6:	200f      	movs	r0, #15
 80014f8:	f000 f875 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 80014fc:	2029      	movs	r0, #41	@ 0x29
 80014fe:	f000 f872 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001502:	2024      	movs	r0, #36	@ 0x24
 8001504:	f000 f86f 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001508:	200c      	movs	r0, #12
 800150a:	f000 f86c 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 800150e:	200e      	movs	r0, #14
 8001510:	f000 f869 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001514:	2009      	movs	r0, #9
 8001516:	f000 f866 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 800151a:	204e      	movs	r0, #78	@ 0x4e
 800151c:	f000 f863 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001520:	2078      	movs	r0, #120	@ 0x78
 8001522:	f000 f860 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001526:	203c      	movs	r0, #60	@ 0x3c
 8001528:	f000 f85d 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 800152c:	2009      	movs	r0, #9
 800152e:	f000 f85a 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001532:	2013      	movs	r0, #19
 8001534:	f000 f857 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001538:	2005      	movs	r0, #5
 800153a:	f000 f854 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 800153e:	2017      	movs	r0, #23
 8001540:	f000 f851 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001544:	2011      	movs	r0, #17
 8001546:	f000 f84e 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800154a:	2000      	movs	r0, #0
 800154c:	f000 f84b 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001550:	20e1      	movs	r0, #225	@ 0xe1
 8001552:	f000 f83b 	bl	80015cc <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001556:	2000      	movs	r0, #0
 8001558:	f000 f845 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 800155c:	2016      	movs	r0, #22
 800155e:	f000 f842 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001562:	201b      	movs	r0, #27
 8001564:	f000 f83f 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001568:	2004      	movs	r0, #4
 800156a:	f000 f83c 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800156e:	2011      	movs	r0, #17
 8001570:	f000 f839 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001574:	2007      	movs	r0, #7
 8001576:	f000 f836 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 800157a:	2031      	movs	r0, #49	@ 0x31
 800157c:	f000 f833 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8001580:	2033      	movs	r0, #51	@ 0x33
 8001582:	f000 f830 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8001586:	2042      	movs	r0, #66	@ 0x42
 8001588:	f000 f82d 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 800158c:	2005      	movs	r0, #5
 800158e:	f000 f82a 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001592:	200c      	movs	r0, #12
 8001594:	f000 f827 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8001598:	200a      	movs	r0, #10
 800159a:	f000 f824 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 800159e:	2028      	movs	r0, #40	@ 0x28
 80015a0:	f000 f821 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 80015a4:	202f      	movs	r0, #47	@ 0x2f
 80015a6:	f000 f81e 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 80015aa:	200f      	movs	r0, #15
 80015ac:	f000 f81b 	bl	80015e6 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 80015b0:	2011      	movs	r0, #17
 80015b2:	f000 f80b 	bl	80015cc <ili9341_Write_Reg>
  LCD_Delay(200);
 80015b6:	20c8      	movs	r0, #200	@ 0xc8
 80015b8:	f000 f97c 	bl	80018b4 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 80015bc:	2029      	movs	r0, #41	@ 0x29
 80015be:	f000 f805 	bl	80015cc <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 80015c2:	202c      	movs	r0, #44	@ 0x2c
 80015c4:	f000 f802 	bl	80015cc <ili9341_Write_Reg>
}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}

080015cc <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	4618      	mov	r0, r3
 80015da:	f000 f949 	bl	8001870 <LCD_IO_WriteReg>
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	4603      	mov	r3, r0
 80015ee:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80015f0:	88fb      	ldrh	r3, [r7, #6]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 f91a 	bl	800182c <LCD_IO_WriteData>
}
 80015f8:	bf00      	nop
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001604:	4819      	ldr	r0, [pc, #100]	@ (800166c <SPI_Init+0x6c>)
 8001606:	f002 faec 	bl	8003be2 <HAL_SPI_GetState>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d12b      	bne.n	8001668 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001610:	4b16      	ldr	r3, [pc, #88]	@ (800166c <SPI_Init+0x6c>)
 8001612:	4a17      	ldr	r2, [pc, #92]	@ (8001670 <SPI_Init+0x70>)
 8001614:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001616:	4b15      	ldr	r3, [pc, #84]	@ (800166c <SPI_Init+0x6c>)
 8001618:	2218      	movs	r2, #24
 800161a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 800161c:	4b13      	ldr	r3, [pc, #76]	@ (800166c <SPI_Init+0x6c>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001622:	4b12      	ldr	r3, [pc, #72]	@ (800166c <SPI_Init+0x6c>)
 8001624:	2200      	movs	r2, #0
 8001626:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001628:	4b10      	ldr	r3, [pc, #64]	@ (800166c <SPI_Init+0x6c>)
 800162a:	2200      	movs	r2, #0
 800162c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800162e:	4b0f      	ldr	r3, [pc, #60]	@ (800166c <SPI_Init+0x6c>)
 8001630:	2200      	movs	r2, #0
 8001632:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001634:	4b0d      	ldr	r3, [pc, #52]	@ (800166c <SPI_Init+0x6c>)
 8001636:	2207      	movs	r2, #7
 8001638:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800163a:	4b0c      	ldr	r3, [pc, #48]	@ (800166c <SPI_Init+0x6c>)
 800163c:	2200      	movs	r2, #0
 800163e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001640:	4b0a      	ldr	r3, [pc, #40]	@ (800166c <SPI_Init+0x6c>)
 8001642:	2200      	movs	r2, #0
 8001644:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001646:	4b09      	ldr	r3, [pc, #36]	@ (800166c <SPI_Init+0x6c>)
 8001648:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800164c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800164e:	4b07      	ldr	r3, [pc, #28]	@ (800166c <SPI_Init+0x6c>)
 8001650:	2200      	movs	r2, #0
 8001652:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001654:	4b05      	ldr	r3, [pc, #20]	@ (800166c <SPI_Init+0x6c>)
 8001656:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800165a:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 800165c:	4803      	ldr	r0, [pc, #12]	@ (800166c <SPI_Init+0x6c>)
 800165e:	f000 f833 	bl	80016c8 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001662:	4802      	ldr	r0, [pc, #8]	@ (800166c <SPI_Init+0x6c>)
 8001664:	f002 f8c8 	bl	80037f8 <HAL_SPI_Init>
  }
}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}
 800166c:	2002591c 	.word	0x2002591c
 8001670:	40015000 	.word	0x40015000

08001674 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800167e:	2300      	movs	r3, #0
 8001680:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8001682:	4b09      	ldr	r3, [pc, #36]	@ (80016a8 <SPI_Write+0x34>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	1db9      	adds	r1, r7, #6
 8001688:	2201      	movs	r2, #1
 800168a:	4808      	ldr	r0, [pc, #32]	@ (80016ac <SPI_Write+0x38>)
 800168c:	f002 f965 	bl	800395a <HAL_SPI_Transmit>
 8001690:	4603      	mov	r3, r0
 8001692:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001694:	7bfb      	ldrb	r3, [r7, #15]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 800169a:	f000 f809 	bl	80016b0 <SPI_Error>
  }
}
 800169e:	bf00      	nop
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000014 	.word	0x20000014
 80016ac:	2002591c 	.word	0x2002591c

080016b0 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80016b4:	4803      	ldr	r0, [pc, #12]	@ (80016c4 <SPI_Error+0x14>)
 80016b6:	f002 f928 	bl	800390a <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 80016ba:	f7ff ffa1 	bl	8001600 <SPI_Init>
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	2002591c 	.word	0x2002591c

080016c8 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08a      	sub	sp, #40	@ 0x28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 80016d0:	2300      	movs	r3, #0
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	4b17      	ldr	r3, [pc, #92]	@ (8001734 <SPI_MspInit+0x6c>)
 80016d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d8:	4a16      	ldr	r2, [pc, #88]	@ (8001734 <SPI_MspInit+0x6c>)
 80016da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80016de:	6453      	str	r3, [r2, #68]	@ 0x44
 80016e0:	4b14      	ldr	r3, [pc, #80]	@ (8001734 <SPI_MspInit+0x6c>)
 80016e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	4b10      	ldr	r3, [pc, #64]	@ (8001734 <SPI_MspInit+0x6c>)
 80016f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f4:	4a0f      	ldr	r2, [pc, #60]	@ (8001734 <SPI_MspInit+0x6c>)
 80016f6:	f043 0320 	orr.w	r3, r3, #32
 80016fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80016fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001734 <SPI_MspInit+0x6c>)
 80016fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001700:	f003 0320 	and.w	r3, r3, #32
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001708:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800170c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800170e:	2302      	movs	r3, #2
 8001710:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001712:	2302      	movs	r3, #2
 8001714:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001716:	2301      	movs	r3, #1
 8001718:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 800171a:	2305      	movs	r3, #5
 800171c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	4619      	mov	r1, r3
 8001724:	4804      	ldr	r0, [pc, #16]	@ (8001738 <SPI_MspInit+0x70>)
 8001726:	f000 fccb 	bl	80020c0 <HAL_GPIO_Init>
}
 800172a:	bf00      	nop
 800172c:	3728      	adds	r7, #40	@ 0x28
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40023800 	.word	0x40023800
 8001738:	40021400 	.word	0x40021400

0800173c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b088      	sub	sp, #32
 8001740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8001742:	4b36      	ldr	r3, [pc, #216]	@ (800181c <LCD_IO_Init+0xe0>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d164      	bne.n	8001814 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 800174a:	4b34      	ldr	r3, [pc, #208]	@ (800181c <LCD_IO_Init+0xe0>)
 800174c:	2201      	movs	r2, #1
 800174e:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001750:	2300      	movs	r3, #0
 8001752:	60bb      	str	r3, [r7, #8]
 8001754:	4b32      	ldr	r3, [pc, #200]	@ (8001820 <LCD_IO_Init+0xe4>)
 8001756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001758:	4a31      	ldr	r2, [pc, #196]	@ (8001820 <LCD_IO_Init+0xe4>)
 800175a:	f043 0308 	orr.w	r3, r3, #8
 800175e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001760:	4b2f      	ldr	r3, [pc, #188]	@ (8001820 <LCD_IO_Init+0xe4>)
 8001762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001764:	f003 0308 	and.w	r3, r3, #8
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 800176c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001770:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001772:	2301      	movs	r3, #1
 8001774:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800177a:	2302      	movs	r3, #2
 800177c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800177e:	f107 030c 	add.w	r3, r7, #12
 8001782:	4619      	mov	r1, r3
 8001784:	4827      	ldr	r0, [pc, #156]	@ (8001824 <LCD_IO_Init+0xe8>)
 8001786:	f000 fc9b 	bl	80020c0 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	607b      	str	r3, [r7, #4]
 800178e:	4b24      	ldr	r3, [pc, #144]	@ (8001820 <LCD_IO_Init+0xe4>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001792:	4a23      	ldr	r2, [pc, #140]	@ (8001820 <LCD_IO_Init+0xe4>)
 8001794:	f043 0308 	orr.w	r3, r3, #8
 8001798:	6313      	str	r3, [r2, #48]	@ 0x30
 800179a:	4b21      	ldr	r3, [pc, #132]	@ (8001820 <LCD_IO_Init+0xe4>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	f003 0308 	and.w	r3, r3, #8
 80017a2:	607b      	str	r3, [r7, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80017a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80017ac:	2301      	movs	r3, #1
 80017ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80017b4:	2302      	movs	r3, #2
 80017b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80017b8:	f107 030c 	add.w	r3, r7, #12
 80017bc:	4619      	mov	r1, r3
 80017be:	4819      	ldr	r0, [pc, #100]	@ (8001824 <LCD_IO_Init+0xe8>)
 80017c0:	f000 fc7e 	bl	80020c0 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80017c4:	2300      	movs	r3, #0
 80017c6:	603b      	str	r3, [r7, #0]
 80017c8:	4b15      	ldr	r3, [pc, #84]	@ (8001820 <LCD_IO_Init+0xe4>)
 80017ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017cc:	4a14      	ldr	r2, [pc, #80]	@ (8001820 <LCD_IO_Init+0xe4>)
 80017ce:	f043 0304 	orr.w	r3, r3, #4
 80017d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80017d4:	4b12      	ldr	r3, [pc, #72]	@ (8001820 <LCD_IO_Init+0xe4>)
 80017d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	603b      	str	r3, [r7, #0]
 80017de:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80017e0:	2304      	movs	r3, #4
 80017e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80017e4:	2301      	movs	r3, #1
 80017e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80017ec:	2302      	movs	r3, #2
 80017ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80017f0:	f107 030c 	add.w	r3, r7, #12
 80017f4:	4619      	mov	r1, r3
 80017f6:	480c      	ldr	r0, [pc, #48]	@ (8001828 <LCD_IO_Init+0xec>)
 80017f8:	f000 fc62 	bl	80020c0 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80017fc:	2200      	movs	r2, #0
 80017fe:	2104      	movs	r1, #4
 8001800:	4809      	ldr	r0, [pc, #36]	@ (8001828 <LCD_IO_Init+0xec>)
 8001802:	f000 ff15 	bl	8002630 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001806:	2201      	movs	r2, #1
 8001808:	2104      	movs	r1, #4
 800180a:	4807      	ldr	r0, [pc, #28]	@ (8001828 <LCD_IO_Init+0xec>)
 800180c:	f000 ff10 	bl	8002630 <HAL_GPIO_WritePin>

    SPI_Init();
 8001810:	f7ff fef6 	bl	8001600 <SPI_Init>
  }
}
 8001814:	bf00      	nop
 8001816:	3720      	adds	r7, #32
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20025974 	.word	0x20025974
 8001820:	40023800 	.word	0x40023800
 8001824:	40020c00 	.word	0x40020c00
 8001828:	40020800 	.word	0x40020800

0800182c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001836:	2201      	movs	r2, #1
 8001838:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800183c:	480a      	ldr	r0, [pc, #40]	@ (8001868 <LCD_IO_WriteData+0x3c>)
 800183e:	f000 fef7 	bl	8002630 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001842:	2200      	movs	r2, #0
 8001844:	2104      	movs	r1, #4
 8001846:	4809      	ldr	r0, [pc, #36]	@ (800186c <LCD_IO_WriteData+0x40>)
 8001848:	f000 fef2 	bl	8002630 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 800184c:	88fb      	ldrh	r3, [r7, #6]
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff ff10 	bl	8001674 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001854:	2201      	movs	r2, #1
 8001856:	2104      	movs	r1, #4
 8001858:	4804      	ldr	r0, [pc, #16]	@ (800186c <LCD_IO_WriteData+0x40>)
 800185a:	f000 fee9 	bl	8002630 <HAL_GPIO_WritePin>
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40020c00 	.word	0x40020c00
 800186c:	40020800 	.word	0x40020800

08001870 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800187a:	2200      	movs	r2, #0
 800187c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001880:	480a      	ldr	r0, [pc, #40]	@ (80018ac <LCD_IO_WriteReg+0x3c>)
 8001882:	f000 fed5 	bl	8002630 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001886:	2200      	movs	r2, #0
 8001888:	2104      	movs	r1, #4
 800188a:	4809      	ldr	r0, [pc, #36]	@ (80018b0 <LCD_IO_WriteReg+0x40>)
 800188c:	f000 fed0 	bl	8002630 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	b29b      	uxth	r3, r3
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff feed 	bl	8001674 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800189a:	2201      	movs	r2, #1
 800189c:	2104      	movs	r1, #4
 800189e:	4804      	ldr	r0, [pc, #16]	@ (80018b0 <LCD_IO_WriteReg+0x40>)
 80018a0:	f000 fec6 	bl	8002630 <HAL_GPIO_WritePin>
}
 80018a4:	bf00      	nop
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40020c00 	.word	0x40020c00
 80018b0:	40020800 	.word	0x40020800

080018b4 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 faf5 	bl	8001eac <HAL_Delay>
}
 80018c2:	bf00      	nop
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018ce:	f000 fa7b 	bl	8001dc8 <HAL_Init>

  // The default system configuration function is "suspect" so we need to make our own clock configuration
  // Note - You, the developer, MAY have to play with some of this coniguration as you progress in your project
  SystemClockOverride();
 80018d2:	f000 f80b 	bl	80018ec <SystemClockOverride>

  ApplicationInit(); // Initializes the LCD functionality
 80018d6:	f7fe fe01 	bl	80004dc <ApplicationInit>

  LCD_Visual_Demo();
 80018da:	f7fe fe0f 	bl	80004fc <LCD_Visual_Demo>

  HAL_Delay(5000);
 80018de:	f241 3088 	movw	r0, #5000	@ 0x1388
 80018e2:	f000 fae3 	bl	8001eac <HAL_Delay>

  // DO NOT CALL THIS FUNCTION WHEN INTERRUPT MODE IS SELECTED IN THE COMPILE SWITCH IN stmpe811.h
  // Un-comment the below function after setting COMPILE_TOUCH to 1 in stmpe811.h
  //LCD_Touch_Polling_Demo(); // This function Will not return

  while (1)
 80018e6:	bf00      	nop
 80018e8:	e7fd      	b.n	80018e6 <main+0x1c>
	...

080018ec <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b092      	sub	sp, #72	@ 0x48
 80018f0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	603b      	str	r3, [r7, #0]
 80018f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001968 <SystemClockOverride+0x7c>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fa:	4a1b      	ldr	r2, [pc, #108]	@ (8001968 <SystemClockOverride+0x7c>)
 80018fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001900:	6413      	str	r3, [r2, #64]	@ 0x40
 8001902:	4b19      	ldr	r3, [pc, #100]	@ (8001968 <SystemClockOverride+0x7c>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800190a:	603b      	str	r3, [r7, #0]
 800190c:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800190e:	2301      	movs	r3, #1
 8001910:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001912:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001916:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001918:	2302      	movs	r3, #2
 800191a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800191c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001920:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001922:	2308      	movs	r3, #8
 8001924:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001926:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800192a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800192c:	2302      	movs	r3, #2
 800192e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001930:	2307      	movs	r3, #7
 8001932:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001934:	1d3b      	adds	r3, r7, #4
 8001936:	4618      	mov	r0, r3
 8001938:	f001 f93a 	bl	8002bb0 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800193c:	230f      	movs	r3, #15
 800193e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001940:	2302      	movs	r3, #2
 8001942:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001944:	2300      	movs	r3, #0
 8001946:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001948:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800194c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800194e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001952:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8001954:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001958:	2105      	movs	r1, #5
 800195a:	4618      	mov	r0, r3
 800195c:	f001 fba0 	bl	80030a0 <HAL_RCC_ClockConfig>
}
 8001960:	bf00      	nop
 8001962:	3748      	adds	r7, #72	@ 0x48
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40023800 	.word	0x40023800

0800196c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001970:	b672      	cpsid	i
}
 8001972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001974:	bf00      	nop
 8001976:	e7fd      	b.n	8001974 <Error_Handler+0x8>

08001978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	607b      	str	r3, [r7, #4]
 8001982:	4b10      	ldr	r3, [pc, #64]	@ (80019c4 <HAL_MspInit+0x4c>)
 8001984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001986:	4a0f      	ldr	r2, [pc, #60]	@ (80019c4 <HAL_MspInit+0x4c>)
 8001988:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800198c:	6453      	str	r3, [r2, #68]	@ 0x44
 800198e:	4b0d      	ldr	r3, [pc, #52]	@ (80019c4 <HAL_MspInit+0x4c>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001992:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	603b      	str	r3, [r7, #0]
 800199e:	4b09      	ldr	r3, [pc, #36]	@ (80019c4 <HAL_MspInit+0x4c>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a2:	4a08      	ldr	r2, [pc, #32]	@ (80019c4 <HAL_MspInit+0x4c>)
 80019a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019aa:	4b06      	ldr	r3, [pc, #24]	@ (80019c4 <HAL_MspInit+0x4c>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019b2:	603b      	str	r3, [r7, #0]
 80019b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019b6:	2007      	movs	r0, #7
 80019b8:	f000 fb4e 	bl	8002058 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019bc:	bf00      	nop
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40023800 	.word	0x40023800

080019c8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b09a      	sub	sp, #104	@ 0x68
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019e4:	2230      	movs	r2, #48	@ 0x30
 80019e6:	2100      	movs	r1, #0
 80019e8:	4618      	mov	r0, r3
 80019ea:	f002 f9e5 	bl	8003db8 <memset>
  if(hltdc->Instance==LTDC)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a81      	ldr	r2, [pc, #516]	@ (8001bf8 <HAL_LTDC_MspInit+0x230>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	f040 80fa 	bne.w	8001bee <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80019fa:	2308      	movs	r3, #8
 80019fc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80019fe:	2332      	movs	r3, #50	@ 0x32
 8001a00:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001a02:	2302      	movs	r3, #2
 8001a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001a06:	2300      	movs	r3, #0
 8001a08:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f001 fd32 	bl	8003478 <HAL_RCCEx_PeriphCLKConfig>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8001a1a:	f7ff ffa7 	bl	800196c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	623b      	str	r3, [r7, #32]
 8001a22:	4b76      	ldr	r3, [pc, #472]	@ (8001bfc <HAL_LTDC_MspInit+0x234>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a26:	4a75      	ldr	r2, [pc, #468]	@ (8001bfc <HAL_LTDC_MspInit+0x234>)
 8001a28:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001a2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a2e:	4b73      	ldr	r3, [pc, #460]	@ (8001bfc <HAL_LTDC_MspInit+0x234>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a32:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a36:	623b      	str	r3, [r7, #32]
 8001a38:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
 8001a3e:	4b6f      	ldr	r3, [pc, #444]	@ (8001bfc <HAL_LTDC_MspInit+0x234>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a42:	4a6e      	ldr	r2, [pc, #440]	@ (8001bfc <HAL_LTDC_MspInit+0x234>)
 8001a44:	f043 0320 	orr.w	r3, r3, #32
 8001a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a4a:	4b6c      	ldr	r3, [pc, #432]	@ (8001bfc <HAL_LTDC_MspInit+0x234>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4e:	f003 0320 	and.w	r3, r3, #32
 8001a52:	61fb      	str	r3, [r7, #28]
 8001a54:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	61bb      	str	r3, [r7, #24]
 8001a5a:	4b68      	ldr	r3, [pc, #416]	@ (8001bfc <HAL_LTDC_MspInit+0x234>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5e:	4a67      	ldr	r2, [pc, #412]	@ (8001bfc <HAL_LTDC_MspInit+0x234>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a66:	4b65      	ldr	r3, [pc, #404]	@ (8001bfc <HAL_LTDC_MspInit+0x234>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	61bb      	str	r3, [r7, #24]
 8001a70:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
 8001a76:	4b61      	ldr	r3, [pc, #388]	@ (8001bfc <HAL_LTDC_MspInit+0x234>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7a:	4a60      	ldr	r2, [pc, #384]	@ (8001bfc <HAL_LTDC_MspInit+0x234>)
 8001a7c:	f043 0302 	orr.w	r3, r3, #2
 8001a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a82:	4b5e      	ldr	r3, [pc, #376]	@ (8001bfc <HAL_LTDC_MspInit+0x234>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	4b5a      	ldr	r3, [pc, #360]	@ (8001bfc <HAL_LTDC_MspInit+0x234>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a96:	4a59      	ldr	r2, [pc, #356]	@ (8001bfc <HAL_LTDC_MspInit+0x234>)
 8001a98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a9e:	4b57      	ldr	r3, [pc, #348]	@ (8001bfc <HAL_LTDC_MspInit+0x234>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	4b53      	ldr	r3, [pc, #332]	@ (8001bfc <HAL_LTDC_MspInit+0x234>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab2:	4a52      	ldr	r2, [pc, #328]	@ (8001bfc <HAL_LTDC_MspInit+0x234>)
 8001ab4:	f043 0304 	orr.w	r3, r3, #4
 8001ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aba:	4b50      	ldr	r3, [pc, #320]	@ (8001bfc <HAL_LTDC_MspInit+0x234>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abe:	f003 0304 	and.w	r3, r3, #4
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60bb      	str	r3, [r7, #8]
 8001aca:	4b4c      	ldr	r3, [pc, #304]	@ (8001bfc <HAL_LTDC_MspInit+0x234>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ace:	4a4b      	ldr	r2, [pc, #300]	@ (8001bfc <HAL_LTDC_MspInit+0x234>)
 8001ad0:	f043 0308 	orr.w	r3, r3, #8
 8001ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ad6:	4b49      	ldr	r3, [pc, #292]	@ (8001bfc <HAL_LTDC_MspInit+0x234>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ada:	f003 0308 	and.w	r3, r3, #8
 8001ade:	60bb      	str	r3, [r7, #8]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001ae2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ae6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af0:	2300      	movs	r3, #0
 8001af2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001af4:	230e      	movs	r3, #14
 8001af6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001af8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001afc:	4619      	mov	r1, r3
 8001afe:	4840      	ldr	r0, [pc, #256]	@ (8001c00 <HAL_LTDC_MspInit+0x238>)
 8001b00:	f000 fade 	bl	80020c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001b04:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001b08:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b12:	2300      	movs	r3, #0
 8001b14:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b16:	230e      	movs	r3, #14
 8001b18:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4838      	ldr	r0, [pc, #224]	@ (8001c04 <HAL_LTDC_MspInit+0x23c>)
 8001b22:	f000 facd 	bl	80020c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001b26:	2303      	movs	r3, #3
 8001b28:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b32:	2300      	movs	r3, #0
 8001b34:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001b36:	2309      	movs	r3, #9
 8001b38:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4831      	ldr	r0, [pc, #196]	@ (8001c08 <HAL_LTDC_MspInit+0x240>)
 8001b42:	f000 fabd 	bl	80020c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001b46:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001b4a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b54:	2300      	movs	r3, #0
 8001b56:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b58:	230e      	movs	r3, #14
 8001b5a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b5c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b60:	4619      	mov	r1, r3
 8001b62:	4829      	ldr	r0, [pc, #164]	@ (8001c08 <HAL_LTDC_MspInit+0x240>)
 8001b64:	f000 faac 	bl	80020c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001b68:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001b6c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b76:	2300      	movs	r3, #0
 8001b78:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b7a:	230e      	movs	r3, #14
 8001b7c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b7e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b82:	4619      	mov	r1, r3
 8001b84:	4821      	ldr	r0, [pc, #132]	@ (8001c0c <HAL_LTDC_MspInit+0x244>)
 8001b86:	f000 fa9b 	bl	80020c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001b8a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001b8e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b90:	2302      	movs	r3, #2
 8001b92:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b9c:	230e      	movs	r3, #14
 8001b9e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ba0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	481a      	ldr	r0, [pc, #104]	@ (8001c10 <HAL_LTDC_MspInit+0x248>)
 8001ba8:	f000 fa8a 	bl	80020c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001bac:	2348      	movs	r3, #72	@ 0x48
 8001bae:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001bbc:	230e      	movs	r3, #14
 8001bbe:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bc0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4813      	ldr	r0, [pc, #76]	@ (8001c14 <HAL_LTDC_MspInit+0x24c>)
 8001bc8:	f000 fa7a 	bl	80020c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001bcc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001bd0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001bde:	2309      	movs	r3, #9
 8001be0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001be2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001be6:	4619      	mov	r1, r3
 8001be8:	4808      	ldr	r0, [pc, #32]	@ (8001c0c <HAL_LTDC_MspInit+0x244>)
 8001bea:	f000 fa69 	bl	80020c0 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001bee:	bf00      	nop
 8001bf0:	3768      	adds	r7, #104	@ 0x68
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40016800 	.word	0x40016800
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40021400 	.word	0x40021400
 8001c04:	40020000 	.word	0x40020000
 8001c08:	40020400 	.word	0x40020400
 8001c0c:	40021800 	.word	0x40021800
 8001c10:	40020800 	.word	0x40020800
 8001c14:	40020c00 	.word	0x40020c00

08001c18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08a      	sub	sp, #40	@ 0x28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a19      	ldr	r2, [pc, #100]	@ (8001c9c <HAL_SPI_MspInit+0x84>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d12c      	bne.n	8001c94 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	4b18      	ldr	r3, [pc, #96]	@ (8001ca0 <HAL_SPI_MspInit+0x88>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c42:	4a17      	ldr	r2, [pc, #92]	@ (8001ca0 <HAL_SPI_MspInit+0x88>)
 8001c44:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c48:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ca0 <HAL_SPI_MspInit+0x88>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	4b11      	ldr	r3, [pc, #68]	@ (8001ca0 <HAL_SPI_MspInit+0x88>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5e:	4a10      	ldr	r2, [pc, #64]	@ (8001ca0 <HAL_SPI_MspInit+0x88>)
 8001c60:	f043 0320 	orr.w	r3, r3, #32
 8001c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c66:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca0 <HAL_SPI_MspInit+0x88>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6a:	f003 0320 	and.w	r3, r3, #32
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001c72:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c80:	2300      	movs	r3, #0
 8001c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001c84:	2305      	movs	r3, #5
 8001c86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c88:	f107 0314 	add.w	r3, r7, #20
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4805      	ldr	r0, [pc, #20]	@ (8001ca4 <HAL_SPI_MspInit+0x8c>)
 8001c90:	f000 fa16 	bl	80020c0 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8001c94:	bf00      	nop
 8001c96:	3728      	adds	r7, #40	@ 0x28
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40015000 	.word	0x40015000
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40021400 	.word	0x40021400

08001ca8 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a08      	ldr	r2, [pc, #32]	@ (8001cd8 <HAL_SPI_MspDeInit+0x30>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d10a      	bne.n	8001cd0 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001cba:	4b08      	ldr	r3, [pc, #32]	@ (8001cdc <HAL_SPI_MspDeInit+0x34>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cbe:	4a07      	ldr	r2, [pc, #28]	@ (8001cdc <HAL_SPI_MspDeInit+0x34>)
 8001cc0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001cc4:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001cc6:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8001cca:	4805      	ldr	r0, [pc, #20]	@ (8001ce0 <HAL_SPI_MspDeInit+0x38>)
 8001ccc:	f000 fba4 	bl	8002418 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40015000 	.word	0x40015000
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40021400 	.word	0x40021400

08001ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ce8:	bf00      	nop
 8001cea:	e7fd      	b.n	8001ce8 <NMI_Handler+0x4>

08001cec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cf0:	bf00      	nop
 8001cf2:	e7fd      	b.n	8001cf0 <HardFault_Handler+0x4>

08001cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cf8:	bf00      	nop
 8001cfa:	e7fd      	b.n	8001cf8 <MemManage_Handler+0x4>

08001cfc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d00:	bf00      	nop
 8001d02:	e7fd      	b.n	8001d00 <BusFault_Handler+0x4>

08001d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d08:	bf00      	nop
 8001d0a:	e7fd      	b.n	8001d08 <UsageFault_Handler+0x4>

08001d0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d3a:	f000 f897 	bl	8001e6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8001d42:	b480      	push	{r7}
 8001d44:	af00      	add	r7, sp, #0
}
 8001d46:	bf00      	nop
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d54:	4b06      	ldr	r3, [pc, #24]	@ (8001d70 <SystemInit+0x20>)
 8001d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d5a:	4a05      	ldr	r2, [pc, #20]	@ (8001d70 <SystemInit+0x20>)
 8001d5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001d74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001dac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d78:	f7ff ffea 	bl	8001d50 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d7c:	480c      	ldr	r0, [pc, #48]	@ (8001db0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d7e:	490d      	ldr	r1, [pc, #52]	@ (8001db4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d80:	4a0d      	ldr	r2, [pc, #52]	@ (8001db8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d84:	e002      	b.n	8001d8c <LoopCopyDataInit>

08001d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d8a:	3304      	adds	r3, #4

08001d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d90:	d3f9      	bcc.n	8001d86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d92:	4a0a      	ldr	r2, [pc, #40]	@ (8001dbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d94:	4c0a      	ldr	r4, [pc, #40]	@ (8001dc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d98:	e001      	b.n	8001d9e <LoopFillZerobss>

08001d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d9c:	3204      	adds	r2, #4

08001d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da0:	d3fb      	bcc.n	8001d9a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001da2:	f002 f811 	bl	8003dc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001da6:	f7ff fd90 	bl	80018ca <main>
  bx  lr    
 8001daa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001dac:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001db0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001db4:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001db8:	08005918 	.word	0x08005918
  ldr r2, =_sbss
 8001dbc:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001dc0:	2002597c 	.word	0x2002597c

08001dc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dc4:	e7fe      	b.n	8001dc4 <ADC_IRQHandler>
	...

08001dc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dcc:	4b0e      	ldr	r3, [pc, #56]	@ (8001e08 <HAL_Init+0x40>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a0d      	ldr	r2, [pc, #52]	@ (8001e08 <HAL_Init+0x40>)
 8001dd2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001e08 <HAL_Init+0x40>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a0a      	ldr	r2, [pc, #40]	@ (8001e08 <HAL_Init+0x40>)
 8001dde:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001de2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001de4:	4b08      	ldr	r3, [pc, #32]	@ (8001e08 <HAL_Init+0x40>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a07      	ldr	r2, [pc, #28]	@ (8001e08 <HAL_Init+0x40>)
 8001dea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001df0:	2003      	movs	r0, #3
 8001df2:	f000 f931 	bl	8002058 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001df6:	2000      	movs	r0, #0
 8001df8:	f000 f808 	bl	8001e0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dfc:	f7ff fdbc 	bl	8001978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40023c00 	.word	0x40023c00

08001e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e14:	4b12      	ldr	r3, [pc, #72]	@ (8001e60 <HAL_InitTick+0x54>)
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	4b12      	ldr	r3, [pc, #72]	@ (8001e64 <HAL_InitTick+0x58>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f000 f93b 	bl	80020a6 <HAL_SYSTICK_Config>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e00e      	b.n	8001e58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b0f      	cmp	r3, #15
 8001e3e:	d80a      	bhi.n	8001e56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e40:	2200      	movs	r2, #0
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	f04f 30ff 	mov.w	r0, #4294967295
 8001e48:	f000 f911 	bl	800206e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e4c:	4a06      	ldr	r2, [pc, #24]	@ (8001e68 <HAL_InitTick+0x5c>)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
 8001e54:	e000      	b.n	8001e58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	20000018 	.word	0x20000018
 8001e64:	20000020 	.word	0x20000020
 8001e68:	2000001c 	.word	0x2000001c

08001e6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e70:	4b06      	ldr	r3, [pc, #24]	@ (8001e8c <HAL_IncTick+0x20>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	461a      	mov	r2, r3
 8001e76:	4b06      	ldr	r3, [pc, #24]	@ (8001e90 <HAL_IncTick+0x24>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	4a04      	ldr	r2, [pc, #16]	@ (8001e90 <HAL_IncTick+0x24>)
 8001e7e:	6013      	str	r3, [r2, #0]
}
 8001e80:	bf00      	nop
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	20000020 	.word	0x20000020
 8001e90:	20025978 	.word	0x20025978

08001e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return uwTick;
 8001e98:	4b03      	ldr	r3, [pc, #12]	@ (8001ea8 <HAL_GetTick+0x14>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	20025978 	.word	0x20025978

08001eac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eb4:	f7ff ffee 	bl	8001e94 <HAL_GetTick>
 8001eb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec4:	d005      	beq.n	8001ed2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef0 <HAL_Delay+0x44>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4413      	add	r3, r2
 8001ed0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ed2:	bf00      	nop
 8001ed4:	f7ff ffde 	bl	8001e94 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d8f7      	bhi.n	8001ed4 <HAL_Delay+0x28>
  {
  }
}
 8001ee4:	bf00      	nop
 8001ee6:	bf00      	nop
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20000020 	.word	0x20000020

08001ef4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f04:	4b0c      	ldr	r3, [pc, #48]	@ (8001f38 <__NVIC_SetPriorityGrouping+0x44>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f10:	4013      	ands	r3, r2
 8001f12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f26:	4a04      	ldr	r2, [pc, #16]	@ (8001f38 <__NVIC_SetPriorityGrouping+0x44>)
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	60d3      	str	r3, [r2, #12]
}
 8001f2c:	bf00      	nop
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f40:	4b04      	ldr	r3, [pc, #16]	@ (8001f54 <__NVIC_GetPriorityGrouping+0x18>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	0a1b      	lsrs	r3, r3, #8
 8001f46:	f003 0307 	and.w	r3, r3, #7
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	e000ed00 	.word	0xe000ed00

08001f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	6039      	str	r1, [r7, #0]
 8001f62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	db0a      	blt.n	8001f82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	b2da      	uxtb	r2, r3
 8001f70:	490c      	ldr	r1, [pc, #48]	@ (8001fa4 <__NVIC_SetPriority+0x4c>)
 8001f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f76:	0112      	lsls	r2, r2, #4
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	440b      	add	r3, r1
 8001f7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f80:	e00a      	b.n	8001f98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	4908      	ldr	r1, [pc, #32]	@ (8001fa8 <__NVIC_SetPriority+0x50>)
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	3b04      	subs	r3, #4
 8001f90:	0112      	lsls	r2, r2, #4
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	440b      	add	r3, r1
 8001f96:	761a      	strb	r2, [r3, #24]
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	e000e100 	.word	0xe000e100
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b089      	sub	sp, #36	@ 0x24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f1c3 0307 	rsb	r3, r3, #7
 8001fc6:	2b04      	cmp	r3, #4
 8001fc8:	bf28      	it	cs
 8001fca:	2304      	movcs	r3, #4
 8001fcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	2b06      	cmp	r3, #6
 8001fd4:	d902      	bls.n	8001fdc <NVIC_EncodePriority+0x30>
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	3b03      	subs	r3, #3
 8001fda:	e000      	b.n	8001fde <NVIC_EncodePriority+0x32>
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43da      	mvns	r2, r3
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	401a      	ands	r2, r3
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffe:	43d9      	mvns	r1, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002004:	4313      	orrs	r3, r2
         );
}
 8002006:	4618      	mov	r0, r3
 8002008:	3724      	adds	r7, #36	@ 0x24
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
	...

08002014 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3b01      	subs	r3, #1
 8002020:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002024:	d301      	bcc.n	800202a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002026:	2301      	movs	r3, #1
 8002028:	e00f      	b.n	800204a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800202a:	4a0a      	ldr	r2, [pc, #40]	@ (8002054 <SysTick_Config+0x40>)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3b01      	subs	r3, #1
 8002030:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002032:	210f      	movs	r1, #15
 8002034:	f04f 30ff 	mov.w	r0, #4294967295
 8002038:	f7ff ff8e 	bl	8001f58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800203c:	4b05      	ldr	r3, [pc, #20]	@ (8002054 <SysTick_Config+0x40>)
 800203e:	2200      	movs	r2, #0
 8002040:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002042:	4b04      	ldr	r3, [pc, #16]	@ (8002054 <SysTick_Config+0x40>)
 8002044:	2207      	movs	r2, #7
 8002046:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	e000e010 	.word	0xe000e010

08002058 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7ff ff47 	bl	8001ef4 <__NVIC_SetPriorityGrouping>
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800206e:	b580      	push	{r7, lr}
 8002070:	b086      	sub	sp, #24
 8002072:	af00      	add	r7, sp, #0
 8002074:	4603      	mov	r3, r0
 8002076:	60b9      	str	r1, [r7, #8]
 8002078:	607a      	str	r2, [r7, #4]
 800207a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002080:	f7ff ff5c 	bl	8001f3c <__NVIC_GetPriorityGrouping>
 8002084:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	68b9      	ldr	r1, [r7, #8]
 800208a:	6978      	ldr	r0, [r7, #20]
 800208c:	f7ff ff8e 	bl	8001fac <NVIC_EncodePriority>
 8002090:	4602      	mov	r2, r0
 8002092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002096:	4611      	mov	r1, r2
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff ff5d 	bl	8001f58 <__NVIC_SetPriority>
}
 800209e:	bf00      	nop
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7ff ffb0 	bl	8002014 <SysTick_Config>
 80020b4:	4603      	mov	r3, r0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
	...

080020c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b089      	sub	sp, #36	@ 0x24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020d6:	2300      	movs	r3, #0
 80020d8:	61fb      	str	r3, [r7, #28]
 80020da:	e177      	b.n	80023cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020dc:	2201      	movs	r2, #1
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	4013      	ands	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	f040 8166 	bne.w	80023c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	2b01      	cmp	r3, #1
 8002104:	d005      	beq.n	8002112 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800210e:	2b02      	cmp	r3, #2
 8002110:	d130      	bne.n	8002174 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	2203      	movs	r2, #3
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43db      	mvns	r3, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4013      	ands	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4313      	orrs	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002148:	2201      	movs	r2, #1
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	091b      	lsrs	r3, r3, #4
 800215e:	f003 0201 	and.w	r2, r3, #1
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 0303 	and.w	r3, r3, #3
 800217c:	2b03      	cmp	r3, #3
 800217e:	d017      	beq.n	80021b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	2203      	movs	r2, #3
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4013      	ands	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 0303 	and.w	r3, r3, #3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d123      	bne.n	8002204 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	08da      	lsrs	r2, r3, #3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3208      	adds	r2, #8
 80021c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	f003 0307 	and.w	r3, r3, #7
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	220f      	movs	r2, #15
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	691a      	ldr	r2, [r3, #16]
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	08da      	lsrs	r2, r3, #3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	3208      	adds	r2, #8
 80021fe:	69b9      	ldr	r1, [r7, #24]
 8002200:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	2203      	movs	r2, #3
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	43db      	mvns	r3, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4013      	ands	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f003 0203 	and.w	r2, r3, #3
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4313      	orrs	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 80c0 	beq.w	80023c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	4b66      	ldr	r3, [pc, #408]	@ (80023e4 <HAL_GPIO_Init+0x324>)
 800224c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224e:	4a65      	ldr	r2, [pc, #404]	@ (80023e4 <HAL_GPIO_Init+0x324>)
 8002250:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002254:	6453      	str	r3, [r2, #68]	@ 0x44
 8002256:	4b63      	ldr	r3, [pc, #396]	@ (80023e4 <HAL_GPIO_Init+0x324>)
 8002258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002262:	4a61      	ldr	r2, [pc, #388]	@ (80023e8 <HAL_GPIO_Init+0x328>)
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	089b      	lsrs	r3, r3, #2
 8002268:	3302      	adds	r3, #2
 800226a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800226e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	220f      	movs	r2, #15
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43db      	mvns	r3, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4013      	ands	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a58      	ldr	r2, [pc, #352]	@ (80023ec <HAL_GPIO_Init+0x32c>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d037      	beq.n	80022fe <HAL_GPIO_Init+0x23e>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a57      	ldr	r2, [pc, #348]	@ (80023f0 <HAL_GPIO_Init+0x330>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d031      	beq.n	80022fa <HAL_GPIO_Init+0x23a>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a56      	ldr	r2, [pc, #344]	@ (80023f4 <HAL_GPIO_Init+0x334>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d02b      	beq.n	80022f6 <HAL_GPIO_Init+0x236>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a55      	ldr	r2, [pc, #340]	@ (80023f8 <HAL_GPIO_Init+0x338>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d025      	beq.n	80022f2 <HAL_GPIO_Init+0x232>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a54      	ldr	r2, [pc, #336]	@ (80023fc <HAL_GPIO_Init+0x33c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d01f      	beq.n	80022ee <HAL_GPIO_Init+0x22e>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a53      	ldr	r2, [pc, #332]	@ (8002400 <HAL_GPIO_Init+0x340>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d019      	beq.n	80022ea <HAL_GPIO_Init+0x22a>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a52      	ldr	r2, [pc, #328]	@ (8002404 <HAL_GPIO_Init+0x344>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d013      	beq.n	80022e6 <HAL_GPIO_Init+0x226>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a51      	ldr	r2, [pc, #324]	@ (8002408 <HAL_GPIO_Init+0x348>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d00d      	beq.n	80022e2 <HAL_GPIO_Init+0x222>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a50      	ldr	r2, [pc, #320]	@ (800240c <HAL_GPIO_Init+0x34c>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d007      	beq.n	80022de <HAL_GPIO_Init+0x21e>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a4f      	ldr	r2, [pc, #316]	@ (8002410 <HAL_GPIO_Init+0x350>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d101      	bne.n	80022da <HAL_GPIO_Init+0x21a>
 80022d6:	2309      	movs	r3, #9
 80022d8:	e012      	b.n	8002300 <HAL_GPIO_Init+0x240>
 80022da:	230a      	movs	r3, #10
 80022dc:	e010      	b.n	8002300 <HAL_GPIO_Init+0x240>
 80022de:	2308      	movs	r3, #8
 80022e0:	e00e      	b.n	8002300 <HAL_GPIO_Init+0x240>
 80022e2:	2307      	movs	r3, #7
 80022e4:	e00c      	b.n	8002300 <HAL_GPIO_Init+0x240>
 80022e6:	2306      	movs	r3, #6
 80022e8:	e00a      	b.n	8002300 <HAL_GPIO_Init+0x240>
 80022ea:	2305      	movs	r3, #5
 80022ec:	e008      	b.n	8002300 <HAL_GPIO_Init+0x240>
 80022ee:	2304      	movs	r3, #4
 80022f0:	e006      	b.n	8002300 <HAL_GPIO_Init+0x240>
 80022f2:	2303      	movs	r3, #3
 80022f4:	e004      	b.n	8002300 <HAL_GPIO_Init+0x240>
 80022f6:	2302      	movs	r3, #2
 80022f8:	e002      	b.n	8002300 <HAL_GPIO_Init+0x240>
 80022fa:	2301      	movs	r3, #1
 80022fc:	e000      	b.n	8002300 <HAL_GPIO_Init+0x240>
 80022fe:	2300      	movs	r3, #0
 8002300:	69fa      	ldr	r2, [r7, #28]
 8002302:	f002 0203 	and.w	r2, r2, #3
 8002306:	0092      	lsls	r2, r2, #2
 8002308:	4093      	lsls	r3, r2
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4313      	orrs	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002310:	4935      	ldr	r1, [pc, #212]	@ (80023e8 <HAL_GPIO_Init+0x328>)
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	089b      	lsrs	r3, r3, #2
 8002316:	3302      	adds	r3, #2
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800231e:	4b3d      	ldr	r3, [pc, #244]	@ (8002414 <HAL_GPIO_Init+0x354>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	43db      	mvns	r3, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4013      	ands	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4313      	orrs	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002342:	4a34      	ldr	r2, [pc, #208]	@ (8002414 <HAL_GPIO_Init+0x354>)
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002348:	4b32      	ldr	r3, [pc, #200]	@ (8002414 <HAL_GPIO_Init+0x354>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4313      	orrs	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800236c:	4a29      	ldr	r2, [pc, #164]	@ (8002414 <HAL_GPIO_Init+0x354>)
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002372:	4b28      	ldr	r3, [pc, #160]	@ (8002414 <HAL_GPIO_Init+0x354>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	43db      	mvns	r3, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4013      	ands	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002396:	4a1f      	ldr	r2, [pc, #124]	@ (8002414 <HAL_GPIO_Init+0x354>)
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800239c:	4b1d      	ldr	r3, [pc, #116]	@ (8002414 <HAL_GPIO_Init+0x354>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	43db      	mvns	r3, r3
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4013      	ands	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023c0:	4a14      	ldr	r2, [pc, #80]	@ (8002414 <HAL_GPIO_Init+0x354>)
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	3301      	adds	r3, #1
 80023ca:	61fb      	str	r3, [r7, #28]
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	2b0f      	cmp	r3, #15
 80023d0:	f67f ae84 	bls.w	80020dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023d4:	bf00      	nop
 80023d6:	bf00      	nop
 80023d8:	3724      	adds	r7, #36	@ 0x24
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	40023800 	.word	0x40023800
 80023e8:	40013800 	.word	0x40013800
 80023ec:	40020000 	.word	0x40020000
 80023f0:	40020400 	.word	0x40020400
 80023f4:	40020800 	.word	0x40020800
 80023f8:	40020c00 	.word	0x40020c00
 80023fc:	40021000 	.word	0x40021000
 8002400:	40021400 	.word	0x40021400
 8002404:	40021800 	.word	0x40021800
 8002408:	40021c00 	.word	0x40021c00
 800240c:	40022000 	.word	0x40022000
 8002410:	40022400 	.word	0x40022400
 8002414:	40013c00 	.word	0x40013c00

08002418 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002418:	b480      	push	{r7}
 800241a:	b087      	sub	sp, #28
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002422:	2300      	movs	r3, #0
 8002424:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002426:	2300      	movs	r3, #0
 8002428:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800242a:	2300      	movs	r3, #0
 800242c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800242e:	2300      	movs	r3, #0
 8002430:	617b      	str	r3, [r7, #20]
 8002432:	e0d9      	b.n	80025e8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002434:	2201      	movs	r2, #1
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	4013      	ands	r3, r2
 8002444:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	429a      	cmp	r2, r3
 800244c:	f040 80c9 	bne.w	80025e2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002450:	4a6b      	ldr	r2, [pc, #428]	@ (8002600 <HAL_GPIO_DeInit+0x1e8>)
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	089b      	lsrs	r3, r3, #2
 8002456:	3302      	adds	r3, #2
 8002458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800245c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f003 0303 	and.w	r3, r3, #3
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	220f      	movs	r2, #15
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	68ba      	ldr	r2, [r7, #8]
 800246e:	4013      	ands	r3, r2
 8002470:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a63      	ldr	r2, [pc, #396]	@ (8002604 <HAL_GPIO_DeInit+0x1ec>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d037      	beq.n	80024ea <HAL_GPIO_DeInit+0xd2>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a62      	ldr	r2, [pc, #392]	@ (8002608 <HAL_GPIO_DeInit+0x1f0>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d031      	beq.n	80024e6 <HAL_GPIO_DeInit+0xce>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a61      	ldr	r2, [pc, #388]	@ (800260c <HAL_GPIO_DeInit+0x1f4>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d02b      	beq.n	80024e2 <HAL_GPIO_DeInit+0xca>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a60      	ldr	r2, [pc, #384]	@ (8002610 <HAL_GPIO_DeInit+0x1f8>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d025      	beq.n	80024de <HAL_GPIO_DeInit+0xc6>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a5f      	ldr	r2, [pc, #380]	@ (8002614 <HAL_GPIO_DeInit+0x1fc>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d01f      	beq.n	80024da <HAL_GPIO_DeInit+0xc2>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a5e      	ldr	r2, [pc, #376]	@ (8002618 <HAL_GPIO_DeInit+0x200>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d019      	beq.n	80024d6 <HAL_GPIO_DeInit+0xbe>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a5d      	ldr	r2, [pc, #372]	@ (800261c <HAL_GPIO_DeInit+0x204>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d013      	beq.n	80024d2 <HAL_GPIO_DeInit+0xba>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a5c      	ldr	r2, [pc, #368]	@ (8002620 <HAL_GPIO_DeInit+0x208>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d00d      	beq.n	80024ce <HAL_GPIO_DeInit+0xb6>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a5b      	ldr	r2, [pc, #364]	@ (8002624 <HAL_GPIO_DeInit+0x20c>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d007      	beq.n	80024ca <HAL_GPIO_DeInit+0xb2>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a5a      	ldr	r2, [pc, #360]	@ (8002628 <HAL_GPIO_DeInit+0x210>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d101      	bne.n	80024c6 <HAL_GPIO_DeInit+0xae>
 80024c2:	2309      	movs	r3, #9
 80024c4:	e012      	b.n	80024ec <HAL_GPIO_DeInit+0xd4>
 80024c6:	230a      	movs	r3, #10
 80024c8:	e010      	b.n	80024ec <HAL_GPIO_DeInit+0xd4>
 80024ca:	2308      	movs	r3, #8
 80024cc:	e00e      	b.n	80024ec <HAL_GPIO_DeInit+0xd4>
 80024ce:	2307      	movs	r3, #7
 80024d0:	e00c      	b.n	80024ec <HAL_GPIO_DeInit+0xd4>
 80024d2:	2306      	movs	r3, #6
 80024d4:	e00a      	b.n	80024ec <HAL_GPIO_DeInit+0xd4>
 80024d6:	2305      	movs	r3, #5
 80024d8:	e008      	b.n	80024ec <HAL_GPIO_DeInit+0xd4>
 80024da:	2304      	movs	r3, #4
 80024dc:	e006      	b.n	80024ec <HAL_GPIO_DeInit+0xd4>
 80024de:	2303      	movs	r3, #3
 80024e0:	e004      	b.n	80024ec <HAL_GPIO_DeInit+0xd4>
 80024e2:	2302      	movs	r3, #2
 80024e4:	e002      	b.n	80024ec <HAL_GPIO_DeInit+0xd4>
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <HAL_GPIO_DeInit+0xd4>
 80024ea:	2300      	movs	r3, #0
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	f002 0203 	and.w	r2, r2, #3
 80024f2:	0092      	lsls	r2, r2, #2
 80024f4:	4093      	lsls	r3, r2
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d132      	bne.n	8002562 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80024fc:	4b4b      	ldr	r3, [pc, #300]	@ (800262c <HAL_GPIO_DeInit+0x214>)
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	43db      	mvns	r3, r3
 8002504:	4949      	ldr	r1, [pc, #292]	@ (800262c <HAL_GPIO_DeInit+0x214>)
 8002506:	4013      	ands	r3, r2
 8002508:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800250a:	4b48      	ldr	r3, [pc, #288]	@ (800262c <HAL_GPIO_DeInit+0x214>)
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	43db      	mvns	r3, r3
 8002512:	4946      	ldr	r1, [pc, #280]	@ (800262c <HAL_GPIO_DeInit+0x214>)
 8002514:	4013      	ands	r3, r2
 8002516:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002518:	4b44      	ldr	r3, [pc, #272]	@ (800262c <HAL_GPIO_DeInit+0x214>)
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	43db      	mvns	r3, r3
 8002520:	4942      	ldr	r1, [pc, #264]	@ (800262c <HAL_GPIO_DeInit+0x214>)
 8002522:	4013      	ands	r3, r2
 8002524:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002526:	4b41      	ldr	r3, [pc, #260]	@ (800262c <HAL_GPIO_DeInit+0x214>)
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	43db      	mvns	r3, r3
 800252e:	493f      	ldr	r1, [pc, #252]	@ (800262c <HAL_GPIO_DeInit+0x214>)
 8002530:	4013      	ands	r3, r2
 8002532:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	f003 0303 	and.w	r3, r3, #3
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	220f      	movs	r2, #15
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002544:	4a2e      	ldr	r2, [pc, #184]	@ (8002600 <HAL_GPIO_DeInit+0x1e8>)
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	089b      	lsrs	r3, r3, #2
 800254a:	3302      	adds	r3, #2
 800254c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	43da      	mvns	r2, r3
 8002554:	482a      	ldr	r0, [pc, #168]	@ (8002600 <HAL_GPIO_DeInit+0x1e8>)
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	089b      	lsrs	r3, r3, #2
 800255a:	400a      	ands	r2, r1
 800255c:	3302      	adds	r3, #2
 800255e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	2103      	movs	r1, #3
 800256c:	fa01 f303 	lsl.w	r3, r1, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	401a      	ands	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	08da      	lsrs	r2, r3, #3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3208      	adds	r2, #8
 8002580:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	220f      	movs	r2, #15
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	43db      	mvns	r3, r3
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	08d2      	lsrs	r2, r2, #3
 8002598:	4019      	ands	r1, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	3208      	adds	r2, #8
 800259e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	2103      	movs	r1, #3
 80025ac:	fa01 f303 	lsl.w	r3, r1, r3
 80025b0:	43db      	mvns	r3, r3
 80025b2:	401a      	ands	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	2101      	movs	r1, #1
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	fa01 f303 	lsl.w	r3, r1, r3
 80025c4:	43db      	mvns	r3, r3
 80025c6:	401a      	ands	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	2103      	movs	r1, #3
 80025d6:	fa01 f303 	lsl.w	r3, r1, r3
 80025da:	43db      	mvns	r3, r3
 80025dc:	401a      	ands	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	3301      	adds	r3, #1
 80025e6:	617b      	str	r3, [r7, #20]
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	2b0f      	cmp	r3, #15
 80025ec:	f67f af22 	bls.w	8002434 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80025f0:	bf00      	nop
 80025f2:	bf00      	nop
 80025f4:	371c      	adds	r7, #28
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	40013800 	.word	0x40013800
 8002604:	40020000 	.word	0x40020000
 8002608:	40020400 	.word	0x40020400
 800260c:	40020800 	.word	0x40020800
 8002610:	40020c00 	.word	0x40020c00
 8002614:	40021000 	.word	0x40021000
 8002618:	40021400 	.word	0x40021400
 800261c:	40021800 	.word	0x40021800
 8002620:	40021c00 	.word	0x40021c00
 8002624:	40022000 	.word	0x40022000
 8002628:	40022400 	.word	0x40022400
 800262c:	40013c00 	.word	0x40013c00

08002630 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	460b      	mov	r3, r1
 800263a:	807b      	strh	r3, [r7, #2]
 800263c:	4613      	mov	r3, r2
 800263e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002640:	787b      	ldrb	r3, [r7, #1]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002646:	887a      	ldrh	r2, [r7, #2]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800264c:	e003      	b.n	8002656 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800264e:	887b      	ldrh	r3, [r7, #2]
 8002650:	041a      	lsls	r2, r3, #16
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	619a      	str	r2, [r3, #24]
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
	...

08002664 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e0bf      	b.n	80027f6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d106      	bne.n	8002690 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7ff f99c 	bl	80019c8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2202      	movs	r2, #2
 8002694:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	699a      	ldr	r2, [r3, #24]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80026a6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6999      	ldr	r1, [r3, #24]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80026bc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6899      	ldr	r1, [r3, #8]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	4b4a      	ldr	r3, [pc, #296]	@ (8002800 <HAL_LTDC_Init+0x19c>)
 80026d8:	400b      	ands	r3, r1
 80026da:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	041b      	lsls	r3, r3, #16
 80026e2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6899      	ldr	r1, [r3, #8]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	699a      	ldr	r2, [r3, #24]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	431a      	orrs	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68d9      	ldr	r1, [r3, #12]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	4b3e      	ldr	r3, [pc, #248]	@ (8002800 <HAL_LTDC_Init+0x19c>)
 8002706:	400b      	ands	r3, r1
 8002708:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	041b      	lsls	r3, r3, #16
 8002710:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68d9      	ldr	r1, [r3, #12]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a1a      	ldr	r2, [r3, #32]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	431a      	orrs	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6919      	ldr	r1, [r3, #16]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	4b33      	ldr	r3, [pc, #204]	@ (8002800 <HAL_LTDC_Init+0x19c>)
 8002734:	400b      	ands	r3, r1
 8002736:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273c:	041b      	lsls	r3, r3, #16
 800273e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6919      	ldr	r1, [r3, #16]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	431a      	orrs	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6959      	ldr	r1, [r3, #20]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	4b27      	ldr	r3, [pc, #156]	@ (8002800 <HAL_LTDC_Init+0x19c>)
 8002762:	400b      	ands	r3, r1
 8002764:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800276a:	041b      	lsls	r3, r3, #16
 800276c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6959      	ldr	r1, [r3, #20]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	431a      	orrs	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	430a      	orrs	r2, r1
 8002782:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800278a:	021b      	lsls	r3, r3, #8
 800278c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8002794:	041b      	lsls	r3, r3, #16
 8002796:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80027a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80027ba:	431a      	orrs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	430a      	orrs	r2, r1
 80027c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f042 0206 	orr.w	r2, r2, #6
 80027d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	699a      	ldr	r2, [r3, #24]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0201 	orr.w	r2, r2, #1
 80027e2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	f000f800 	.word	0xf000f800

08002804 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002804:	b5b0      	push	{r4, r5, r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8002816:	2b01      	cmp	r3, #1
 8002818:	d101      	bne.n	800281e <HAL_LTDC_ConfigLayer+0x1a>
 800281a:	2302      	movs	r3, #2
 800281c:	e02c      	b.n	8002878 <HAL_LTDC_ConfigLayer+0x74>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2202      	movs	r2, #2
 800282a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2134      	movs	r1, #52	@ 0x34
 8002834:	fb01 f303 	mul.w	r3, r1, r3
 8002838:	4413      	add	r3, r2
 800283a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	4614      	mov	r4, r2
 8002842:	461d      	mov	r5, r3
 8002844:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002846:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002848:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800284a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800284c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800284e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002850:	682b      	ldr	r3, [r5, #0]
 8002852:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	68b9      	ldr	r1, [r7, #8]
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f000 f811 	bl	8002880 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2201      	movs	r2, #1
 8002864:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bdb0      	pop	{r4, r5, r7, pc}

08002880 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002880:	b480      	push	{r7}
 8002882:	b089      	sub	sp, #36	@ 0x24
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	0c1b      	lsrs	r3, r3, #16
 8002898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800289c:	4413      	add	r3, r2
 800289e:	041b      	lsls	r3, r3, #16
 80028a0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	461a      	mov	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	01db      	lsls	r3, r3, #7
 80028ac:	4413      	add	r3, r2
 80028ae:	3384      	adds	r3, #132	@ 0x84
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	6812      	ldr	r2, [r2, #0]
 80028b6:	4611      	mov	r1, r2
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	01d2      	lsls	r2, r2, #7
 80028bc:	440a      	add	r2, r1
 80028be:	3284      	adds	r2, #132	@ 0x84
 80028c0:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80028c4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	0c1b      	lsrs	r3, r3, #16
 80028d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80028d6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80028d8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4619      	mov	r1, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	01db      	lsls	r3, r3, #7
 80028e4:	440b      	add	r3, r1
 80028e6:	3384      	adds	r3, #132	@ 0x84
 80028e8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80028ee:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	68da      	ldr	r2, [r3, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028fe:	4413      	add	r3, r2
 8002900:	041b      	lsls	r3, r3, #16
 8002902:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	461a      	mov	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	01db      	lsls	r3, r3, #7
 800290e:	4413      	add	r3, r2
 8002910:	3384      	adds	r3, #132	@ 0x84
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	6812      	ldr	r2, [r2, #0]
 8002918:	4611      	mov	r1, r2
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	01d2      	lsls	r2, r2, #7
 800291e:	440a      	add	r2, r1
 8002920:	3284      	adds	r2, #132	@ 0x84
 8002922:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002926:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002936:	4413      	add	r3, r2
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4619      	mov	r1, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	01db      	lsls	r3, r3, #7
 8002944:	440b      	add	r3, r1
 8002946:	3384      	adds	r3, #132	@ 0x84
 8002948:	4619      	mov	r1, r3
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	4313      	orrs	r3, r2
 800294e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	461a      	mov	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	01db      	lsls	r3, r3, #7
 800295a:	4413      	add	r3, r2
 800295c:	3384      	adds	r3, #132	@ 0x84
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	6812      	ldr	r2, [r2, #0]
 8002964:	4611      	mov	r1, r2
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	01d2      	lsls	r2, r2, #7
 800296a:	440a      	add	r2, r1
 800296c:	3284      	adds	r2, #132	@ 0x84
 800296e:	f023 0307 	bic.w	r3, r3, #7
 8002972:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	461a      	mov	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	01db      	lsls	r3, r3, #7
 800297e:	4413      	add	r3, r2
 8002980:	3384      	adds	r3, #132	@ 0x84
 8002982:	461a      	mov	r2, r3
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002990:	021b      	lsls	r3, r3, #8
 8002992:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800299a:	041b      	lsls	r3, r3, #16
 800299c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	061b      	lsls	r3, r3, #24
 80029a4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	461a      	mov	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	01db      	lsls	r3, r3, #7
 80029b0:	4413      	add	r3, r2
 80029b2:	3384      	adds	r3, #132	@ 0x84
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	461a      	mov	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	01db      	lsls	r3, r3, #7
 80029c0:	4413      	add	r3, r2
 80029c2:	3384      	adds	r3, #132	@ 0x84
 80029c4:	461a      	mov	r2, r3
 80029c6:	2300      	movs	r3, #0
 80029c8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80029d0:	461a      	mov	r2, r3
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	431a      	orrs	r2, r3
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	431a      	orrs	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4619      	mov	r1, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	01db      	lsls	r3, r3, #7
 80029e4:	440b      	add	r3, r1
 80029e6:	3384      	adds	r3, #132	@ 0x84
 80029e8:	4619      	mov	r1, r3
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	461a      	mov	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	01db      	lsls	r3, r3, #7
 80029fa:	4413      	add	r3, r2
 80029fc:	3384      	adds	r3, #132	@ 0x84
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	6812      	ldr	r2, [r2, #0]
 8002a04:	4611      	mov	r1, r2
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	01d2      	lsls	r2, r2, #7
 8002a0a:	440a      	add	r2, r1
 8002a0c:	3284      	adds	r2, #132	@ 0x84
 8002a0e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002a12:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	461a      	mov	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	01db      	lsls	r3, r3, #7
 8002a1e:	4413      	add	r3, r2
 8002a20:	3384      	adds	r3, #132	@ 0x84
 8002a22:	461a      	mov	r2, r3
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	01db      	lsls	r3, r3, #7
 8002a34:	4413      	add	r3, r2
 8002a36:	3384      	adds	r3, #132	@ 0x84
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	6812      	ldr	r2, [r2, #0]
 8002a3e:	4611      	mov	r1, r2
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	01d2      	lsls	r2, r2, #7
 8002a44:	440a      	add	r2, r1
 8002a46:	3284      	adds	r2, #132	@ 0x84
 8002a48:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002a4c:	f023 0307 	bic.w	r3, r3, #7
 8002a50:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	69da      	ldr	r2, [r3, #28]
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	68f9      	ldr	r1, [r7, #12]
 8002a5c:	6809      	ldr	r1, [r1, #0]
 8002a5e:	4608      	mov	r0, r1
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	01c9      	lsls	r1, r1, #7
 8002a64:	4401      	add	r1, r0
 8002a66:	3184      	adds	r1, #132	@ 0x84
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	461a      	mov	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	01db      	lsls	r3, r3, #7
 8002a76:	4413      	add	r3, r2
 8002a78:	3384      	adds	r3, #132	@ 0x84
 8002a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	461a      	mov	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	01db      	lsls	r3, r3, #7
 8002a86:	4413      	add	r3, r2
 8002a88:	3384      	adds	r3, #132	@ 0x84
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	461a      	mov	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	01db      	lsls	r3, r3, #7
 8002a9a:	4413      	add	r3, r2
 8002a9c:	3384      	adds	r3, #132	@ 0x84
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa4:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d102      	bne.n	8002ab4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8002aae:	2304      	movs	r3, #4
 8002ab0:	61fb      	str	r3, [r7, #28]
 8002ab2:	e01b      	b.n	8002aec <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d102      	bne.n	8002ac2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8002abc:	2303      	movs	r3, #3
 8002abe:	61fb      	str	r3, [r7, #28]
 8002ac0:	e014      	b.n	8002aec <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d00b      	beq.n	8002ae2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d007      	beq.n	8002ae2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002ad6:	2b03      	cmp	r3, #3
 8002ad8:	d003      	beq.n	8002ae2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002ade:	2b07      	cmp	r3, #7
 8002ae0:	d102      	bne.n	8002ae8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	61fb      	str	r3, [r7, #28]
 8002ae6:	e001      	b.n	8002aec <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	461a      	mov	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	01db      	lsls	r3, r3, #7
 8002af6:	4413      	add	r3, r2
 8002af8:	3384      	adds	r3, #132	@ 0x84
 8002afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	6812      	ldr	r2, [r2, #0]
 8002b00:	4611      	mov	r1, r2
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	01d2      	lsls	r2, r2, #7
 8002b06:	440a      	add	r2, r1
 8002b08:	3284      	adds	r2, #132	@ 0x84
 8002b0a:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8002b0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b14:	69fa      	ldr	r2, [r7, #28]
 8002b16:	fb02 f303 	mul.w	r3, r2, r3
 8002b1a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	6859      	ldr	r1, [r3, #4]
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	1acb      	subs	r3, r1, r3
 8002b26:	69f9      	ldr	r1, [r7, #28]
 8002b28:	fb01 f303 	mul.w	r3, r1, r3
 8002b2c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002b2e:	68f9      	ldr	r1, [r7, #12]
 8002b30:	6809      	ldr	r1, [r1, #0]
 8002b32:	4608      	mov	r0, r1
 8002b34:	6879      	ldr	r1, [r7, #4]
 8002b36:	01c9      	lsls	r1, r1, #7
 8002b38:	4401      	add	r1, r0
 8002b3a:	3184      	adds	r1, #132	@ 0x84
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	461a      	mov	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	01db      	lsls	r3, r3, #7
 8002b4a:	4413      	add	r3, r2
 8002b4c:	3384      	adds	r3, #132	@ 0x84
 8002b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	6812      	ldr	r2, [r2, #0]
 8002b54:	4611      	mov	r1, r2
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	01d2      	lsls	r2, r2, #7
 8002b5a:	440a      	add	r2, r1
 8002b5c:	3284      	adds	r2, #132	@ 0x84
 8002b5e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002b62:	f023 0307 	bic.w	r3, r3, #7
 8002b66:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	01db      	lsls	r3, r3, #7
 8002b72:	4413      	add	r3, r2
 8002b74:	3384      	adds	r3, #132	@ 0x84
 8002b76:	461a      	mov	r2, r3
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b7c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	461a      	mov	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	01db      	lsls	r3, r3, #7
 8002b88:	4413      	add	r3, r2
 8002b8a:	3384      	adds	r3, #132	@ 0x84
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	6812      	ldr	r2, [r2, #0]
 8002b92:	4611      	mov	r1, r2
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	01d2      	lsls	r2, r2, #7
 8002b98:	440a      	add	r2, r1
 8002b9a:	3284      	adds	r2, #132	@ 0x84
 8002b9c:	f043 0301 	orr.w	r3, r3, #1
 8002ba0:	6013      	str	r3, [r2, #0]
}
 8002ba2:	bf00      	nop
 8002ba4:	3724      	adds	r7, #36	@ 0x24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
	...

08002bb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e267      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d075      	beq.n	8002cba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002bce:	4b88      	ldr	r3, [pc, #544]	@ (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 030c 	and.w	r3, r3, #12
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d00c      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bda:	4b85      	ldr	r3, [pc, #532]	@ (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002be2:	2b08      	cmp	r3, #8
 8002be4:	d112      	bne.n	8002c0c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002be6:	4b82      	ldr	r3, [pc, #520]	@ (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bf2:	d10b      	bne.n	8002c0c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf4:	4b7e      	ldr	r3, [pc, #504]	@ (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d05b      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x108>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d157      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e242      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c14:	d106      	bne.n	8002c24 <HAL_RCC_OscConfig+0x74>
 8002c16:	4b76      	ldr	r3, [pc, #472]	@ (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a75      	ldr	r2, [pc, #468]	@ (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	e01d      	b.n	8002c60 <HAL_RCC_OscConfig+0xb0>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c2c:	d10c      	bne.n	8002c48 <HAL_RCC_OscConfig+0x98>
 8002c2e:	4b70      	ldr	r3, [pc, #448]	@ (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a6f      	ldr	r2, [pc, #444]	@ (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	4b6d      	ldr	r3, [pc, #436]	@ (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a6c      	ldr	r2, [pc, #432]	@ (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	e00b      	b.n	8002c60 <HAL_RCC_OscConfig+0xb0>
 8002c48:	4b69      	ldr	r3, [pc, #420]	@ (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a68      	ldr	r2, [pc, #416]	@ (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c52:	6013      	str	r3, [r2, #0]
 8002c54:	4b66      	ldr	r3, [pc, #408]	@ (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a65      	ldr	r2, [pc, #404]	@ (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d013      	beq.n	8002c90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c68:	f7ff f914 	bl	8001e94 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c70:	f7ff f910 	bl	8001e94 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b64      	cmp	r3, #100	@ 0x64
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e207      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c82:	4b5b      	ldr	r3, [pc, #364]	@ (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0f0      	beq.n	8002c70 <HAL_RCC_OscConfig+0xc0>
 8002c8e:	e014      	b.n	8002cba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c90:	f7ff f900 	bl	8001e94 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c98:	f7ff f8fc 	bl	8001e94 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b64      	cmp	r3, #100	@ 0x64
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e1f3      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002caa:	4b51      	ldr	r3, [pc, #324]	@ (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f0      	bne.n	8002c98 <HAL_RCC_OscConfig+0xe8>
 8002cb6:	e000      	b.n	8002cba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d063      	beq.n	8002d8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002cc6:	4b4a      	ldr	r3, [pc, #296]	@ (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 030c 	and.w	r3, r3, #12
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00b      	beq.n	8002cea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cd2:	4b47      	ldr	r3, [pc, #284]	@ (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002cda:	2b08      	cmp	r3, #8
 8002cdc:	d11c      	bne.n	8002d18 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cde:	4b44      	ldr	r3, [pc, #272]	@ (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d116      	bne.n	8002d18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cea:	4b41      	ldr	r3, [pc, #260]	@ (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d005      	beq.n	8002d02 <HAL_RCC_OscConfig+0x152>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d001      	beq.n	8002d02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e1c7      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d02:	4b3b      	ldr	r3, [pc, #236]	@ (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	4937      	ldr	r1, [pc, #220]	@ (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d16:	e03a      	b.n	8002d8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d020      	beq.n	8002d62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d20:	4b34      	ldr	r3, [pc, #208]	@ (8002df4 <HAL_RCC_OscConfig+0x244>)
 8002d22:	2201      	movs	r2, #1
 8002d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d26:	f7ff f8b5 	bl	8001e94 <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d2e:	f7ff f8b1 	bl	8001e94 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e1a8      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d40:	4b2b      	ldr	r3, [pc, #172]	@ (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0f0      	beq.n	8002d2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d4c:	4b28      	ldr	r3, [pc, #160]	@ (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	4925      	ldr	r1, [pc, #148]	@ (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	600b      	str	r3, [r1, #0]
 8002d60:	e015      	b.n	8002d8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d62:	4b24      	ldr	r3, [pc, #144]	@ (8002df4 <HAL_RCC_OscConfig+0x244>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d68:	f7ff f894 	bl	8001e94 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d70:	f7ff f890 	bl	8001e94 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e187      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d82:	4b1b      	ldr	r3, [pc, #108]	@ (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1f0      	bne.n	8002d70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0308 	and.w	r3, r3, #8
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d036      	beq.n	8002e08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d016      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002da2:	4b15      	ldr	r3, [pc, #84]	@ (8002df8 <HAL_RCC_OscConfig+0x248>)
 8002da4:	2201      	movs	r2, #1
 8002da6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da8:	f7ff f874 	bl	8001e94 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002db0:	f7ff f870 	bl	8001e94 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e167      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002dc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0f0      	beq.n	8002db0 <HAL_RCC_OscConfig+0x200>
 8002dce:	e01b      	b.n	8002e08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dd0:	4b09      	ldr	r3, [pc, #36]	@ (8002df8 <HAL_RCC_OscConfig+0x248>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd6:	f7ff f85d 	bl	8001e94 <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ddc:	e00e      	b.n	8002dfc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dde:	f7ff f859 	bl	8001e94 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d907      	bls.n	8002dfc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e150      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
 8002df0:	40023800 	.word	0x40023800
 8002df4:	42470000 	.word	0x42470000
 8002df8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dfc:	4b88      	ldr	r3, [pc, #544]	@ (8003020 <HAL_RCC_OscConfig+0x470>)
 8002dfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1ea      	bne.n	8002dde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 8097 	beq.w	8002f44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e16:	2300      	movs	r3, #0
 8002e18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e1a:	4b81      	ldr	r3, [pc, #516]	@ (8003020 <HAL_RCC_OscConfig+0x470>)
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10f      	bne.n	8002e46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e26:	2300      	movs	r3, #0
 8002e28:	60bb      	str	r3, [r7, #8]
 8002e2a:	4b7d      	ldr	r3, [pc, #500]	@ (8003020 <HAL_RCC_OscConfig+0x470>)
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2e:	4a7c      	ldr	r2, [pc, #496]	@ (8003020 <HAL_RCC_OscConfig+0x470>)
 8002e30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e34:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e36:	4b7a      	ldr	r3, [pc, #488]	@ (8003020 <HAL_RCC_OscConfig+0x470>)
 8002e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e3e:	60bb      	str	r3, [r7, #8]
 8002e40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e42:	2301      	movs	r3, #1
 8002e44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e46:	4b77      	ldr	r3, [pc, #476]	@ (8003024 <HAL_RCC_OscConfig+0x474>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d118      	bne.n	8002e84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e52:	4b74      	ldr	r3, [pc, #464]	@ (8003024 <HAL_RCC_OscConfig+0x474>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a73      	ldr	r2, [pc, #460]	@ (8003024 <HAL_RCC_OscConfig+0x474>)
 8002e58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e5e:	f7ff f819 	bl	8001e94 <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e66:	f7ff f815 	bl	8001e94 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e10c      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e78:	4b6a      	ldr	r3, [pc, #424]	@ (8003024 <HAL_RCC_OscConfig+0x474>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0f0      	beq.n	8002e66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d106      	bne.n	8002e9a <HAL_RCC_OscConfig+0x2ea>
 8002e8c:	4b64      	ldr	r3, [pc, #400]	@ (8003020 <HAL_RCC_OscConfig+0x470>)
 8002e8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e90:	4a63      	ldr	r2, [pc, #396]	@ (8003020 <HAL_RCC_OscConfig+0x470>)
 8002e92:	f043 0301 	orr.w	r3, r3, #1
 8002e96:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e98:	e01c      	b.n	8002ed4 <HAL_RCC_OscConfig+0x324>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2b05      	cmp	r3, #5
 8002ea0:	d10c      	bne.n	8002ebc <HAL_RCC_OscConfig+0x30c>
 8002ea2:	4b5f      	ldr	r3, [pc, #380]	@ (8003020 <HAL_RCC_OscConfig+0x470>)
 8002ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ea6:	4a5e      	ldr	r2, [pc, #376]	@ (8003020 <HAL_RCC_OscConfig+0x470>)
 8002ea8:	f043 0304 	orr.w	r3, r3, #4
 8002eac:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eae:	4b5c      	ldr	r3, [pc, #368]	@ (8003020 <HAL_RCC_OscConfig+0x470>)
 8002eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eb2:	4a5b      	ldr	r2, [pc, #364]	@ (8003020 <HAL_RCC_OscConfig+0x470>)
 8002eb4:	f043 0301 	orr.w	r3, r3, #1
 8002eb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eba:	e00b      	b.n	8002ed4 <HAL_RCC_OscConfig+0x324>
 8002ebc:	4b58      	ldr	r3, [pc, #352]	@ (8003020 <HAL_RCC_OscConfig+0x470>)
 8002ebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec0:	4a57      	ldr	r2, [pc, #348]	@ (8003020 <HAL_RCC_OscConfig+0x470>)
 8002ec2:	f023 0301 	bic.w	r3, r3, #1
 8002ec6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ec8:	4b55      	ldr	r3, [pc, #340]	@ (8003020 <HAL_RCC_OscConfig+0x470>)
 8002eca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ecc:	4a54      	ldr	r2, [pc, #336]	@ (8003020 <HAL_RCC_OscConfig+0x470>)
 8002ece:	f023 0304 	bic.w	r3, r3, #4
 8002ed2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d015      	beq.n	8002f08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002edc:	f7fe ffda 	bl	8001e94 <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee2:	e00a      	b.n	8002efa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee4:	f7fe ffd6 	bl	8001e94 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e0cb      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002efa:	4b49      	ldr	r3, [pc, #292]	@ (8003020 <HAL_RCC_OscConfig+0x470>)
 8002efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0ee      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x334>
 8002f06:	e014      	b.n	8002f32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f08:	f7fe ffc4 	bl	8001e94 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f0e:	e00a      	b.n	8002f26 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f10:	f7fe ffc0 	bl	8001e94 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e0b5      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f26:	4b3e      	ldr	r3, [pc, #248]	@ (8003020 <HAL_RCC_OscConfig+0x470>)
 8002f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1ee      	bne.n	8002f10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f32:	7dfb      	ldrb	r3, [r7, #23]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d105      	bne.n	8002f44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f38:	4b39      	ldr	r3, [pc, #228]	@ (8003020 <HAL_RCC_OscConfig+0x470>)
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3c:	4a38      	ldr	r2, [pc, #224]	@ (8003020 <HAL_RCC_OscConfig+0x470>)
 8002f3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f42:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 80a1 	beq.w	8003090 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f4e:	4b34      	ldr	r3, [pc, #208]	@ (8003020 <HAL_RCC_OscConfig+0x470>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 030c 	and.w	r3, r3, #12
 8002f56:	2b08      	cmp	r3, #8
 8002f58:	d05c      	beq.n	8003014 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d141      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f62:	4b31      	ldr	r3, [pc, #196]	@ (8003028 <HAL_RCC_OscConfig+0x478>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f68:	f7fe ff94 	bl	8001e94 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f70:	f7fe ff90 	bl	8001e94 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e087      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f82:	4b27      	ldr	r3, [pc, #156]	@ (8003020 <HAL_RCC_OscConfig+0x470>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1f0      	bne.n	8002f70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	69da      	ldr	r2, [r3, #28]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9c:	019b      	lsls	r3, r3, #6
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fa4:	085b      	lsrs	r3, r3, #1
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	041b      	lsls	r3, r3, #16
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb0:	061b      	lsls	r3, r3, #24
 8002fb2:	491b      	ldr	r1, [pc, #108]	@ (8003020 <HAL_RCC_OscConfig+0x470>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8003028 <HAL_RCC_OscConfig+0x478>)
 8002fba:	2201      	movs	r2, #1
 8002fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fbe:	f7fe ff69 	bl	8001e94 <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc6:	f7fe ff65 	bl	8001e94 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e05c      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd8:	4b11      	ldr	r3, [pc, #68]	@ (8003020 <HAL_RCC_OscConfig+0x470>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0f0      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x416>
 8002fe4:	e054      	b.n	8003090 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe6:	4b10      	ldr	r3, [pc, #64]	@ (8003028 <HAL_RCC_OscConfig+0x478>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fec:	f7fe ff52 	bl	8001e94 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff4:	f7fe ff4e 	bl	8001e94 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e045      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003006:	4b06      	ldr	r3, [pc, #24]	@ (8003020 <HAL_RCC_OscConfig+0x470>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1f0      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x444>
 8003012:	e03d      	b.n	8003090 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d107      	bne.n	800302c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e038      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
 8003020:	40023800 	.word	0x40023800
 8003024:	40007000 	.word	0x40007000
 8003028:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800302c:	4b1b      	ldr	r3, [pc, #108]	@ (800309c <HAL_RCC_OscConfig+0x4ec>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d028      	beq.n	800308c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003044:	429a      	cmp	r2, r3
 8003046:	d121      	bne.n	800308c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003052:	429a      	cmp	r2, r3
 8003054:	d11a      	bne.n	800308c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800305c:	4013      	ands	r3, r2
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003062:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003064:	4293      	cmp	r3, r2
 8003066:	d111      	bne.n	800308c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003072:	085b      	lsrs	r3, r3, #1
 8003074:	3b01      	subs	r3, #1
 8003076:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003078:	429a      	cmp	r2, r3
 800307a:	d107      	bne.n	800308c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003086:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003088:	429a      	cmp	r2, r3
 800308a:	d001      	beq.n	8003090 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e000      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	40023800 	.word	0x40023800

080030a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0cc      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030b4:	4b68      	ldr	r3, [pc, #416]	@ (8003258 <HAL_RCC_ClockConfig+0x1b8>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 030f 	and.w	r3, r3, #15
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d90c      	bls.n	80030dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c2:	4b65      	ldr	r3, [pc, #404]	@ (8003258 <HAL_RCC_ClockConfig+0x1b8>)
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ca:	4b63      	ldr	r3, [pc, #396]	@ (8003258 <HAL_RCC_ClockConfig+0x1b8>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d001      	beq.n	80030dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e0b8      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d020      	beq.n	800312a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d005      	beq.n	8003100 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030f4:	4b59      	ldr	r3, [pc, #356]	@ (800325c <HAL_RCC_ClockConfig+0x1bc>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	4a58      	ldr	r2, [pc, #352]	@ (800325c <HAL_RCC_ClockConfig+0x1bc>)
 80030fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80030fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0308 	and.w	r3, r3, #8
 8003108:	2b00      	cmp	r3, #0
 800310a:	d005      	beq.n	8003118 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800310c:	4b53      	ldr	r3, [pc, #332]	@ (800325c <HAL_RCC_ClockConfig+0x1bc>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	4a52      	ldr	r2, [pc, #328]	@ (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003112:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003116:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003118:	4b50      	ldr	r3, [pc, #320]	@ (800325c <HAL_RCC_ClockConfig+0x1bc>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	494d      	ldr	r1, [pc, #308]	@ (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003126:	4313      	orrs	r3, r2
 8003128:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d044      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d107      	bne.n	800314e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313e:	4b47      	ldr	r3, [pc, #284]	@ (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d119      	bne.n	800317e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e07f      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b02      	cmp	r3, #2
 8003154:	d003      	beq.n	800315e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800315a:	2b03      	cmp	r3, #3
 800315c:	d107      	bne.n	800316e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800315e:	4b3f      	ldr	r3, [pc, #252]	@ (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d109      	bne.n	800317e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e06f      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800316e:	4b3b      	ldr	r3, [pc, #236]	@ (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e067      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800317e:	4b37      	ldr	r3, [pc, #220]	@ (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f023 0203 	bic.w	r2, r3, #3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	4934      	ldr	r1, [pc, #208]	@ (800325c <HAL_RCC_ClockConfig+0x1bc>)
 800318c:	4313      	orrs	r3, r2
 800318e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003190:	f7fe fe80 	bl	8001e94 <HAL_GetTick>
 8003194:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003196:	e00a      	b.n	80031ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003198:	f7fe fe7c 	bl	8001e94 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e04f      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ae:	4b2b      	ldr	r3, [pc, #172]	@ (800325c <HAL_RCC_ClockConfig+0x1bc>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 020c 	and.w	r2, r3, #12
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	429a      	cmp	r2, r3
 80031be:	d1eb      	bne.n	8003198 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031c0:	4b25      	ldr	r3, [pc, #148]	@ (8003258 <HAL_RCC_ClockConfig+0x1b8>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 030f 	and.w	r3, r3, #15
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d20c      	bcs.n	80031e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ce:	4b22      	ldr	r3, [pc, #136]	@ (8003258 <HAL_RCC_ClockConfig+0x1b8>)
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d6:	4b20      	ldr	r3, [pc, #128]	@ (8003258 <HAL_RCC_ClockConfig+0x1b8>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 030f 	and.w	r3, r3, #15
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d001      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e032      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d008      	beq.n	8003206 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031f4:	4b19      	ldr	r3, [pc, #100]	@ (800325c <HAL_RCC_ClockConfig+0x1bc>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	4916      	ldr	r1, [pc, #88]	@ (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	4313      	orrs	r3, r2
 8003204:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0308 	and.w	r3, r3, #8
 800320e:	2b00      	cmp	r3, #0
 8003210:	d009      	beq.n	8003226 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003212:	4b12      	ldr	r3, [pc, #72]	@ (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	490e      	ldr	r1, [pc, #56]	@ (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003222:	4313      	orrs	r3, r2
 8003224:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003226:	f000 f821 	bl	800326c <HAL_RCC_GetSysClockFreq>
 800322a:	4602      	mov	r2, r0
 800322c:	4b0b      	ldr	r3, [pc, #44]	@ (800325c <HAL_RCC_ClockConfig+0x1bc>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	091b      	lsrs	r3, r3, #4
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	490a      	ldr	r1, [pc, #40]	@ (8003260 <HAL_RCC_ClockConfig+0x1c0>)
 8003238:	5ccb      	ldrb	r3, [r1, r3]
 800323a:	fa22 f303 	lsr.w	r3, r2, r3
 800323e:	4a09      	ldr	r2, [pc, #36]	@ (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 8003240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003242:	4b09      	ldr	r3, [pc, #36]	@ (8003268 <HAL_RCC_ClockConfig+0x1c8>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f7fe fde0 	bl	8001e0c <HAL_InitTick>

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40023c00 	.word	0x40023c00
 800325c:	40023800 	.word	0x40023800
 8003260:	080058f8 	.word	0x080058f8
 8003264:	20000018 	.word	0x20000018
 8003268:	2000001c 	.word	0x2000001c

0800326c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800326c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003270:	b094      	sub	sp, #80	@ 0x50
 8003272:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003274:	2300      	movs	r3, #0
 8003276:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003278:	2300      	movs	r3, #0
 800327a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800327c:	2300      	movs	r3, #0
 800327e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003280:	2300      	movs	r3, #0
 8003282:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003284:	4b79      	ldr	r3, [pc, #484]	@ (800346c <HAL_RCC_GetSysClockFreq+0x200>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 030c 	and.w	r3, r3, #12
 800328c:	2b08      	cmp	r3, #8
 800328e:	d00d      	beq.n	80032ac <HAL_RCC_GetSysClockFreq+0x40>
 8003290:	2b08      	cmp	r3, #8
 8003292:	f200 80e1 	bhi.w	8003458 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003296:	2b00      	cmp	r3, #0
 8003298:	d002      	beq.n	80032a0 <HAL_RCC_GetSysClockFreq+0x34>
 800329a:	2b04      	cmp	r3, #4
 800329c:	d003      	beq.n	80032a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800329e:	e0db      	b.n	8003458 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032a0:	4b73      	ldr	r3, [pc, #460]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x204>)
 80032a2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032a4:	e0db      	b.n	800345e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032a6:	4b73      	ldr	r3, [pc, #460]	@ (8003474 <HAL_RCC_GetSysClockFreq+0x208>)
 80032a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032aa:	e0d8      	b.n	800345e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032ac:	4b6f      	ldr	r3, [pc, #444]	@ (800346c <HAL_RCC_GetSysClockFreq+0x200>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032b4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032b6:	4b6d      	ldr	r3, [pc, #436]	@ (800346c <HAL_RCC_GetSysClockFreq+0x200>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d063      	beq.n	800338a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032c2:	4b6a      	ldr	r3, [pc, #424]	@ (800346c <HAL_RCC_GetSysClockFreq+0x200>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	099b      	lsrs	r3, r3, #6
 80032c8:	2200      	movs	r2, #0
 80032ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80032cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80032ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80032d6:	2300      	movs	r3, #0
 80032d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80032da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80032de:	4622      	mov	r2, r4
 80032e0:	462b      	mov	r3, r5
 80032e2:	f04f 0000 	mov.w	r0, #0
 80032e6:	f04f 0100 	mov.w	r1, #0
 80032ea:	0159      	lsls	r1, r3, #5
 80032ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032f0:	0150      	lsls	r0, r2, #5
 80032f2:	4602      	mov	r2, r0
 80032f4:	460b      	mov	r3, r1
 80032f6:	4621      	mov	r1, r4
 80032f8:	1a51      	subs	r1, r2, r1
 80032fa:	6139      	str	r1, [r7, #16]
 80032fc:	4629      	mov	r1, r5
 80032fe:	eb63 0301 	sbc.w	r3, r3, r1
 8003302:	617b      	str	r3, [r7, #20]
 8003304:	f04f 0200 	mov.w	r2, #0
 8003308:	f04f 0300 	mov.w	r3, #0
 800330c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003310:	4659      	mov	r1, fp
 8003312:	018b      	lsls	r3, r1, #6
 8003314:	4651      	mov	r1, sl
 8003316:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800331a:	4651      	mov	r1, sl
 800331c:	018a      	lsls	r2, r1, #6
 800331e:	4651      	mov	r1, sl
 8003320:	ebb2 0801 	subs.w	r8, r2, r1
 8003324:	4659      	mov	r1, fp
 8003326:	eb63 0901 	sbc.w	r9, r3, r1
 800332a:	f04f 0200 	mov.w	r2, #0
 800332e:	f04f 0300 	mov.w	r3, #0
 8003332:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003336:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800333a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800333e:	4690      	mov	r8, r2
 8003340:	4699      	mov	r9, r3
 8003342:	4623      	mov	r3, r4
 8003344:	eb18 0303 	adds.w	r3, r8, r3
 8003348:	60bb      	str	r3, [r7, #8]
 800334a:	462b      	mov	r3, r5
 800334c:	eb49 0303 	adc.w	r3, r9, r3
 8003350:	60fb      	str	r3, [r7, #12]
 8003352:	f04f 0200 	mov.w	r2, #0
 8003356:	f04f 0300 	mov.w	r3, #0
 800335a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800335e:	4629      	mov	r1, r5
 8003360:	024b      	lsls	r3, r1, #9
 8003362:	4621      	mov	r1, r4
 8003364:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003368:	4621      	mov	r1, r4
 800336a:	024a      	lsls	r2, r1, #9
 800336c:	4610      	mov	r0, r2
 800336e:	4619      	mov	r1, r3
 8003370:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003372:	2200      	movs	r2, #0
 8003374:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003376:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003378:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800337c:	f7fc ff36 	bl	80001ec <__aeabi_uldivmod>
 8003380:	4602      	mov	r2, r0
 8003382:	460b      	mov	r3, r1
 8003384:	4613      	mov	r3, r2
 8003386:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003388:	e058      	b.n	800343c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800338a:	4b38      	ldr	r3, [pc, #224]	@ (800346c <HAL_RCC_GetSysClockFreq+0x200>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	099b      	lsrs	r3, r3, #6
 8003390:	2200      	movs	r2, #0
 8003392:	4618      	mov	r0, r3
 8003394:	4611      	mov	r1, r2
 8003396:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800339a:	623b      	str	r3, [r7, #32]
 800339c:	2300      	movs	r3, #0
 800339e:	627b      	str	r3, [r7, #36]	@ 0x24
 80033a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033a4:	4642      	mov	r2, r8
 80033a6:	464b      	mov	r3, r9
 80033a8:	f04f 0000 	mov.w	r0, #0
 80033ac:	f04f 0100 	mov.w	r1, #0
 80033b0:	0159      	lsls	r1, r3, #5
 80033b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033b6:	0150      	lsls	r0, r2, #5
 80033b8:	4602      	mov	r2, r0
 80033ba:	460b      	mov	r3, r1
 80033bc:	4641      	mov	r1, r8
 80033be:	ebb2 0a01 	subs.w	sl, r2, r1
 80033c2:	4649      	mov	r1, r9
 80033c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80033c8:	f04f 0200 	mov.w	r2, #0
 80033cc:	f04f 0300 	mov.w	r3, #0
 80033d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033dc:	ebb2 040a 	subs.w	r4, r2, sl
 80033e0:	eb63 050b 	sbc.w	r5, r3, fp
 80033e4:	f04f 0200 	mov.w	r2, #0
 80033e8:	f04f 0300 	mov.w	r3, #0
 80033ec:	00eb      	lsls	r3, r5, #3
 80033ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033f2:	00e2      	lsls	r2, r4, #3
 80033f4:	4614      	mov	r4, r2
 80033f6:	461d      	mov	r5, r3
 80033f8:	4643      	mov	r3, r8
 80033fa:	18e3      	adds	r3, r4, r3
 80033fc:	603b      	str	r3, [r7, #0]
 80033fe:	464b      	mov	r3, r9
 8003400:	eb45 0303 	adc.w	r3, r5, r3
 8003404:	607b      	str	r3, [r7, #4]
 8003406:	f04f 0200 	mov.w	r2, #0
 800340a:	f04f 0300 	mov.w	r3, #0
 800340e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003412:	4629      	mov	r1, r5
 8003414:	028b      	lsls	r3, r1, #10
 8003416:	4621      	mov	r1, r4
 8003418:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800341c:	4621      	mov	r1, r4
 800341e:	028a      	lsls	r2, r1, #10
 8003420:	4610      	mov	r0, r2
 8003422:	4619      	mov	r1, r3
 8003424:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003426:	2200      	movs	r2, #0
 8003428:	61bb      	str	r3, [r7, #24]
 800342a:	61fa      	str	r2, [r7, #28]
 800342c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003430:	f7fc fedc 	bl	80001ec <__aeabi_uldivmod>
 8003434:	4602      	mov	r2, r0
 8003436:	460b      	mov	r3, r1
 8003438:	4613      	mov	r3, r2
 800343a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800343c:	4b0b      	ldr	r3, [pc, #44]	@ (800346c <HAL_RCC_GetSysClockFreq+0x200>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	0c1b      	lsrs	r3, r3, #16
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	3301      	adds	r3, #1
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800344c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800344e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003450:	fbb2 f3f3 	udiv	r3, r2, r3
 8003454:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003456:	e002      	b.n	800345e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003458:	4b05      	ldr	r3, [pc, #20]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x204>)
 800345a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800345c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800345e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003460:	4618      	mov	r0, r3
 8003462:	3750      	adds	r7, #80	@ 0x50
 8003464:	46bd      	mov	sp, r7
 8003466:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800346a:	bf00      	nop
 800346c:	40023800 	.word	0x40023800
 8003470:	00f42400 	.word	0x00f42400
 8003474:	007a1200 	.word	0x007a1200

08003478 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003480:	2300      	movs	r3, #0
 8003482:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003484:	2300      	movs	r3, #0
 8003486:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10b      	bne.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800349c:	2b00      	cmp	r3, #0
 800349e:	d105      	bne.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d075      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80034ac:	4b91      	ldr	r3, [pc, #580]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80034b2:	f7fe fcef 	bl	8001e94 <HAL_GetTick>
 80034b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034b8:	e008      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80034ba:	f7fe fceb 	bl	8001e94 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d901      	bls.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e189      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034cc:	4b8a      	ldr	r3, [pc, #552]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1f0      	bne.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d009      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	019a      	lsls	r2, r3, #6
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	071b      	lsls	r3, r3, #28
 80034f0:	4981      	ldr	r1, [pc, #516]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d01f      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003504:	4b7c      	ldr	r3, [pc, #496]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003506:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800350a:	0f1b      	lsrs	r3, r3, #28
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	019a      	lsls	r2, r3, #6
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	061b      	lsls	r3, r3, #24
 800351e:	431a      	orrs	r2, r3
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	071b      	lsls	r3, r3, #28
 8003524:	4974      	ldr	r1, [pc, #464]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003526:	4313      	orrs	r3, r2
 8003528:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800352c:	4b72      	ldr	r3, [pc, #456]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800352e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003532:	f023 021f 	bic.w	r2, r3, #31
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	3b01      	subs	r3, #1
 800353c:	496e      	ldr	r1, [pc, #440]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800353e:	4313      	orrs	r3, r2
 8003540:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00d      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	019a      	lsls	r2, r3, #6
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	061b      	lsls	r3, r3, #24
 800355c:	431a      	orrs	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	071b      	lsls	r3, r3, #28
 8003564:	4964      	ldr	r1, [pc, #400]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003566:	4313      	orrs	r3, r2
 8003568:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800356c:	4b61      	ldr	r3, [pc, #388]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800356e:	2201      	movs	r2, #1
 8003570:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003572:	f7fe fc8f 	bl	8001e94 <HAL_GetTick>
 8003576:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003578:	e008      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800357a:	f7fe fc8b 	bl	8001e94 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e129      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800358c:	4b5a      	ldr	r3, [pc, #360]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0f0      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d105      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d079      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80035b0:	4b52      	ldr	r3, [pc, #328]	@ (80036fc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80035b6:	f7fe fc6d 	bl	8001e94 <HAL_GetTick>
 80035ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80035bc:	e008      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80035be:	f7fe fc69 	bl	8001e94 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e107      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80035d0:	4b49      	ldr	r3, [pc, #292]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80035d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80035dc:	d0ef      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0304 	and.w	r3, r3, #4
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d020      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80035ea:	4b43      	ldr	r3, [pc, #268]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80035ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035f0:	0f1b      	lsrs	r3, r3, #28
 80035f2:	f003 0307 	and.w	r3, r3, #7
 80035f6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	019a      	lsls	r2, r3, #6
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	061b      	lsls	r3, r3, #24
 8003604:	431a      	orrs	r2, r3
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	071b      	lsls	r3, r3, #28
 800360a:	493b      	ldr	r1, [pc, #236]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800360c:	4313      	orrs	r3, r2
 800360e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003612:	4b39      	ldr	r3, [pc, #228]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003614:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003618:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	3b01      	subs	r3, #1
 8003622:	021b      	lsls	r3, r3, #8
 8003624:	4934      	ldr	r1, [pc, #208]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003626:	4313      	orrs	r3, r2
 8003628:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0308 	and.w	r3, r3, #8
 8003634:	2b00      	cmp	r3, #0
 8003636:	d01e      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003638:	4b2f      	ldr	r3, [pc, #188]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800363a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800363e:	0e1b      	lsrs	r3, r3, #24
 8003640:	f003 030f 	and.w	r3, r3, #15
 8003644:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	019a      	lsls	r2, r3, #6
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	061b      	lsls	r3, r3, #24
 8003650:	431a      	orrs	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	071b      	lsls	r3, r3, #28
 8003658:	4927      	ldr	r1, [pc, #156]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800365a:	4313      	orrs	r3, r2
 800365c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003660:	4b25      	ldr	r3, [pc, #148]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003662:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003666:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366e:	4922      	ldr	r1, [pc, #136]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003670:	4313      	orrs	r3, r2
 8003672:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003676:	4b21      	ldr	r3, [pc, #132]	@ (80036fc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003678:	2201      	movs	r2, #1
 800367a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800367c:	f7fe fc0a 	bl	8001e94 <HAL_GetTick>
 8003680:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003682:	e008      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003684:	f7fe fc06 	bl	8001e94 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e0a4      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003696:	4b18      	ldr	r3, [pc, #96]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800369e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036a2:	d1ef      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0320 	and.w	r3, r3, #32
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 808b 	beq.w	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80036b2:	2300      	movs	r3, #0
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	4b10      	ldr	r3, [pc, #64]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80036b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ba:	4a0f      	ldr	r2, [pc, #60]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80036bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80036c2:	4b0d      	ldr	r3, [pc, #52]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80036c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80036ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a0b      	ldr	r2, [pc, #44]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80036d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036d8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80036da:	f7fe fbdb 	bl	8001e94 <HAL_GetTick>
 80036de:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80036e0:	e010      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036e2:	f7fe fbd7 	bl	8001e94 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d909      	bls.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e075      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80036f4:	42470068 	.word	0x42470068
 80036f8:	40023800 	.word	0x40023800
 80036fc:	42470070 	.word	0x42470070
 8003700:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003704:	4b38      	ldr	r3, [pc, #224]	@ (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800370c:	2b00      	cmp	r3, #0
 800370e:	d0e8      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003710:	4b36      	ldr	r3, [pc, #216]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003714:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003718:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d02f      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003724:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	429a      	cmp	r2, r3
 800372c:	d028      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800372e:	4b2f      	ldr	r3, [pc, #188]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003732:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003736:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003738:	4b2d      	ldr	r3, [pc, #180]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800373a:	2201      	movs	r2, #1
 800373c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800373e:	4b2c      	ldr	r3, [pc, #176]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003744:	4a29      	ldr	r2, [pc, #164]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800374a:	4b28      	ldr	r3, [pc, #160]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800374c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b01      	cmp	r3, #1
 8003754:	d114      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003756:	f7fe fb9d 	bl	8001e94 <HAL_GetTick>
 800375a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800375c:	e00a      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800375e:	f7fe fb99 	bl	8001e94 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	f241 3288 	movw	r2, #5000	@ 0x1388
 800376c:	4293      	cmp	r3, r2
 800376e:	d901      	bls.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e035      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003774:	4b1d      	ldr	r3, [pc, #116]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0ee      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003784:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003788:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800378c:	d10d      	bne.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x332>
 800378e:	4b17      	ldr	r3, [pc, #92]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800379a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800379e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037a2:	4912      	ldr	r1, [pc, #72]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	608b      	str	r3, [r1, #8]
 80037a8:	e005      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80037aa:	4b10      	ldr	r3, [pc, #64]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	4a0f      	ldr	r2, [pc, #60]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80037b0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80037b4:	6093      	str	r3, [r2, #8]
 80037b6:	4b0d      	ldr	r3, [pc, #52]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80037b8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037c2:	490a      	ldr	r1, [pc, #40]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0310 	and.w	r3, r3, #16
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d004      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80037da:	4b06      	ldr	r3, [pc, #24]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80037dc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3718      	adds	r7, #24
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40007000 	.word	0x40007000
 80037ec:	40023800 	.word	0x40023800
 80037f0:	42470e40 	.word	0x42470e40
 80037f4:	424711e0 	.word	0x424711e0

080037f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e07b      	b.n	8003902 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380e:	2b00      	cmp	r3, #0
 8003810:	d108      	bne.n	8003824 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800381a:	d009      	beq.n	8003830 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	61da      	str	r2, [r3, #28]
 8003822:	e005      	b.n	8003830 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d106      	bne.n	8003850 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7fe f9e4 	bl	8001c18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2202      	movs	r2, #2
 8003854:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003866:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003878:	431a      	orrs	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	431a      	orrs	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	431a      	orrs	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038a0:	431a      	orrs	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80038aa:	431a      	orrs	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038b4:	ea42 0103 	orr.w	r1, r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038bc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	430a      	orrs	r2, r1
 80038c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	0c1b      	lsrs	r3, r3, #16
 80038ce:	f003 0104 	and.w	r1, r3, #4
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d6:	f003 0210 	and.w	r2, r3, #16
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	69da      	ldr	r2, [r3, #28]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b082      	sub	sp, #8
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d101      	bne.n	800391c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e01a      	b.n	8003952 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2202      	movs	r2, #2
 8003920:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003932:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f7fe f9b7 	bl	8001ca8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b088      	sub	sp, #32
 800395e:	af00      	add	r7, sp, #0
 8003960:	60f8      	str	r0, [r7, #12]
 8003962:	60b9      	str	r1, [r7, #8]
 8003964:	603b      	str	r3, [r7, #0]
 8003966:	4613      	mov	r3, r2
 8003968:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800396a:	f7fe fa93 	bl	8001e94 <HAL_GetTick>
 800396e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003970:	88fb      	ldrh	r3, [r7, #6]
 8003972:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b01      	cmp	r3, #1
 800397e:	d001      	beq.n	8003984 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003980:	2302      	movs	r3, #2
 8003982:	e12a      	b.n	8003bda <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d002      	beq.n	8003990 <HAL_SPI_Transmit+0x36>
 800398a:	88fb      	ldrh	r3, [r7, #6]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e122      	b.n	8003bda <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800399a:	2b01      	cmp	r3, #1
 800399c:	d101      	bne.n	80039a2 <HAL_SPI_Transmit+0x48>
 800399e:	2302      	movs	r3, #2
 80039a0:	e11b      	b.n	8003bda <HAL_SPI_Transmit+0x280>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2203      	movs	r2, #3
 80039ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	88fa      	ldrh	r2, [r7, #6]
 80039c2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	88fa      	ldrh	r2, [r7, #6]
 80039c8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039f0:	d10f      	bne.n	8003a12 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a00:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a10:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a1c:	2b40      	cmp	r3, #64	@ 0x40
 8003a1e:	d007      	beq.n	8003a30 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a38:	d152      	bne.n	8003ae0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d002      	beq.n	8003a48 <HAL_SPI_Transmit+0xee>
 8003a42:	8b7b      	ldrh	r3, [r7, #26]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d145      	bne.n	8003ad4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a4c:	881a      	ldrh	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a58:	1c9a      	adds	r2, r3, #2
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	3b01      	subs	r3, #1
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a6c:	e032      	b.n	8003ad4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d112      	bne.n	8003aa2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a80:	881a      	ldrh	r2, [r3, #0]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a8c:	1c9a      	adds	r2, r3, #2
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003aa0:	e018      	b.n	8003ad4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003aa2:	f7fe f9f7 	bl	8001e94 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d803      	bhi.n	8003aba <HAL_SPI_Transmit+0x160>
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab8:	d102      	bne.n	8003ac0 <HAL_SPI_Transmit+0x166>
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d109      	bne.n	8003ad4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e082      	b.n	8003bda <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1c7      	bne.n	8003a6e <HAL_SPI_Transmit+0x114>
 8003ade:	e053      	b.n	8003b88 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d002      	beq.n	8003aee <HAL_SPI_Transmit+0x194>
 8003ae8:	8b7b      	ldrh	r3, [r7, #26]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d147      	bne.n	8003b7e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	330c      	adds	r3, #12
 8003af8:	7812      	ldrb	r2, [r2, #0]
 8003afa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b00:	1c5a      	adds	r2, r3, #1
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003b14:	e033      	b.n	8003b7e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d113      	bne.n	8003b4c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	330c      	adds	r3, #12
 8003b2e:	7812      	ldrb	r2, [r2, #0]
 8003b30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b36:	1c5a      	adds	r2, r3, #1
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	3b01      	subs	r3, #1
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003b4a:	e018      	b.n	8003b7e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b4c:	f7fe f9a2 	bl	8001e94 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	683a      	ldr	r2, [r7, #0]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d803      	bhi.n	8003b64 <HAL_SPI_Transmit+0x20a>
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b62:	d102      	bne.n	8003b6a <HAL_SPI_Transmit+0x210>
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d109      	bne.n	8003b7e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e02d      	b.n	8003bda <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1c6      	bne.n	8003b16 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b88:	69fa      	ldr	r2, [r7, #28]
 8003b8a:	6839      	ldr	r1, [r7, #0]
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f000 f8bf 	bl	8003d10 <SPI_EndRxTxTransaction>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d002      	beq.n	8003b9e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10a      	bne.n	8003bbc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	617b      	str	r3, [r7, #20]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	617b      	str	r3, [r7, #20]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	617b      	str	r3, [r7, #20]
 8003bba:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e000      	b.n	8003bda <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
  }
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3720      	adds	r7, #32
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b083      	sub	sp, #12
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003bf0:	b2db      	uxtb	r3, r3
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
	...

08003c00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b088      	sub	sp, #32
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	603b      	str	r3, [r7, #0]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c10:	f7fe f940 	bl	8001e94 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c18:	1a9b      	subs	r3, r3, r2
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c20:	f7fe f938 	bl	8001e94 <HAL_GetTick>
 8003c24:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c26:	4b39      	ldr	r3, [pc, #228]	@ (8003d0c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	015b      	lsls	r3, r3, #5
 8003c2c:	0d1b      	lsrs	r3, r3, #20
 8003c2e:	69fa      	ldr	r2, [r7, #28]
 8003c30:	fb02 f303 	mul.w	r3, r2, r3
 8003c34:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c36:	e054      	b.n	8003ce2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c3e:	d050      	beq.n	8003ce2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c40:	f7fe f928 	bl	8001e94 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	69fa      	ldr	r2, [r7, #28]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d902      	bls.n	8003c56 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d13d      	bne.n	8003cd2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003c64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c6e:	d111      	bne.n	8003c94 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c78:	d004      	beq.n	8003c84 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c82:	d107      	bne.n	8003c94 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c9c:	d10f      	bne.n	8003cbe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003cac:	601a      	str	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003cbc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e017      	b.n	8003d02 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	689a      	ldr	r2, [r3, #8]
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	4013      	ands	r3, r2
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	bf0c      	ite	eq
 8003cf2:	2301      	moveq	r3, #1
 8003cf4:	2300      	movne	r3, #0
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	79fb      	ldrb	r3, [r7, #7]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d19b      	bne.n	8003c38 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3720      	adds	r7, #32
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	20000018 	.word	0x20000018

08003d10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b088      	sub	sp, #32
 8003d14:	af02      	add	r7, sp, #8
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	2201      	movs	r2, #1
 8003d24:	2102      	movs	r1, #2
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f7ff ff6a 	bl	8003c00 <SPI_WaitFlagStateUntilTimeout>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d007      	beq.n	8003d42 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d36:	f043 0220 	orr.w	r2, r3, #32
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e032      	b.n	8003da8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003d42:	4b1b      	ldr	r3, [pc, #108]	@ (8003db0 <SPI_EndRxTxTransaction+0xa0>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a1b      	ldr	r2, [pc, #108]	@ (8003db4 <SPI_EndRxTxTransaction+0xa4>)
 8003d48:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4c:	0d5b      	lsrs	r3, r3, #21
 8003d4e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003d52:	fb02 f303 	mul.w	r3, r2, r3
 8003d56:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d60:	d112      	bne.n	8003d88 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	9300      	str	r3, [sp, #0]
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	2180      	movs	r1, #128	@ 0x80
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f7ff ff47 	bl	8003c00 <SPI_WaitFlagStateUntilTimeout>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d016      	beq.n	8003da6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d7c:	f043 0220 	orr.w	r2, r3, #32
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e00f      	b.n	8003da8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00a      	beq.n	8003da4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	3b01      	subs	r3, #1
 8003d92:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d9e:	2b80      	cmp	r3, #128	@ 0x80
 8003da0:	d0f2      	beq.n	8003d88 <SPI_EndRxTxTransaction+0x78>
 8003da2:	e000      	b.n	8003da6 <SPI_EndRxTxTransaction+0x96>
        break;
 8003da4:	bf00      	nop
  }

  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3718      	adds	r7, #24
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	20000018 	.word	0x20000018
 8003db4:	165e9f81 	.word	0x165e9f81

08003db8 <memset>:
 8003db8:	4402      	add	r2, r0
 8003dba:	4603      	mov	r3, r0
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d100      	bne.n	8003dc2 <memset+0xa>
 8003dc0:	4770      	bx	lr
 8003dc2:	f803 1b01 	strb.w	r1, [r3], #1
 8003dc6:	e7f9      	b.n	8003dbc <memset+0x4>

08003dc8 <__libc_init_array>:
 8003dc8:	b570      	push	{r4, r5, r6, lr}
 8003dca:	4d0d      	ldr	r5, [pc, #52]	@ (8003e00 <__libc_init_array+0x38>)
 8003dcc:	4c0d      	ldr	r4, [pc, #52]	@ (8003e04 <__libc_init_array+0x3c>)
 8003dce:	1b64      	subs	r4, r4, r5
 8003dd0:	10a4      	asrs	r4, r4, #2
 8003dd2:	2600      	movs	r6, #0
 8003dd4:	42a6      	cmp	r6, r4
 8003dd6:	d109      	bne.n	8003dec <__libc_init_array+0x24>
 8003dd8:	4d0b      	ldr	r5, [pc, #44]	@ (8003e08 <__libc_init_array+0x40>)
 8003dda:	4c0c      	ldr	r4, [pc, #48]	@ (8003e0c <__libc_init_array+0x44>)
 8003ddc:	f000 f818 	bl	8003e10 <_init>
 8003de0:	1b64      	subs	r4, r4, r5
 8003de2:	10a4      	asrs	r4, r4, #2
 8003de4:	2600      	movs	r6, #0
 8003de6:	42a6      	cmp	r6, r4
 8003de8:	d105      	bne.n	8003df6 <__libc_init_array+0x2e>
 8003dea:	bd70      	pop	{r4, r5, r6, pc}
 8003dec:	f855 3b04 	ldr.w	r3, [r5], #4
 8003df0:	4798      	blx	r3
 8003df2:	3601      	adds	r6, #1
 8003df4:	e7ee      	b.n	8003dd4 <__libc_init_array+0xc>
 8003df6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dfa:	4798      	blx	r3
 8003dfc:	3601      	adds	r6, #1
 8003dfe:	e7f2      	b.n	8003de6 <__libc_init_array+0x1e>
 8003e00:	08005910 	.word	0x08005910
 8003e04:	08005910 	.word	0x08005910
 8003e08:	08005910 	.word	0x08005910
 8003e0c:	08005914 	.word	0x08005914

08003e10 <_init>:
 8003e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e12:	bf00      	nop
 8003e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e16:	bc08      	pop	{r3}
 8003e18:	469e      	mov	lr, r3
 8003e1a:	4770      	bx	lr

08003e1c <_fini>:
 8003e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e1e:	bf00      	nop
 8003e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e22:	bc08      	pop	{r3}
 8003e24:	469e      	mov	lr, r3
 8003e26:	4770      	bx	lr
