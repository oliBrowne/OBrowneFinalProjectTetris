
OBrowneFinalProjectTetris.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f9c  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ae8  08007148  08007148  00008148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c30  08008c30  0000a024  2**0
                  CONTENTS
  4 .ARM          00000008  08008c30  08008c30  00009c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c38  08008c38  0000a024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c38  08008c38  00009c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008c3c  08008c3c  00009c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08008c40  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a024  2**0
                  CONTENTS
 10 .bss          00025a94  20000024  20000024  0000a024  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025ab8  20025ab8  0000a024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a024  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ed74  00000000  00000000  0000a054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b97  00000000  00000000  00018dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000eb8  00000000  00000000  0001b960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b21  00000000  00000000  0001c818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000269f9  00000000  00000000  0001d339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001461c  00000000  00000000  00043d32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1b8d  00000000  00000000  0005834e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00139edb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b10  00000000  00000000  00139f20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000086  00000000  00000000  0013da30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000024 	.word	0x20000024
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08007130 	.word	0x08007130

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000028 	.word	0x20000028
 80001e8:	08007130 	.word	0x08007130

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80004e0:	f003 fcd8 	bl	8003e94 <initialise_monitor_handles>
    LTCD__Init();
 80004e4:	f001 fe5a 	bl	800219c <LTCD__Init>
    LTCD_Layer_Init(0);
 80004e8:	2000      	movs	r0, #0
 80004ea:	f001 fe17 	bl	800211c <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 80004ee:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80004f2:	2000      	movs	r0, #0
 80004f4:	f001 ff44 	bl	8002380 <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80004f8:	f002 fc4e 	bl	8002d98 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80004fc:	4b03      	ldr	r3, [pc, #12]	@ (800050c <ApplicationInit+0x30>)
 80004fe:	2201      	movs	r2, #1
 8000500:	719a      	strb	r2, [r3, #6]

	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
 8000502:	f000 f811 	bl	8000528 <LCDTouchScreenInterruptGPIOInit>
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	20000040 	.word	0x20000040

08000510 <startScreen>:

void LCD_Visual_Demo(void)
{
	visualDemo();
}
void startScreen(void){
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	title_screen();
 8000514:	f002 f806 	bl	8002524 <title_screen>

}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}

0800051c <endScreen>:
void endScreen(void){
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	end_screen();
 8000520:	f002 fb38 	bl	8002b94 <end_screen>
}
 8000524:	bf00      	nop
 8000526:	bd80      	pop	{r7, pc}

08000528 <LCDTouchScreenInterruptGPIOInit>:

// TouchScreen Interrupt
#if TOUCH_INTERRUPT_ENABLED == 1

void LCDTouchScreenInterruptGPIOInit(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b086      	sub	sp, #24
 800052c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef LCDConfig = {0};
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]
    LCDConfig.Pin = GPIO_PIN_15;
 800053c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000540:	607b      	str	r3, [r7, #4]
    LCDConfig.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000542:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000546:	60bb      	str	r3, [r7, #8]
    LCDConfig.Pull = GPIO_NOPULL;
 8000548:	2300      	movs	r3, #0
 800054a:	60fb      	str	r3, [r7, #12]
    LCDConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 800054c:	2302      	movs	r3, #2
 800054e:	613b      	str	r3, [r7, #16]
    
    // Clock enable
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000550:	2300      	movs	r3, #0
 8000552:	603b      	str	r3, [r7, #0]
 8000554:	4b0d      	ldr	r3, [pc, #52]	@ (800058c <LCDTouchScreenInterruptGPIOInit+0x64>)
 8000556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000558:	4a0c      	ldr	r2, [pc, #48]	@ (800058c <LCDTouchScreenInterruptGPIOInit+0x64>)
 800055a:	f043 0301 	orr.w	r3, r3, #1
 800055e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000560:	4b0a      	ldr	r3, [pc, #40]	@ (800058c <LCDTouchScreenInterruptGPIOInit+0x64>)
 8000562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000564:	f003 0301 	and.w	r3, r3, #1
 8000568:	603b      	str	r3, [r7, #0]
 800056a:	683b      	ldr	r3, [r7, #0]

    // GPIO Init      
    HAL_GPIO_Init(GPIOA, &LCDConfig);
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	4619      	mov	r1, r3
 8000570:	4807      	ldr	r0, [pc, #28]	@ (8000590 <LCDTouchScreenInterruptGPIOInit+0x68>)
 8000572:	f003 fef1 	bl	8004358 <HAL_GPIO_Init>

    // Interrupt Configuration
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000576:	2028      	movs	r0, #40	@ 0x28
 8000578:	f003 fe9f 	bl	80042ba <HAL_NVIC_EnableIRQ>

	LCDTouchIRQ.Line = EXTI_LINE_15;
 800057c:	4b05      	ldr	r3, [pc, #20]	@ (8000594 <LCDTouchScreenInterruptGPIOInit+0x6c>)
 800057e:	4a06      	ldr	r2, [pc, #24]	@ (8000598 <LCDTouchScreenInterruptGPIOInit+0x70>)
 8000580:	601a      	str	r2, [r3, #0]

}
 8000582:	bf00      	nop
 8000584:	3718      	adds	r7, #24
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40023800 	.word	0x40023800
 8000590:	40020000 	.word	0x40020000
 8000594:	20000048 	.word	0x20000048
 8000598:	0600000f 	.word	0x0600000f

0800059c <EXTI15_10_IRQHandler>:

static uint8_t statusFlag;
static uint32_t touchscreen_status = 0;

void EXTI15_10_IRQHandler()
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // May consider making this a universial interrupt guard
 80005a2:	2028      	movs	r0, #40	@ 0x28
 80005a4:	f003 fe97 	bl	80042d6 <HAL_NVIC_DisableIRQ>
	bool isTouchDetected = false;
 80005a8:	2300      	movs	r3, #0
 80005aa:	71fb      	strb	r3, [r7, #7]

	static uint32_t count;
	count = 0;
 80005ac:	4b31      	ldr	r3, [pc, #196]	@ (8000674 <EXTI15_10_IRQHandler+0xd8>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
	while(count == 0){
 80005b2:	e006      	b.n	80005c2 <EXTI15_10_IRQHandler+0x26>
		count = STMPE811_Read(STMPE811_FIFO_SIZE);
 80005b4:	204c      	movs	r0, #76	@ 0x4c
 80005b6:	f003 fb04 	bl	8003bc2 <STMPE811_Read>
 80005ba:	4603      	mov	r3, r0
 80005bc:	461a      	mov	r2, r3
 80005be:	4b2d      	ldr	r3, [pc, #180]	@ (8000674 <EXTI15_10_IRQHandler+0xd8>)
 80005c0:	601a      	str	r2, [r3, #0]
	while(count == 0){
 80005c2:	4b2c      	ldr	r3, [pc, #176]	@ (8000674 <EXTI15_10_IRQHandler+0xd8>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d0f4      	beq.n	80005b4 <EXTI15_10_IRQHandler+0x18>
	}

	// Disable touch interrupt bit on the STMPE811
	uint8_t currentIRQEnables = ReadRegisterFromTouchModule(STMPE811_INT_EN);
 80005ca:	200a      	movs	r0, #10
 80005cc:	f002 fbef 	bl	8002dae <ReadRegisterFromTouchModule>
 80005d0:	4603      	mov	r3, r0
 80005d2:	71bb      	strb	r3, [r7, #6]
	WriteDataToTouchModule(STMPE811_INT_EN, 0x00);
 80005d4:	2100      	movs	r1, #0
 80005d6:	200a      	movs	r0, #10
 80005d8:	f002 fbf7 	bl	8002dca <WriteDataToTouchModule>

	// Clear the interrupt bit in the STMPE811
	statusFlag = ReadRegisterFromTouchModule(STMPE811_INT_STA);
 80005dc:	200b      	movs	r0, #11
 80005de:	f002 fbe6 	bl	8002dae <ReadRegisterFromTouchModule>
 80005e2:	4603      	mov	r3, r0
 80005e4:	461a      	mov	r2, r3
 80005e6:	4b24      	ldr	r3, [pc, #144]	@ (8000678 <EXTI15_10_IRQHandler+0xdc>)
 80005e8:	701a      	strb	r2, [r3, #0]
	uint8_t clearIRQData = (statusFlag | TOUCH_DETECTED_IRQ_STATUS_BIT); // Write one to clear bit
 80005ea:	4b23      	ldr	r3, [pc, #140]	@ (8000678 <EXTI15_10_IRQHandler+0xdc>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	f043 0301 	orr.w	r3, r3, #1
 80005f2:	717b      	strb	r3, [r7, #5]
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 80005f4:	797b      	ldrb	r3, [r7, #5]
 80005f6:	4619      	mov	r1, r3
 80005f8:	200b      	movs	r0, #11
 80005fa:	f002 fbe6 	bl	8002dca <WriteDataToTouchModule>
	
	uint8_t ctrlReg = ReadRegisterFromTouchModule(STMPE811_TSC_CTRL);
 80005fe:	2040      	movs	r0, #64	@ 0x40
 8000600:	f002 fbd5 	bl	8002dae <ReadRegisterFromTouchModule>
 8000604:	4603      	mov	r3, r0
 8000606:	713b      	strb	r3, [r7, #4]
	if (ctrlReg & 0x80)
 8000608:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800060c:	2b00      	cmp	r3, #0
 800060e:	da01      	bge.n	8000614 <EXTI15_10_IRQHandler+0x78>
	{
		isTouchDetected = true;
 8000610:	2301      	movs	r3, #1
 8000612:	71fb      	strb	r3, [r7, #7]
	}

	// Determine if it is pressed or unpressed
	if(isTouchDetected) // Touch has been detected
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d00b      	beq.n	8000632 <EXTI15_10_IRQHandler+0x96>
//		// May need to do numerous retries?
//		DetermineTouchPosition(&StaticTouchData);
//		/* Touch valid */
//		printf("\nX: %03d\nY: %03d \n", StaticTouchData.x, StaticTouchData.y);
//		LCD_Clear(0, LCD_COLOR_RED);
		if(touchscreen_status == 0){
 800061a:	4b18      	ldr	r3, [pc, #96]	@ (800067c <EXTI15_10_IRQHandler+0xe0>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d107      	bne.n	8000632 <EXTI15_10_IRQHandler+0x96>
		addSchedulerEvent(GameScreen);
 8000622:	2010      	movs	r0, #16
 8000624:	f002 fbf0 	bl	8002e08 <addSchedulerEvent>
		touchscreen_status++;
 8000628:	4b14      	ldr	r3, [pc, #80]	@ (800067c <EXTI15_10_IRQHandler+0xe0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	3301      	adds	r3, #1
 800062e:	4a13      	ldr	r2, [pc, #76]	@ (800067c <EXTI15_10_IRQHandler+0xe0>)
 8000630:	6013      	str	r3, [r2, #0]
		/* Touch not pressed */
//		printf("\nNot pressed \n");
//		LCD_Clear(0, LCD_COLOR_GREEN);
	}

	STMPE811_Write(STMPE811_FIFO_STA, 0x01);
 8000632:	2101      	movs	r1, #1
 8000634:	204b      	movs	r0, #75	@ 0x4b
 8000636:	f003 fad5 	bl	8003be4 <STMPE811_Write>
	STMPE811_Write(STMPE811_FIFO_STA, 0x00);
 800063a:	2100      	movs	r1, #0
 800063c:	204b      	movs	r0, #75	@ 0x4b
 800063e:	f003 fad1 	bl	8003be4 <STMPE811_Write>

	// Re-enable IRQs
    WriteDataToTouchModule(STMPE811_INT_EN, currentIRQEnables);
 8000642:	79bb      	ldrb	r3, [r7, #6]
 8000644:	4619      	mov	r1, r3
 8000646:	200a      	movs	r0, #10
 8000648:	f002 fbbf 	bl	8002dca <WriteDataToTouchModule>
	HAL_EXTI_ClearPending(&LCDTouchIRQ, EXTI_TRIGGER_RISING_FALLING);
 800064c:	2103      	movs	r1, #3
 800064e:	480c      	ldr	r0, [pc, #48]	@ (8000680 <EXTI15_10_IRQHandler+0xe4>)
 8000650:	f003 fe6a 	bl	8004328 <HAL_EXTI_ClearPending>

	HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8000654:	2028      	movs	r0, #40	@ 0x28
 8000656:	f003 fe58 	bl	800430a <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800065a:	2028      	movs	r0, #40	@ 0x28
 800065c:	f003 fe2d 	bl	80042ba <HAL_NVIC_EnableIRQ>

	//Potential ERRATA? Clearing IRQ bit again due to an IRQ being triggered DURING the handling of this IRQ..
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000660:	797b      	ldrb	r3, [r7, #5]
 8000662:	4619      	mov	r1, r3
 8000664:	200b      	movs	r0, #11
 8000666:	f002 fbb0 	bl	8002dca <WriteDataToTouchModule>

}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000058 	.word	0x20000058
 8000678:	20000050 	.word	0x20000050
 800067c:	20000054 	.word	0x20000054
 8000680:	20000048 	.word	0x20000048

08000684 <newCurrBlock>:
		board[i][0] = Occupied;
		i++;
	}
}
struct currentBlock *currBlock;
void newCurrBlock(){
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	currBlock->BlockOne[1] = 5;
 8000688:	4b1e      	ldr	r3, [pc, #120]	@ (8000704 <newCurrBlock+0x80>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2205      	movs	r2, #5
 800068e:	605a      	str	r2, [r3, #4]
	currBlock->BlockOne[2] = 5;
 8000690:	4b1c      	ldr	r3, [pc, #112]	@ (8000704 <newCurrBlock+0x80>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2205      	movs	r2, #5
 8000696:	609a      	str	r2, [r3, #8]
	LCD_Draw_Box(110,100,20,LCD_COLOR_CYAN);
 8000698:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800069c:	2214      	movs	r2, #20
 800069e:	2164      	movs	r1, #100	@ 0x64
 80006a0:	206e      	movs	r0, #110	@ 0x6e
 80006a2:	f001 fe45 	bl	8002330 <LCD_Draw_Box>
	currBlock->BlockTwo[1] = 5;
 80006a6:	4b17      	ldr	r3, [pc, #92]	@ (8000704 <newCurrBlock+0x80>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2205      	movs	r2, #5
 80006ac:	60da      	str	r2, [r3, #12]
	currBlock->BlockTwo[2] = 4;
 80006ae:	4b15      	ldr	r3, [pc, #84]	@ (8000704 <newCurrBlock+0x80>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2204      	movs	r2, #4
 80006b4:	611a      	str	r2, [r3, #16]
	LCD_Draw_Box(110,80,20,LCD_COLOR_CYAN);
 80006b6:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80006ba:	2214      	movs	r2, #20
 80006bc:	2150      	movs	r1, #80	@ 0x50
 80006be:	206e      	movs	r0, #110	@ 0x6e
 80006c0:	f001 fe36 	bl	8002330 <LCD_Draw_Box>
	currBlock->BlockThree[1] = 5;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <newCurrBlock+0x80>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2205      	movs	r2, #5
 80006ca:	615a      	str	r2, [r3, #20]
	currBlock->BlockThree[2] = 3;
 80006cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000704 <newCurrBlock+0x80>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2203      	movs	r2, #3
 80006d2:	619a      	str	r2, [r3, #24]
	LCD_Draw_Box(110,60,20,LCD_COLOR_CYAN);
 80006d4:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80006d8:	2214      	movs	r2, #20
 80006da:	213c      	movs	r1, #60	@ 0x3c
 80006dc:	206e      	movs	r0, #110	@ 0x6e
 80006de:	f001 fe27 	bl	8002330 <LCD_Draw_Box>
	currBlock->BlockFour[1] = 5;
 80006e2:	4b08      	ldr	r3, [pc, #32]	@ (8000704 <newCurrBlock+0x80>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	2205      	movs	r2, #5
 80006e8:	61da      	str	r2, [r3, #28]
	currBlock->BlockFour[2] = 2;
 80006ea:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <newCurrBlock+0x80>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2202      	movs	r2, #2
 80006f0:	621a      	str	r2, [r3, #32]
	LCD_Draw_Box(110,40,20,LCD_COLOR_CYAN);
 80006f2:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80006f6:	2214      	movs	r2, #20
 80006f8:	2128      	movs	r1, #40	@ 0x28
 80006fa:	206e      	movs	r0, #110	@ 0x6e
 80006fc:	f001 fe18 	bl	8002330 <LCD_Draw_Box>
//		case smollPP:{
//			break;
//		}
//
//	}
}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	200000d4 	.word	0x200000d4

08000708 <currBlock_verifyDown>:

bool currBlock_verifyDown(void){
 8000708:	b4b0      	push	{r4, r5, r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
	int testVar[2];
	testVar[1] = currBlock->BlockOne[1];
 800070e:	4b7b      	ldr	r3, [pc, #492]	@ (80008fc <currBlock_verifyDown+0x1f4>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	607b      	str	r3, [r7, #4]
	testVar[2] = currBlock->BlockOne[2] + 1;
 8000716:	4b79      	ldr	r3, [pc, #484]	@ (80008fc <currBlock_verifyDown+0x1f4>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	3301      	adds	r3, #1
 800071e:	60bb      	str	r3, [r7, #8]
	if((board[testVar[1]][testVar[2]] != board[currBlock->BlockTwo[1]][currBlock->BlockTwo[2]]) & (board[testVar[1]][testVar[2]] != board[currBlock->BlockThree[1]][currBlock->BlockThree[2]]) & (board[testVar[1]][testVar[2]] != board[currBlock->BlockFour[1]][currBlock->BlockFour[2]])){
 8000720:	687a      	ldr	r2, [r7, #4]
 8000722:	68b9      	ldr	r1, [r7, #8]
 8000724:	4876      	ldr	r0, [pc, #472]	@ (8000900 <currBlock_verifyDown+0x1f8>)
 8000726:	4613      	mov	r3, r2
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	4413      	add	r3, r2
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	4413      	add	r3, r2
 8000730:	4403      	add	r3, r0
 8000732:	440b      	add	r3, r1
 8000734:	7819      	ldrb	r1, [r3, #0]
 8000736:	4b71      	ldr	r3, [pc, #452]	@ (80008fc <currBlock_verifyDown+0x1f4>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	68da      	ldr	r2, [r3, #12]
 800073c:	4b6f      	ldr	r3, [pc, #444]	@ (80008fc <currBlock_verifyDown+0x1f4>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	6918      	ldr	r0, [r3, #16]
 8000742:	4c6f      	ldr	r4, [pc, #444]	@ (8000900 <currBlock_verifyDown+0x1f8>)
 8000744:	4613      	mov	r3, r2
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	4413      	add	r3, r2
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	4413      	add	r3, r2
 800074e:	4423      	add	r3, r4
 8000750:	4403      	add	r3, r0
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	4299      	cmp	r1, r3
 8000756:	bf14      	ite	ne
 8000758:	2301      	movne	r3, #1
 800075a:	2300      	moveq	r3, #0
 800075c:	b2d9      	uxtb	r1, r3
 800075e:	687a      	ldr	r2, [r7, #4]
 8000760:	68b8      	ldr	r0, [r7, #8]
 8000762:	4c67      	ldr	r4, [pc, #412]	@ (8000900 <currBlock_verifyDown+0x1f8>)
 8000764:	4613      	mov	r3, r2
 8000766:	005b      	lsls	r3, r3, #1
 8000768:	4413      	add	r3, r2
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	4413      	add	r3, r2
 800076e:	4423      	add	r3, r4
 8000770:	4403      	add	r3, r0
 8000772:	7818      	ldrb	r0, [r3, #0]
 8000774:	4b61      	ldr	r3, [pc, #388]	@ (80008fc <currBlock_verifyDown+0x1f4>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	695a      	ldr	r2, [r3, #20]
 800077a:	4b60      	ldr	r3, [pc, #384]	@ (80008fc <currBlock_verifyDown+0x1f4>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	699c      	ldr	r4, [r3, #24]
 8000780:	4d5f      	ldr	r5, [pc, #380]	@ (8000900 <currBlock_verifyDown+0x1f8>)
 8000782:	4613      	mov	r3, r2
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	4413      	add	r3, r2
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	4413      	add	r3, r2
 800078c:	442b      	add	r3, r5
 800078e:	4423      	add	r3, r4
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	4298      	cmp	r0, r3
 8000794:	bf14      	ite	ne
 8000796:	2301      	movne	r3, #1
 8000798:	2300      	moveq	r3, #0
 800079a:	b2db      	uxtb	r3, r3
 800079c:	400b      	ands	r3, r1
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	461d      	mov	r5, r3
 80007a2:	687a      	ldr	r2, [r7, #4]
 80007a4:	68b9      	ldr	r1, [r7, #8]
 80007a6:	4856      	ldr	r0, [pc, #344]	@ (8000900 <currBlock_verifyDown+0x1f8>)
 80007a8:	4613      	mov	r3, r2
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	4413      	add	r3, r2
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	4413      	add	r3, r2
 80007b2:	4403      	add	r3, r0
 80007b4:	440b      	add	r3, r1
 80007b6:	7819      	ldrb	r1, [r3, #0]
 80007b8:	4b50      	ldr	r3, [pc, #320]	@ (80008fc <currBlock_verifyDown+0x1f4>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	69da      	ldr	r2, [r3, #28]
 80007be:	4b4f      	ldr	r3, [pc, #316]	@ (80008fc <currBlock_verifyDown+0x1f4>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	6a18      	ldr	r0, [r3, #32]
 80007c4:	4c4e      	ldr	r4, [pc, #312]	@ (8000900 <currBlock_verifyDown+0x1f8>)
 80007c6:	4613      	mov	r3, r2
 80007c8:	005b      	lsls	r3, r3, #1
 80007ca:	4413      	add	r3, r2
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	4413      	add	r3, r2
 80007d0:	4423      	add	r3, r4
 80007d2:	4403      	add	r3, r0
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	4299      	cmp	r1, r3
 80007d8:	bf14      	ite	ne
 80007da:	2301      	movne	r3, #1
 80007dc:	2300      	moveq	r3, #0
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	402b      	ands	r3, r5
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d00e      	beq.n	8000804 <currBlock_verifyDown+0xfc>
		if(board[testVar[1]][testVar[2]] != Free){
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	68b9      	ldr	r1, [r7, #8]
 80007ea:	4845      	ldr	r0, [pc, #276]	@ (8000900 <currBlock_verifyDown+0x1f8>)
 80007ec:	4613      	mov	r3, r2
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	4413      	add	r3, r2
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	4413      	add	r3, r2
 80007f6:	4403      	add	r3, r0
 80007f8:	440b      	add	r3, r1
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <currBlock_verifyDown+0xfc>
			return false;
 8000800:	2300      	movs	r3, #0
 8000802:	e176      	b.n	8000af2 <currBlock_verifyDown+0x3ea>
		}
	}
	testVar[1] = currBlock->BlockTwo[1];
 8000804:	4b3d      	ldr	r3, [pc, #244]	@ (80008fc <currBlock_verifyDown+0x1f4>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	68db      	ldr	r3, [r3, #12]
 800080a:	607b      	str	r3, [r7, #4]
	testVar[2] = currBlock->BlockTwo[2] + 1;
 800080c:	4b3b      	ldr	r3, [pc, #236]	@ (80008fc <currBlock_verifyDown+0x1f4>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	691b      	ldr	r3, [r3, #16]
 8000812:	3301      	adds	r3, #1
 8000814:	60bb      	str	r3, [r7, #8]
	if((board[testVar[1]][testVar[2]] != board[currBlock->BlockOne[1]][currBlock->BlockOne[2]]) & (board[testVar[1]][testVar[2]] != board[currBlock->BlockThree[1]][currBlock->BlockThree[2]]) & (board[testVar[1]][testVar[2]] != board[currBlock->BlockFour[1]][currBlock->BlockFour[2]])){
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	68b9      	ldr	r1, [r7, #8]
 800081a:	4839      	ldr	r0, [pc, #228]	@ (8000900 <currBlock_verifyDown+0x1f8>)
 800081c:	4613      	mov	r3, r2
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	4413      	add	r3, r2
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	4413      	add	r3, r2
 8000826:	4403      	add	r3, r0
 8000828:	440b      	add	r3, r1
 800082a:	7819      	ldrb	r1, [r3, #0]
 800082c:	4b33      	ldr	r3, [pc, #204]	@ (80008fc <currBlock_verifyDown+0x1f4>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	685a      	ldr	r2, [r3, #4]
 8000832:	4b32      	ldr	r3, [pc, #200]	@ (80008fc <currBlock_verifyDown+0x1f4>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	6898      	ldr	r0, [r3, #8]
 8000838:	4c31      	ldr	r4, [pc, #196]	@ (8000900 <currBlock_verifyDown+0x1f8>)
 800083a:	4613      	mov	r3, r2
 800083c:	005b      	lsls	r3, r3, #1
 800083e:	4413      	add	r3, r2
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	4413      	add	r3, r2
 8000844:	4423      	add	r3, r4
 8000846:	4403      	add	r3, r0
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	4299      	cmp	r1, r3
 800084c:	bf14      	ite	ne
 800084e:	2301      	movne	r3, #1
 8000850:	2300      	moveq	r3, #0
 8000852:	b2d9      	uxtb	r1, r3
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	68b8      	ldr	r0, [r7, #8]
 8000858:	4c29      	ldr	r4, [pc, #164]	@ (8000900 <currBlock_verifyDown+0x1f8>)
 800085a:	4613      	mov	r3, r2
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	4413      	add	r3, r2
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	4413      	add	r3, r2
 8000864:	4423      	add	r3, r4
 8000866:	4403      	add	r3, r0
 8000868:	7818      	ldrb	r0, [r3, #0]
 800086a:	4b24      	ldr	r3, [pc, #144]	@ (80008fc <currBlock_verifyDown+0x1f4>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	695a      	ldr	r2, [r3, #20]
 8000870:	4b22      	ldr	r3, [pc, #136]	@ (80008fc <currBlock_verifyDown+0x1f4>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	699c      	ldr	r4, [r3, #24]
 8000876:	4d22      	ldr	r5, [pc, #136]	@ (8000900 <currBlock_verifyDown+0x1f8>)
 8000878:	4613      	mov	r3, r2
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	4413      	add	r3, r2
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	4413      	add	r3, r2
 8000882:	442b      	add	r3, r5
 8000884:	4423      	add	r3, r4
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	4298      	cmp	r0, r3
 800088a:	bf14      	ite	ne
 800088c:	2301      	movne	r3, #1
 800088e:	2300      	moveq	r3, #0
 8000890:	b2db      	uxtb	r3, r3
 8000892:	400b      	ands	r3, r1
 8000894:	b2db      	uxtb	r3, r3
 8000896:	461d      	mov	r5, r3
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	68b9      	ldr	r1, [r7, #8]
 800089c:	4818      	ldr	r0, [pc, #96]	@ (8000900 <currBlock_verifyDown+0x1f8>)
 800089e:	4613      	mov	r3, r2
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	4413      	add	r3, r2
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	4413      	add	r3, r2
 80008a8:	4403      	add	r3, r0
 80008aa:	440b      	add	r3, r1
 80008ac:	7819      	ldrb	r1, [r3, #0]
 80008ae:	4b13      	ldr	r3, [pc, #76]	@ (80008fc <currBlock_verifyDown+0x1f4>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	69da      	ldr	r2, [r3, #28]
 80008b4:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <currBlock_verifyDown+0x1f4>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	6a18      	ldr	r0, [r3, #32]
 80008ba:	4c11      	ldr	r4, [pc, #68]	@ (8000900 <currBlock_verifyDown+0x1f8>)
 80008bc:	4613      	mov	r3, r2
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	4413      	add	r3, r2
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	4413      	add	r3, r2
 80008c6:	4423      	add	r3, r4
 80008c8:	4403      	add	r3, r0
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	4299      	cmp	r1, r3
 80008ce:	bf14      	ite	ne
 80008d0:	2301      	movne	r3, #1
 80008d2:	2300      	moveq	r3, #0
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	402b      	ands	r3, r5
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d013      	beq.n	8000904 <currBlock_verifyDown+0x1fc>
		if(board[testVar[1]][testVar[2]] != Free){
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	68b9      	ldr	r1, [r7, #8]
 80008e0:	4807      	ldr	r0, [pc, #28]	@ (8000900 <currBlock_verifyDown+0x1f8>)
 80008e2:	4613      	mov	r3, r2
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	4413      	add	r3, r2
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	4413      	add	r3, r2
 80008ec:	4403      	add	r3, r0
 80008ee:	440b      	add	r3, r1
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d006      	beq.n	8000904 <currBlock_verifyDown+0x1fc>
			return false;
 80008f6:	2300      	movs	r3, #0
 80008f8:	e0fb      	b.n	8000af2 <currBlock_verifyDown+0x3ea>
 80008fa:	bf00      	nop
 80008fc:	200000d4 	.word	0x200000d4
 8000900:	2000005c 	.word	0x2000005c
		}
	}

	testVar[1] = currBlock->BlockThree[1];
 8000904:	4b7d      	ldr	r3, [pc, #500]	@ (8000afc <currBlock_verifyDown+0x3f4>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	695b      	ldr	r3, [r3, #20]
 800090a:	607b      	str	r3, [r7, #4]
	testVar[2] = currBlock->BlockThree[2] + 1;
 800090c:	4b7b      	ldr	r3, [pc, #492]	@ (8000afc <currBlock_verifyDown+0x3f4>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	3301      	adds	r3, #1
 8000914:	60bb      	str	r3, [r7, #8]
	if((board[testVar[1]][testVar[2]] != board[currBlock->BlockTwo[1]][currBlock->BlockTwo[2]]) & (board[testVar[1]][testVar[2]] != board[currBlock->BlockOne[1]][currBlock->BlockOne[2]]) & (board[testVar[1]][testVar[2]] != board[currBlock->BlockFour[1]][currBlock->BlockFour[2]])){
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	68b9      	ldr	r1, [r7, #8]
 800091a:	4879      	ldr	r0, [pc, #484]	@ (8000b00 <currBlock_verifyDown+0x3f8>)
 800091c:	4613      	mov	r3, r2
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	4413      	add	r3, r2
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	4413      	add	r3, r2
 8000926:	4403      	add	r3, r0
 8000928:	440b      	add	r3, r1
 800092a:	7819      	ldrb	r1, [r3, #0]
 800092c:	4b73      	ldr	r3, [pc, #460]	@ (8000afc <currBlock_verifyDown+0x3f4>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	68da      	ldr	r2, [r3, #12]
 8000932:	4b72      	ldr	r3, [pc, #456]	@ (8000afc <currBlock_verifyDown+0x3f4>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	6918      	ldr	r0, [r3, #16]
 8000938:	4c71      	ldr	r4, [pc, #452]	@ (8000b00 <currBlock_verifyDown+0x3f8>)
 800093a:	4613      	mov	r3, r2
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	4413      	add	r3, r2
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	4413      	add	r3, r2
 8000944:	4423      	add	r3, r4
 8000946:	4403      	add	r3, r0
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	4299      	cmp	r1, r3
 800094c:	bf14      	ite	ne
 800094e:	2301      	movne	r3, #1
 8000950:	2300      	moveq	r3, #0
 8000952:	b2d9      	uxtb	r1, r3
 8000954:	687a      	ldr	r2, [r7, #4]
 8000956:	68b8      	ldr	r0, [r7, #8]
 8000958:	4c69      	ldr	r4, [pc, #420]	@ (8000b00 <currBlock_verifyDown+0x3f8>)
 800095a:	4613      	mov	r3, r2
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	4413      	add	r3, r2
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	4413      	add	r3, r2
 8000964:	4423      	add	r3, r4
 8000966:	4403      	add	r3, r0
 8000968:	7818      	ldrb	r0, [r3, #0]
 800096a:	4b64      	ldr	r3, [pc, #400]	@ (8000afc <currBlock_verifyDown+0x3f4>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	685a      	ldr	r2, [r3, #4]
 8000970:	4b62      	ldr	r3, [pc, #392]	@ (8000afc <currBlock_verifyDown+0x3f4>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	689c      	ldr	r4, [r3, #8]
 8000976:	4d62      	ldr	r5, [pc, #392]	@ (8000b00 <currBlock_verifyDown+0x3f8>)
 8000978:	4613      	mov	r3, r2
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	4413      	add	r3, r2
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	4413      	add	r3, r2
 8000982:	442b      	add	r3, r5
 8000984:	4423      	add	r3, r4
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	4298      	cmp	r0, r3
 800098a:	bf14      	ite	ne
 800098c:	2301      	movne	r3, #1
 800098e:	2300      	moveq	r3, #0
 8000990:	b2db      	uxtb	r3, r3
 8000992:	400b      	ands	r3, r1
 8000994:	b2db      	uxtb	r3, r3
 8000996:	461d      	mov	r5, r3
 8000998:	687a      	ldr	r2, [r7, #4]
 800099a:	68b9      	ldr	r1, [r7, #8]
 800099c:	4858      	ldr	r0, [pc, #352]	@ (8000b00 <currBlock_verifyDown+0x3f8>)
 800099e:	4613      	mov	r3, r2
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	4413      	add	r3, r2
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	4413      	add	r3, r2
 80009a8:	4403      	add	r3, r0
 80009aa:	440b      	add	r3, r1
 80009ac:	7819      	ldrb	r1, [r3, #0]
 80009ae:	4b53      	ldr	r3, [pc, #332]	@ (8000afc <currBlock_verifyDown+0x3f4>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	69da      	ldr	r2, [r3, #28]
 80009b4:	4b51      	ldr	r3, [pc, #324]	@ (8000afc <currBlock_verifyDown+0x3f4>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	6a18      	ldr	r0, [r3, #32]
 80009ba:	4c51      	ldr	r4, [pc, #324]	@ (8000b00 <currBlock_verifyDown+0x3f8>)
 80009bc:	4613      	mov	r3, r2
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	4413      	add	r3, r2
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	4413      	add	r3, r2
 80009c6:	4423      	add	r3, r4
 80009c8:	4403      	add	r3, r0
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	4299      	cmp	r1, r3
 80009ce:	bf14      	ite	ne
 80009d0:	2301      	movne	r3, #1
 80009d2:	2300      	moveq	r3, #0
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	402b      	ands	r3, r5
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d00e      	beq.n	80009fa <currBlock_verifyDown+0x2f2>
		if(board[testVar[1]][testVar[2]] != Free){
 80009dc:	687a      	ldr	r2, [r7, #4]
 80009de:	68b9      	ldr	r1, [r7, #8]
 80009e0:	4847      	ldr	r0, [pc, #284]	@ (8000b00 <currBlock_verifyDown+0x3f8>)
 80009e2:	4613      	mov	r3, r2
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	4413      	add	r3, r2
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	4413      	add	r3, r2
 80009ec:	4403      	add	r3, r0
 80009ee:	440b      	add	r3, r1
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <currBlock_verifyDown+0x2f2>
			return false;
 80009f6:	2300      	movs	r3, #0
 80009f8:	e07b      	b.n	8000af2 <currBlock_verifyDown+0x3ea>
		}
	}
	testVar[1] = currBlock->BlockFour[1];
 80009fa:	4b40      	ldr	r3, [pc, #256]	@ (8000afc <currBlock_verifyDown+0x3f4>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	69db      	ldr	r3, [r3, #28]
 8000a00:	607b      	str	r3, [r7, #4]
	testVar[2] = currBlock->BlockFour[2] + 1;
 8000a02:	4b3e      	ldr	r3, [pc, #248]	@ (8000afc <currBlock_verifyDown+0x3f4>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	6a1b      	ldr	r3, [r3, #32]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	60bb      	str	r3, [r7, #8]
	if((board[testVar[1]][testVar[2]] != board[currBlock->BlockTwo[1]][currBlock->BlockTwo[2]]) & (board[testVar[1]][testVar[2]] != board[currBlock->BlockThree[1]][currBlock->BlockThree[2]]) & (board[testVar[1]][testVar[2]] != board[currBlock->BlockOne[1]][currBlock->BlockOne[2]])){
 8000a0c:	687a      	ldr	r2, [r7, #4]
 8000a0e:	68b9      	ldr	r1, [r7, #8]
 8000a10:	483b      	ldr	r0, [pc, #236]	@ (8000b00 <currBlock_verifyDown+0x3f8>)
 8000a12:	4613      	mov	r3, r2
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	4413      	add	r3, r2
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	4413      	add	r3, r2
 8000a1c:	4403      	add	r3, r0
 8000a1e:	440b      	add	r3, r1
 8000a20:	7819      	ldrb	r1, [r3, #0]
 8000a22:	4b36      	ldr	r3, [pc, #216]	@ (8000afc <currBlock_verifyDown+0x3f4>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	68da      	ldr	r2, [r3, #12]
 8000a28:	4b34      	ldr	r3, [pc, #208]	@ (8000afc <currBlock_verifyDown+0x3f4>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	6918      	ldr	r0, [r3, #16]
 8000a2e:	4c34      	ldr	r4, [pc, #208]	@ (8000b00 <currBlock_verifyDown+0x3f8>)
 8000a30:	4613      	mov	r3, r2
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	4413      	add	r3, r2
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	4413      	add	r3, r2
 8000a3a:	4423      	add	r3, r4
 8000a3c:	4403      	add	r3, r0
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	4299      	cmp	r1, r3
 8000a42:	bf14      	ite	ne
 8000a44:	2301      	movne	r3, #1
 8000a46:	2300      	moveq	r3, #0
 8000a48:	b2d9      	uxtb	r1, r3
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	68b8      	ldr	r0, [r7, #8]
 8000a4e:	4c2c      	ldr	r4, [pc, #176]	@ (8000b00 <currBlock_verifyDown+0x3f8>)
 8000a50:	4613      	mov	r3, r2
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	4413      	add	r3, r2
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	4413      	add	r3, r2
 8000a5a:	4423      	add	r3, r4
 8000a5c:	4403      	add	r3, r0
 8000a5e:	7818      	ldrb	r0, [r3, #0]
 8000a60:	4b26      	ldr	r3, [pc, #152]	@ (8000afc <currBlock_verifyDown+0x3f4>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	695a      	ldr	r2, [r3, #20]
 8000a66:	4b25      	ldr	r3, [pc, #148]	@ (8000afc <currBlock_verifyDown+0x3f4>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	699c      	ldr	r4, [r3, #24]
 8000a6c:	4d24      	ldr	r5, [pc, #144]	@ (8000b00 <currBlock_verifyDown+0x3f8>)
 8000a6e:	4613      	mov	r3, r2
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	4413      	add	r3, r2
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	4413      	add	r3, r2
 8000a78:	442b      	add	r3, r5
 8000a7a:	4423      	add	r3, r4
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	4298      	cmp	r0, r3
 8000a80:	bf14      	ite	ne
 8000a82:	2301      	movne	r3, #1
 8000a84:	2300      	moveq	r3, #0
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	400b      	ands	r3, r1
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	461d      	mov	r5, r3
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	68b9      	ldr	r1, [r7, #8]
 8000a92:	481b      	ldr	r0, [pc, #108]	@ (8000b00 <currBlock_verifyDown+0x3f8>)
 8000a94:	4613      	mov	r3, r2
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	4413      	add	r3, r2
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	4413      	add	r3, r2
 8000a9e:	4403      	add	r3, r0
 8000aa0:	440b      	add	r3, r1
 8000aa2:	7819      	ldrb	r1, [r3, #0]
 8000aa4:	4b15      	ldr	r3, [pc, #84]	@ (8000afc <currBlock_verifyDown+0x3f4>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	685a      	ldr	r2, [r3, #4]
 8000aaa:	4b14      	ldr	r3, [pc, #80]	@ (8000afc <currBlock_verifyDown+0x3f4>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	6898      	ldr	r0, [r3, #8]
 8000ab0:	4c13      	ldr	r4, [pc, #76]	@ (8000b00 <currBlock_verifyDown+0x3f8>)
 8000ab2:	4613      	mov	r3, r2
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	4413      	add	r3, r2
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	4413      	add	r3, r2
 8000abc:	4423      	add	r3, r4
 8000abe:	4403      	add	r3, r0
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	4299      	cmp	r1, r3
 8000ac4:	bf14      	ite	ne
 8000ac6:	2301      	movne	r3, #1
 8000ac8:	2300      	moveq	r3, #0
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	402b      	ands	r3, r5
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d00e      	beq.n	8000af0 <currBlock_verifyDown+0x3e8>
		if(board[testVar[1]][testVar[2]] != Free){
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	68b9      	ldr	r1, [r7, #8]
 8000ad6:	480a      	ldr	r0, [pc, #40]	@ (8000b00 <currBlock_verifyDown+0x3f8>)
 8000ad8:	4613      	mov	r3, r2
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	4413      	add	r3, r2
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	4413      	add	r3, r2
 8000ae2:	4403      	add	r3, r0
 8000ae4:	440b      	add	r3, r1
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <currBlock_verifyDown+0x3e8>
			return false;
 8000aec:	2300      	movs	r3, #0
 8000aee:	e000      	b.n	8000af2 <currBlock_verifyDown+0x3ea>
		}
	}
	return true;
 8000af0:	2301      	movs	r3, #1
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bcb0      	pop	{r4, r5, r7}
 8000afa:	4770      	bx	lr
 8000afc:	200000d4 	.word	0x200000d4
 8000b00:	2000005c 	.word	0x2000005c

08000b04 <currBlock_Down>:
void currBlock_Down(void){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
	if(currBlock_verifyDown()){
 8000b0a:	f7ff fdfd 	bl	8000708 <currBlock_verifyDown>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d043      	beq.n	8000b9c <currBlock_Down+0x98>
		int testVar[2];
		testVar[1] = currBlock->BlockOne[1];
 8000b14:	4b23      	ldr	r3, [pc, #140]	@ (8000ba4 <currBlock_Down+0xa0>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	607b      	str	r3, [r7, #4]
		testVar[2] = currBlock->BlockOne[2] + 1;
 8000b1c:	4b21      	ldr	r3, [pc, #132]	@ (8000ba4 <currBlock_Down+0xa0>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	3301      	adds	r3, #1
 8000b24:	60bb      	str	r3, [r7, #8]
		currBlock->BlockOne[1] = testVar[1];
 8000b26:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba4 <currBlock_Down+0xa0>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	605a      	str	r2, [r3, #4]
		currBlock->BlockOne[2] = testVar[2];
 8000b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba4 <currBlock_Down+0xa0>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	609a      	str	r2, [r3, #8]

		testVar[1] = currBlock->BlockTwo[1];
 8000b36:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba4 <currBlock_Down+0xa0>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	607b      	str	r3, [r7, #4]
		testVar[2] = currBlock->BlockTwo[2] + 1;
 8000b3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ba4 <currBlock_Down+0xa0>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	691b      	ldr	r3, [r3, #16]
 8000b44:	3301      	adds	r3, #1
 8000b46:	60bb      	str	r3, [r7, #8]
		currBlock->BlockTwo[1] = testVar[1];
 8000b48:	4b16      	ldr	r3, [pc, #88]	@ (8000ba4 <currBlock_Down+0xa0>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	60da      	str	r2, [r3, #12]
		currBlock->BlockTwo[2] = testVar[2];
 8000b50:	4b14      	ldr	r3, [pc, #80]	@ (8000ba4 <currBlock_Down+0xa0>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	68ba      	ldr	r2, [r7, #8]
 8000b56:	611a      	str	r2, [r3, #16]

		testVar[1] = currBlock->BlockThree[1];
 8000b58:	4b12      	ldr	r3, [pc, #72]	@ (8000ba4 <currBlock_Down+0xa0>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	695b      	ldr	r3, [r3, #20]
 8000b5e:	607b      	str	r3, [r7, #4]
		testVar[2] = currBlock->BlockThree[2] + 1;
 8000b60:	4b10      	ldr	r3, [pc, #64]	@ (8000ba4 <currBlock_Down+0xa0>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	699b      	ldr	r3, [r3, #24]
 8000b66:	3301      	adds	r3, #1
 8000b68:	60bb      	str	r3, [r7, #8]
		currBlock->BlockThree[1] = testVar[1];
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba4 <currBlock_Down+0xa0>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	615a      	str	r2, [r3, #20]
		currBlock->BlockThree[2] = testVar[2];
 8000b72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba4 <currBlock_Down+0xa0>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	68ba      	ldr	r2, [r7, #8]
 8000b78:	619a      	str	r2, [r3, #24]

		testVar[1] = currBlock->BlockFour[1];
 8000b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba4 <currBlock_Down+0xa0>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	69db      	ldr	r3, [r3, #28]
 8000b80:	607b      	str	r3, [r7, #4]
		testVar[2] = currBlock->BlockFour[2] + 1;
 8000b82:	4b08      	ldr	r3, [pc, #32]	@ (8000ba4 <currBlock_Down+0xa0>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	6a1b      	ldr	r3, [r3, #32]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	60bb      	str	r3, [r7, #8]
		currBlock->BlockFour[1] = testVar[1];
 8000b8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ba4 <currBlock_Down+0xa0>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	61da      	str	r2, [r3, #28]
		currBlock->BlockFour[2] = testVar[2];
 8000b94:	4b03      	ldr	r3, [pc, #12]	@ (8000ba4 <currBlock_Down+0xa0>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	68ba      	ldr	r2, [r7, #8]
 8000b9a:	621a      	str	r2, [r3, #32]
	}

}
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	200000d4 	.word	0x200000d4

08000ba8 <currBlock_Rotate>:
void currBlock_Rotate(void){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
	if(currBlock_verifyRotate()){
 8000bae:	f000 fc5f 	bl	8001470 <currBlock_verifyRotate>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	f000 8454 	beq.w	8001462 <currBlock_Rotate+0x8ba>
		int testVar[2];
		switch(currBlock->type){
 8000bba:	4b7e      	ldr	r3, [pc, #504]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bc2:	2b06      	cmp	r3, #6
 8000bc4:	f200 844d 	bhi.w	8001462 <currBlock_Rotate+0x8ba>
 8000bc8:	a201      	add	r2, pc, #4	@ (adr r2, 8000bd0 <currBlock_Rotate+0x28>)
 8000bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bce:	bf00      	nop
 8000bd0:	08000bed 	.word	0x08000bed
 8000bd4:	0800145d 	.word	0x0800145d
 8000bd8:	08000cf1 	.word	0x08000cf1
 8000bdc:	08000da3 	.word	0x08000da3
 8000be0:	08000e59 	.word	0x08000e59
 8000be4:	0800105d 	.word	0x0800105d
 8000be8:	08001263 	.word	0x08001263
		case line:
			switch(currBlock->state){// one block doest move
 8000bec:	4b71      	ldr	r3, [pc, #452]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d002      	beq.n	8000bfe <currBlock_Rotate+0x56>
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d03c      	beq.n	8000c76 <currBlock_Rotate+0xce>
				currBlock->BlockThree[2] = testVar[2];

				currBlock->state = state1;
				break;
			default:
				break;
 8000bfc:	e077      	b.n	8000cee <currBlock_Rotate+0x146>
				testVar[1] = currBlock->BlockOne[1] + 3;
 8000bfe:	4b6d      	ldr	r3, [pc, #436]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	3303      	adds	r3, #3
 8000c06:	607b      	str	r3, [r7, #4]
				testVar[2] = currBlock->BlockOne[2] - 3;
 8000c08:	4b6a      	ldr	r3, [pc, #424]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	3b03      	subs	r3, #3
 8000c10:	60bb      	str	r3, [r7, #8]
				currBlock->BlockOne[1] = testVar[1];
 8000c12:	4b68      	ldr	r3, [pc, #416]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	605a      	str	r2, [r3, #4]
				currBlock->BlockOne[2] = testVar[2];
 8000c1a:	4b66      	ldr	r3, [pc, #408]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	68ba      	ldr	r2, [r7, #8]
 8000c20:	609a      	str	r2, [r3, #8]
				testVar[1] = currBlock->BlockTwo[1] + 2;
 8000c22:	4b64      	ldr	r3, [pc, #400]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	3302      	adds	r3, #2
 8000c2a:	607b      	str	r3, [r7, #4]
				testVar[2] = currBlock->BlockTwo[2] - 2;
 8000c2c:	4b61      	ldr	r3, [pc, #388]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	691b      	ldr	r3, [r3, #16]
 8000c32:	3b02      	subs	r3, #2
 8000c34:	60bb      	str	r3, [r7, #8]
				currBlock->BlockTwo[1] = testVar[1];
 8000c36:	4b5f      	ldr	r3, [pc, #380]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	60da      	str	r2, [r3, #12]
				currBlock->BlockTwo[2] = testVar[2];
 8000c3e:	4b5d      	ldr	r3, [pc, #372]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	68ba      	ldr	r2, [r7, #8]
 8000c44:	611a      	str	r2, [r3, #16]
				testVar[1] = currBlock->BlockThree[1] + 1;
 8000c46:	4b5b      	ldr	r3, [pc, #364]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	695b      	ldr	r3, [r3, #20]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	607b      	str	r3, [r7, #4]
				testVar[2] = currBlock->BlockThree[2] - 1;
 8000c50:	4b58      	ldr	r3, [pc, #352]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	699b      	ldr	r3, [r3, #24]
 8000c56:	3b01      	subs	r3, #1
 8000c58:	60bb      	str	r3, [r7, #8]
				currBlock->BlockThree[1] = testVar[1];
 8000c5a:	4b56      	ldr	r3, [pc, #344]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	615a      	str	r2, [r3, #20]
				currBlock->BlockThree[2] = testVar[2];
 8000c62:	4b54      	ldr	r3, [pc, #336]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	619a      	str	r2, [r3, #24]
				currBlock->state = state2;
 8000c6a:	4b52      	ldr	r3, [pc, #328]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2201      	movs	r2, #1
 8000c70:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
				break;
 8000c74:	e03b      	b.n	8000cee <currBlock_Rotate+0x146>
				testVar[1] = currBlock->BlockOne[1] - 3;
 8000c76:	4b4f      	ldr	r3, [pc, #316]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	3b03      	subs	r3, #3
 8000c7e:	607b      	str	r3, [r7, #4]
				testVar[2] = currBlock->BlockOne[2] + 3;
 8000c80:	4b4c      	ldr	r3, [pc, #304]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	3303      	adds	r3, #3
 8000c88:	60bb      	str	r3, [r7, #8]
				currBlock->BlockOne[1] = testVar[1];
 8000c8a:	4b4a      	ldr	r3, [pc, #296]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	605a      	str	r2, [r3, #4]
				currBlock->BlockOne[2] = testVar[2];
 8000c92:	4b48      	ldr	r3, [pc, #288]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	68ba      	ldr	r2, [r7, #8]
 8000c98:	609a      	str	r2, [r3, #8]
				testVar[1] = currBlock->BlockTwo[1] - 2;
 8000c9a:	4b46      	ldr	r3, [pc, #280]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	3b02      	subs	r3, #2
 8000ca2:	607b      	str	r3, [r7, #4]
				testVar[2] = currBlock->BlockTwo[2] + 2;
 8000ca4:	4b43      	ldr	r3, [pc, #268]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	691b      	ldr	r3, [r3, #16]
 8000caa:	3302      	adds	r3, #2
 8000cac:	60bb      	str	r3, [r7, #8]
				currBlock->BlockTwo[1] = testVar[1];
 8000cae:	4b41      	ldr	r3, [pc, #260]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	60da      	str	r2, [r3, #12]
				currBlock->BlockTwo[2] = testVar[2];
 8000cb6:	4b3f      	ldr	r3, [pc, #252]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	68ba      	ldr	r2, [r7, #8]
 8000cbc:	611a      	str	r2, [r3, #16]
				testVar[1] = currBlock->BlockThree[1] - 1;
 8000cbe:	4b3d      	ldr	r3, [pc, #244]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	695b      	ldr	r3, [r3, #20]
 8000cc4:	3b01      	subs	r3, #1
 8000cc6:	607b      	str	r3, [r7, #4]
				testVar[2] = currBlock->BlockThree[2] + 1;
 8000cc8:	4b3a      	ldr	r3, [pc, #232]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	60bb      	str	r3, [r7, #8]
				currBlock->BlockThree[1] = testVar[1];
 8000cd2:	4b38      	ldr	r3, [pc, #224]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	615a      	str	r2, [r3, #20]
				currBlock->BlockThree[2] = testVar[2];
 8000cda:	4b36      	ldr	r3, [pc, #216]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	68ba      	ldr	r2, [r7, #8]
 8000ce0:	619a      	str	r2, [r3, #24]
				currBlock->state = state1;
 8000ce2:	4b34      	ldr	r3, [pc, #208]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
				break;
 8000cec:	bf00      	nop
			}

			case Square:{
				break;
 8000cee:	e3b5      	b.n	800145c <currBlock_Rotate+0x8b4>
			}
			case LeftZigZag:{
				switch(currBlock->state){// only two rotations
 8000cf0:	4b30      	ldr	r3, [pc, #192]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d002      	beq.n	8000d02 <currBlock_Rotate+0x15a>
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d028      	beq.n	8000d52 <currBlock_Rotate+0x1aa>
					currBlock->BlockTwo[2] = testVar[2];

					currBlock->state = state1;
					break;
				default:
					break;
 8000d00:	e04f      	b.n	8000da2 <currBlock_Rotate+0x1fa>
					testVar[1] = currBlock->BlockOne[1];
 8000d02:	4b2c      	ldr	r3, [pc, #176]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockOne[2] - 2;
 8000d0a:	4b2a      	ldr	r3, [pc, #168]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	3b02      	subs	r3, #2
 8000d12:	60bb      	str	r3, [r7, #8]
					currBlock->BlockOne[1] = testVar[1];
 8000d14:	4b27      	ldr	r3, [pc, #156]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	605a      	str	r2, [r3, #4]
					currBlock->BlockOne[2] = testVar[2];
 8000d1c:	4b25      	ldr	r3, [pc, #148]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	68ba      	ldr	r2, [r7, #8]
 8000d22:	609a      	str	r2, [r3, #8]
					testVar[1] = currBlock->BlockTwo[1] - 2;
 8000d24:	4b23      	ldr	r3, [pc, #140]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	3b02      	subs	r3, #2
 8000d2c:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockTwo[2];
 8000d2e:	4b21      	ldr	r3, [pc, #132]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	691b      	ldr	r3, [r3, #16]
 8000d34:	60bb      	str	r3, [r7, #8]
					currBlock->BlockTwo[1] = testVar[1];
 8000d36:	4b1f      	ldr	r3, [pc, #124]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	60da      	str	r2, [r3, #12]
					currBlock->BlockTwo[2] = testVar[2];
 8000d3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	68ba      	ldr	r2, [r7, #8]
 8000d44:	611a      	str	r2, [r3, #16]
					currBlock->state = state2;
 8000d46:	4b1b      	ldr	r3, [pc, #108]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
					break;
 8000d50:	e027      	b.n	8000da2 <currBlock_Rotate+0x1fa>
					testVar[1] = currBlock->BlockOne[1];
 8000d52:	4b18      	ldr	r3, [pc, #96]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockOne[2] + 2;
 8000d5a:	4b16      	ldr	r3, [pc, #88]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	3302      	adds	r3, #2
 8000d62:	60bb      	str	r3, [r7, #8]
					currBlock->BlockOne[1] = testVar[1];
 8000d64:	4b13      	ldr	r3, [pc, #76]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	605a      	str	r2, [r3, #4]
					currBlock->BlockOne[2] = testVar[2];
 8000d6c:	4b11      	ldr	r3, [pc, #68]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	68ba      	ldr	r2, [r7, #8]
 8000d72:	609a      	str	r2, [r3, #8]
					testVar[1] = currBlock->BlockTwo[1] + 2;
 8000d74:	4b0f      	ldr	r3, [pc, #60]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	3302      	adds	r3, #2
 8000d7c:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockTwo[2];
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	691b      	ldr	r3, [r3, #16]
 8000d84:	60bb      	str	r3, [r7, #8]
					currBlock->BlockTwo[1] = testVar[1];
 8000d86:	4b0b      	ldr	r3, [pc, #44]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	60da      	str	r2, [r3, #12]
					currBlock->BlockTwo[2] = testVar[2];
 8000d8e:	4b09      	ldr	r3, [pc, #36]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	611a      	str	r2, [r3, #16]
					currBlock->state = state1;
 8000d96:	4b07      	ldr	r3, [pc, #28]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
					break;
 8000da0:	bf00      	nop
				}
			}
			case RightZigZag:{
				switch(currBlock->state){//only two rotations
 8000da2:	4b04      	ldr	r3, [pc, #16]	@ (8000db4 <currBlock_Rotate+0x20c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d004      	beq.n	8000db8 <currBlock_Rotate+0x210>
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d02a      	beq.n	8000e08 <currBlock_Rotate+0x260>
					currBlock->BlockTwo[2] = testVar[2];

					currBlock->state = state1;
					break;
				default:
					break;
 8000db2:	e051      	b.n	8000e58 <currBlock_Rotate+0x2b0>
 8000db4:	200000d4 	.word	0x200000d4
					testVar[1] = currBlock->BlockOne[1] - 2;// rightmost most block top to top left
 8000db8:	4b89      	ldr	r3, [pc, #548]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockOne[2];
 8000dc2:	4b87      	ldr	r3, [pc, #540]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	60bb      	str	r3, [r7, #8]
					currBlock->BlockOne[1] = testVar[1];
 8000dca:	4b85      	ldr	r3, [pc, #532]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	605a      	str	r2, [r3, #4]
					currBlock->BlockOne[2] = testVar[2];
 8000dd2:	4b83      	ldr	r3, [pc, #524]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	68ba      	ldr	r2, [r7, #8]
 8000dd8:	609a      	str	r2, [r3, #8]
					testVar[1] = currBlock->BlockTwo[1];// top middle to bottom middle
 8000dda:	4b81      	ldr	r3, [pc, #516]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockTwo[2] - 2;
 8000de2:	4b7f      	ldr	r3, [pc, #508]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	691b      	ldr	r3, [r3, #16]
 8000de8:	3b02      	subs	r3, #2
 8000dea:	60bb      	str	r3, [r7, #8]
					currBlock->BlockTwo[1] = testVar[1];
 8000dec:	4b7c      	ldr	r3, [pc, #496]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	60da      	str	r2, [r3, #12]
					currBlock->BlockTwo[2] = testVar[2];
 8000df4:	4b7a      	ldr	r3, [pc, #488]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	68ba      	ldr	r2, [r7, #8]
 8000dfa:	611a      	str	r2, [r3, #16]
					currBlock->state = state2;
 8000dfc:	4b78      	ldr	r3, [pc, #480]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2201      	movs	r2, #1
 8000e02:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
					break;
 8000e06:	e027      	b.n	8000e58 <currBlock_Rotate+0x2b0>
					testVar[1] = currBlock->BlockOne[1] + 2;// rightmost most block top to top left inverse
 8000e08:	4b75      	ldr	r3, [pc, #468]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	3302      	adds	r3, #2
 8000e10:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockOne[2];
 8000e12:	4b73      	ldr	r3, [pc, #460]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	60bb      	str	r3, [r7, #8]
					currBlock->BlockOne[1] = testVar[1];
 8000e1a:	4b71      	ldr	r3, [pc, #452]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	605a      	str	r2, [r3, #4]
					currBlock->BlockOne[2] = testVar[2];
 8000e22:	4b6f      	ldr	r3, [pc, #444]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	609a      	str	r2, [r3, #8]
					testVar[1] = currBlock->BlockTwo[1];// top middle to bottom middle inverse
 8000e2a:	4b6d      	ldr	r3, [pc, #436]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockTwo[2] + 2;
 8000e32:	4b6b      	ldr	r3, [pc, #428]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	691b      	ldr	r3, [r3, #16]
 8000e38:	3302      	adds	r3, #2
 8000e3a:	60bb      	str	r3, [r7, #8]
					currBlock->BlockTwo[1] = testVar[1];
 8000e3c:	4b68      	ldr	r3, [pc, #416]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	60da      	str	r2, [r3, #12]
					currBlock->BlockTwo[2] = testVar[2];
 8000e44:	4b66      	ldr	r3, [pc, #408]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	68ba      	ldr	r2, [r7, #8]
 8000e4a:	611a      	str	r2, [r3, #16]
					currBlock->state = state1;
 8000e4c:	4b64      	ldr	r3, [pc, #400]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2200      	movs	r2, #0
 8000e52:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
					break;
 8000e56:	bf00      	nop
				}
			}
			case RightL:{
				switch(currBlock->state){// 4 rotations
 8000e58:	4b61      	ldr	r3, [pc, #388]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e60:	2b03      	cmp	r3, #3
 8000e62:	f200 80fa 	bhi.w	800105a <currBlock_Rotate+0x4b2>
 8000e66:	a201      	add	r2, pc, #4	@ (adr r2, 8000e6c <currBlock_Rotate+0x2c4>)
 8000e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e6c:	08000e7d 	.word	0x08000e7d
 8000e70:	08000ef3 	.word	0x08000ef3
 8000e74:	08000f69 	.word	0x08000f69
 8000e78:	08000fe5 	.word	0x08000fe5
				case state1:
					testVar[1] = currBlock->BlockOne[1] - 1;//  mid right to mid bottom
 8000e7c:	4b58      	ldr	r3, [pc, #352]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockOne[2] - 1;
 8000e86:	4b56      	ldr	r3, [pc, #344]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	60bb      	str	r3, [r7, #8]
					currBlock->BlockOne[1] = testVar[1];
 8000e90:	4b53      	ldr	r3, [pc, #332]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	605a      	str	r2, [r3, #4]
					currBlock->BlockOne[2] = testVar[2];
 8000e98:	4b51      	ldr	r3, [pc, #324]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	68ba      	ldr	r2, [r7, #8]
 8000e9e:	609a      	str	r2, [r3, #8]

					testVar[1] = currBlock->BlockTwo[1] + 1;// middle left to top middle
 8000ea0:	4b4f      	ldr	r3, [pc, #316]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	68db      	ldr	r3, [r3, #12]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockTwo[2] + 1;
 8000eaa:	4b4d      	ldr	r3, [pc, #308]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	691b      	ldr	r3, [r3, #16]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	60bb      	str	r3, [r7, #8]
					currBlock->BlockTwo[1] = testVar[1];
 8000eb4:	4b4a      	ldr	r3, [pc, #296]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	60da      	str	r2, [r3, #12]
					currBlock->BlockTwo[2] = testVar[2];
 8000ebc:	4b48      	ldr	r3, [pc, #288]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	68ba      	ldr	r2, [r7, #8]
 8000ec2:	611a      	str	r2, [r3, #16]

					testVar[1] = currBlock->BlockThree[1] + 2;// top left to top right
 8000ec4:	4b46      	ldr	r3, [pc, #280]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	695b      	ldr	r3, [r3, #20]
 8000eca:	3302      	adds	r3, #2
 8000ecc:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockThree[2];
 8000ece:	4b44      	ldr	r3, [pc, #272]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	60bb      	str	r3, [r7, #8]
					currBlock->BlockThree[1] = testVar[1];
 8000ed6:	4b42      	ldr	r3, [pc, #264]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	615a      	str	r2, [r3, #20]
					currBlock->BlockThree[2] = testVar[2];
 8000ede:	4b40      	ldr	r3, [pc, #256]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	619a      	str	r2, [r3, #24]

					currBlock->state = state2;
 8000ee6:	4b3e      	ldr	r3, [pc, #248]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2201      	movs	r2, #1
 8000eec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
					break;
 8000ef0:	e0b4      	b.n	800105c <currBlock_Rotate+0x4b4>
				case state2:
					testVar[1] = currBlock->BlockOne[1] - 1;//  mid bottom to mid left
 8000ef2:	4b3b      	ldr	r3, [pc, #236]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	3b01      	subs	r3, #1
 8000efa:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockOne[2] + 1;
 8000efc:	4b38      	ldr	r3, [pc, #224]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	3301      	adds	r3, #1
 8000f04:	60bb      	str	r3, [r7, #8]
					currBlock->BlockOne[1] = testVar[1];
 8000f06:	4b36      	ldr	r3, [pc, #216]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	605a      	str	r2, [r3, #4]
					currBlock->BlockOne[2] = testVar[2];
 8000f0e:	4b34      	ldr	r3, [pc, #208]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	609a      	str	r2, [r3, #8]

					testVar[1] = currBlock->BlockTwo[1] + 1;//  top middle to middle right
 8000f16:	4b32      	ldr	r3, [pc, #200]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockTwo[2] - 1;
 8000f20:	4b2f      	ldr	r3, [pc, #188]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	691b      	ldr	r3, [r3, #16]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	60bb      	str	r3, [r7, #8]
					currBlock->BlockTwo[1] = testVar[1];
 8000f2a:	4b2d      	ldr	r3, [pc, #180]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	60da      	str	r2, [r3, #12]
					currBlock->BlockTwo[2] = testVar[2];
 8000f32:	4b2b      	ldr	r3, [pc, #172]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	611a      	str	r2, [r3, #16]

					testVar[1] = currBlock->BlockThree[1];//  top right to bottom right
 8000f3a:	4b29      	ldr	r3, [pc, #164]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	695b      	ldr	r3, [r3, #20]
 8000f40:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockThree[2] - 2;
 8000f42:	4b27      	ldr	r3, [pc, #156]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	60bb      	str	r3, [r7, #8]
					currBlock->BlockThree[1] = testVar[1];
 8000f4c:	4b24      	ldr	r3, [pc, #144]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	615a      	str	r2, [r3, #20]
					currBlock->BlockThree[2] = testVar[2];
 8000f54:	4b22      	ldr	r3, [pc, #136]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	68ba      	ldr	r2, [r7, #8]
 8000f5a:	619a      	str	r2, [r3, #24]

					currBlock->state = state3;
 8000f5c:	4b20      	ldr	r3, [pc, #128]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2202      	movs	r2, #2
 8000f62:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
					break;
 8000f66:	e079      	b.n	800105c <currBlock_Rotate+0x4b4>
				case state3:
					testVar[1] = currBlock->BlockOne[1] + 1;//  mid left to mid top
 8000f68:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockOne[2] + 1;
 8000f72:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	60bb      	str	r3, [r7, #8]
					currBlock->BlockOne[1] = testVar[1];
 8000f7c:	4b18      	ldr	r3, [pc, #96]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	605a      	str	r2, [r3, #4]
					currBlock->BlockOne[2] = testVar[2];
 8000f84:	4b16      	ldr	r3, [pc, #88]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	68ba      	ldr	r2, [r7, #8]
 8000f8a:	609a      	str	r2, [r3, #8]

					testVar[1] = currBlock->BlockTwo[1] - 1;//  middle right mid bottom
 8000f8c:	4b14      	ldr	r3, [pc, #80]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockTwo[2] - 1;
 8000f96:	4b12      	ldr	r3, [pc, #72]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	691b      	ldr	r3, [r3, #16]
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	60bb      	str	r3, [r7, #8]
					currBlock->BlockTwo[1] = testVar[1];
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	60da      	str	r2, [r3, #12]
					currBlock->BlockTwo[2] = testVar[2];
 8000fa8:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	68ba      	ldr	r2, [r7, #8]
 8000fae:	611a      	str	r2, [r3, #16]

					testVar[1] = currBlock->BlockThree[1] - 2;//  bottom right to bottom left
 8000fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	3b02      	subs	r3, #2
 8000fb8:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockThree[2];
 8000fba:	4b09      	ldr	r3, [pc, #36]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	60bb      	str	r3, [r7, #8]
					currBlock->BlockThree[1] = testVar[1];
 8000fc2:	4b07      	ldr	r3, [pc, #28]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	615a      	str	r2, [r3, #20]
					currBlock->BlockThree[2] = testVar[2];
 8000fca:	4b05      	ldr	r3, [pc, #20]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	619a      	str	r2, [r3, #24]

					currBlock->state = state4;
 8000fd2:	4b03      	ldr	r3, [pc, #12]	@ (8000fe0 <currBlock_Rotate+0x438>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
					break;
 8000fdc:	e03e      	b.n	800105c <currBlock_Rotate+0x4b4>
 8000fde:	bf00      	nop
 8000fe0:	200000d4 	.word	0x200000d4
				case state4:
					testVar[1] = currBlock->BlockOne[1] + 1;//  mid top to mid right
 8000fe4:	4b7f      	ldr	r3, [pc, #508]	@ (80011e4 <currBlock_Rotate+0x63c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	3301      	adds	r3, #1
 8000fec:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockOne[2] - 1;
 8000fee:	4b7d      	ldr	r3, [pc, #500]	@ (80011e4 <currBlock_Rotate+0x63c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	60bb      	str	r3, [r7, #8]
					currBlock->BlockOne[1] = testVar[1];
 8000ff8:	4b7a      	ldr	r3, [pc, #488]	@ (80011e4 <currBlock_Rotate+0x63c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	605a      	str	r2, [r3, #4]
					currBlock->BlockOne[2] = testVar[2];
 8001000:	4b78      	ldr	r3, [pc, #480]	@ (80011e4 <currBlock_Rotate+0x63c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	68ba      	ldr	r2, [r7, #8]
 8001006:	609a      	str	r2, [r3, #8]

					testVar[1] = currBlock->BlockTwo[1] - 1;//  middle right mid bottom
 8001008:	4b76      	ldr	r3, [pc, #472]	@ (80011e4 <currBlock_Rotate+0x63c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	68db      	ldr	r3, [r3, #12]
 800100e:	3b01      	subs	r3, #1
 8001010:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockTwo[2] - 1;
 8001012:	4b74      	ldr	r3, [pc, #464]	@ (80011e4 <currBlock_Rotate+0x63c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	691b      	ldr	r3, [r3, #16]
 8001018:	3b01      	subs	r3, #1
 800101a:	60bb      	str	r3, [r7, #8]
					currBlock->BlockTwo[1] = testVar[1];
 800101c:	4b71      	ldr	r3, [pc, #452]	@ (80011e4 <currBlock_Rotate+0x63c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	60da      	str	r2, [r3, #12]
					currBlock->BlockTwo[2] = testVar[2];
 8001024:	4b6f      	ldr	r3, [pc, #444]	@ (80011e4 <currBlock_Rotate+0x63c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	68ba      	ldr	r2, [r7, #8]
 800102a:	611a      	str	r2, [r3, #16]

					testVar[1] = currBlock->BlockThree[1] - 2;//  bottom right to bottom left
 800102c:	4b6d      	ldr	r3, [pc, #436]	@ (80011e4 <currBlock_Rotate+0x63c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	3b02      	subs	r3, #2
 8001034:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockThree[2];
 8001036:	4b6b      	ldr	r3, [pc, #428]	@ (80011e4 <currBlock_Rotate+0x63c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	60bb      	str	r3, [r7, #8]
					currBlock->BlockThree[1] = testVar[1];
 800103e:	4b69      	ldr	r3, [pc, #420]	@ (80011e4 <currBlock_Rotate+0x63c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	615a      	str	r2, [r3, #20]
					currBlock->BlockThree[2] = testVar[2];
 8001046:	4b67      	ldr	r3, [pc, #412]	@ (80011e4 <currBlock_Rotate+0x63c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	619a      	str	r2, [r3, #24]

					currBlock->state = state1;// set state back to 1
 800104e:	4b65      	ldr	r3, [pc, #404]	@ (80011e4 <currBlock_Rotate+0x63c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2200      	movs	r2, #0
 8001054:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
					break;
 8001058:	e000      	b.n	800105c <currBlock_Rotate+0x4b4>
				default:
					break;
 800105a:	bf00      	nop
				}
			}
			case LeftL:{
				switch(currBlock->state){// 4 rotations
 800105c:	4b61      	ldr	r3, [pc, #388]	@ (80011e4 <currBlock_Rotate+0x63c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001064:	2b03      	cmp	r3, #3
 8001066:	f200 80fa 	bhi.w	800125e <currBlock_Rotate+0x6b6>
 800106a:	a201      	add	r2, pc, #4	@ (adr r2, 8001070 <currBlock_Rotate+0x4c8>)
 800106c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001070:	08001081 	.word	0x08001081
 8001074:	080010f7 	.word	0x080010f7
 8001078:	0800116d 	.word	0x0800116d
 800107c:	080011e9 	.word	0x080011e9
				case state1:
					testVar[1] = currBlock->BlockOne[1] + 1;//  mid left to mid top
 8001080:	4b58      	ldr	r3, [pc, #352]	@ (80011e4 <currBlock_Rotate+0x63c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	3301      	adds	r3, #1
 8001088:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockOne[2] + 1;
 800108a:	4b56      	ldr	r3, [pc, #344]	@ (80011e4 <currBlock_Rotate+0x63c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	3301      	adds	r3, #1
 8001092:	60bb      	str	r3, [r7, #8]
					currBlock->BlockOne[1] = testVar[1];
 8001094:	4b53      	ldr	r3, [pc, #332]	@ (80011e4 <currBlock_Rotate+0x63c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	605a      	str	r2, [r3, #4]
					currBlock->BlockOne[2] = testVar[2];
 800109c:	4b51      	ldr	r3, [pc, #324]	@ (80011e4 <currBlock_Rotate+0x63c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	68ba      	ldr	r2, [r7, #8]
 80010a2:	609a      	str	r2, [r3, #8]

					testVar[1] = currBlock->BlockTwo[1] - 1;// middle right to bottom middle
 80010a4:	4b4f      	ldr	r3, [pc, #316]	@ (80011e4 <currBlock_Rotate+0x63c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockTwo[2] - 1;
 80010ae:	4b4d      	ldr	r3, [pc, #308]	@ (80011e4 <currBlock_Rotate+0x63c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	691b      	ldr	r3, [r3, #16]
 80010b4:	3b01      	subs	r3, #1
 80010b6:	60bb      	str	r3, [r7, #8]
					currBlock->BlockTwo[1] = testVar[1];
 80010b8:	4b4a      	ldr	r3, [pc, #296]	@ (80011e4 <currBlock_Rotate+0x63c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	60da      	str	r2, [r3, #12]
					currBlock->BlockTwo[2] = testVar[2];
 80010c0:	4b48      	ldr	r3, [pc, #288]	@ (80011e4 <currBlock_Rotate+0x63c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	68ba      	ldr	r2, [r7, #8]
 80010c6:	611a      	str	r2, [r3, #16]

					testVar[1] = currBlock->BlockThree[1];// top right to bottom right
 80010c8:	4b46      	ldr	r3, [pc, #280]	@ (80011e4 <currBlock_Rotate+0x63c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockThree[2] - 2;
 80010d0:	4b44      	ldr	r3, [pc, #272]	@ (80011e4 <currBlock_Rotate+0x63c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	3b02      	subs	r3, #2
 80010d8:	60bb      	str	r3, [r7, #8]
					currBlock->BlockThree[1] = testVar[1];
 80010da:	4b42      	ldr	r3, [pc, #264]	@ (80011e4 <currBlock_Rotate+0x63c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	615a      	str	r2, [r3, #20]
					currBlock->BlockThree[2] = testVar[2];
 80010e2:	4b40      	ldr	r3, [pc, #256]	@ (80011e4 <currBlock_Rotate+0x63c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	68ba      	ldr	r2, [r7, #8]
 80010e8:	619a      	str	r2, [r3, #24]

					currBlock->state = state2;
 80010ea:	4b3e      	ldr	r3, [pc, #248]	@ (80011e4 <currBlock_Rotate+0x63c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2201      	movs	r2, #1
 80010f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
					break;
 80010f4:	e0b4      	b.n	8001260 <currBlock_Rotate+0x6b8>
				case state2:
					testVar[1] = currBlock->BlockOne[1] + 1;//   mid top to mid right
 80010f6:	4b3b      	ldr	r3, [pc, #236]	@ (80011e4 <currBlock_Rotate+0x63c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	3301      	adds	r3, #1
 80010fe:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockOne[2] - 1;
 8001100:	4b38      	ldr	r3, [pc, #224]	@ (80011e4 <currBlock_Rotate+0x63c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	3b01      	subs	r3, #1
 8001108:	60bb      	str	r3, [r7, #8]
					currBlock->BlockOne[1] = testVar[1];
 800110a:	4b36      	ldr	r3, [pc, #216]	@ (80011e4 <currBlock_Rotate+0x63c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	605a      	str	r2, [r3, #4]
					currBlock->BlockOne[2] = testVar[2];
 8001112:	4b34      	ldr	r3, [pc, #208]	@ (80011e4 <currBlock_Rotate+0x63c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	609a      	str	r2, [r3, #8]

					testVar[1] = currBlock->BlockTwo[1] - 1;//  bottom middle to middle left
 800111a:	4b32      	ldr	r3, [pc, #200]	@ (80011e4 <currBlock_Rotate+0x63c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	3b01      	subs	r3, #1
 8001122:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockTwo[2] + 1;
 8001124:	4b2f      	ldr	r3, [pc, #188]	@ (80011e4 <currBlock_Rotate+0x63c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	691b      	ldr	r3, [r3, #16]
 800112a:	3301      	adds	r3, #1
 800112c:	60bb      	str	r3, [r7, #8]
					currBlock->BlockTwo[1] = testVar[1];
 800112e:	4b2d      	ldr	r3, [pc, #180]	@ (80011e4 <currBlock_Rotate+0x63c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	60da      	str	r2, [r3, #12]
					currBlock->BlockTwo[2] = testVar[2];
 8001136:	4b2b      	ldr	r3, [pc, #172]	@ (80011e4 <currBlock_Rotate+0x63c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	611a      	str	r2, [r3, #16]

					testVar[1] = currBlock->BlockThree[1] - 2;//  bottom right to bottom left
 800113e:	4b29      	ldr	r3, [pc, #164]	@ (80011e4 <currBlock_Rotate+0x63c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	3b02      	subs	r3, #2
 8001146:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockThree[2];
 8001148:	4b26      	ldr	r3, [pc, #152]	@ (80011e4 <currBlock_Rotate+0x63c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	60bb      	str	r3, [r7, #8]
					currBlock->BlockThree[1] = testVar[1];
 8001150:	4b24      	ldr	r3, [pc, #144]	@ (80011e4 <currBlock_Rotate+0x63c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	615a      	str	r2, [r3, #20]
					currBlock->BlockThree[2] = testVar[2];
 8001158:	4b22      	ldr	r3, [pc, #136]	@ (80011e4 <currBlock_Rotate+0x63c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	68ba      	ldr	r2, [r7, #8]
 800115e:	619a      	str	r2, [r3, #24]

					currBlock->state = state3;
 8001160:	4b20      	ldr	r3, [pc, #128]	@ (80011e4 <currBlock_Rotate+0x63c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2202      	movs	r2, #2
 8001166:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
					break;
 800116a:	e079      	b.n	8001260 <currBlock_Rotate+0x6b8>
				case state3:
					testVar[1] = currBlock->BlockOne[1] - 1;//    mid right mid bottom
 800116c:	4b1d      	ldr	r3, [pc, #116]	@ (80011e4 <currBlock_Rotate+0x63c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	3b01      	subs	r3, #1
 8001174:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockOne[2] - 1;
 8001176:	4b1b      	ldr	r3, [pc, #108]	@ (80011e4 <currBlock_Rotate+0x63c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	3b01      	subs	r3, #1
 800117e:	60bb      	str	r3, [r7, #8]
					currBlock->BlockOne[1] = testVar[1];
 8001180:	4b18      	ldr	r3, [pc, #96]	@ (80011e4 <currBlock_Rotate+0x63c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	605a      	str	r2, [r3, #4]
					currBlock->BlockOne[2] = testVar[2];
 8001188:	4b16      	ldr	r3, [pc, #88]	@ (80011e4 <currBlock_Rotate+0x63c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	68ba      	ldr	r2, [r7, #8]
 800118e:	609a      	str	r2, [r3, #8]

					testVar[1] = currBlock->BlockTwo[1] + 1;//   middle left to middle top
 8001190:	4b14      	ldr	r3, [pc, #80]	@ (80011e4 <currBlock_Rotate+0x63c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	3301      	adds	r3, #1
 8001198:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockTwo[2] + 1;
 800119a:	4b12      	ldr	r3, [pc, #72]	@ (80011e4 <currBlock_Rotate+0x63c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	691b      	ldr	r3, [r3, #16]
 80011a0:	3301      	adds	r3, #1
 80011a2:	60bb      	str	r3, [r7, #8]
					currBlock->BlockTwo[1] = testVar[1];
 80011a4:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <currBlock_Rotate+0x63c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	60da      	str	r2, [r3, #12]
					currBlock->BlockTwo[2] = testVar[2];
 80011ac:	4b0d      	ldr	r3, [pc, #52]	@ (80011e4 <currBlock_Rotate+0x63c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	68ba      	ldr	r2, [r7, #8]
 80011b2:	611a      	str	r2, [r3, #16]

					testVar[1] = currBlock->BlockThree[1];//   bottom left to top left
 80011b4:	4b0b      	ldr	r3, [pc, #44]	@ (80011e4 <currBlock_Rotate+0x63c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockThree[2] + 2;
 80011bc:	4b09      	ldr	r3, [pc, #36]	@ (80011e4 <currBlock_Rotate+0x63c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	699b      	ldr	r3, [r3, #24]
 80011c2:	3302      	adds	r3, #2
 80011c4:	60bb      	str	r3, [r7, #8]
					currBlock->BlockThree[1] = testVar[1];
 80011c6:	4b07      	ldr	r3, [pc, #28]	@ (80011e4 <currBlock_Rotate+0x63c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	615a      	str	r2, [r3, #20]
					currBlock->BlockThree[2] = testVar[2];
 80011ce:	4b05      	ldr	r3, [pc, #20]	@ (80011e4 <currBlock_Rotate+0x63c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	68ba      	ldr	r2, [r7, #8]
 80011d4:	619a      	str	r2, [r3, #24]

					currBlock->state = state4;
 80011d6:	4b03      	ldr	r3, [pc, #12]	@ (80011e4 <currBlock_Rotate+0x63c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2203      	movs	r2, #3
 80011dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
					break;
 80011e0:	e03e      	b.n	8001260 <currBlock_Rotate+0x6b8>
 80011e2:	bf00      	nop
 80011e4:	200000d4 	.word	0x200000d4
				case state4:
					testVar[1] = currBlock->BlockOne[1] - 1;//   mid bottom to mid left
 80011e8:	4b7e      	ldr	r3, [pc, #504]	@ (80013e4 <currBlock_Rotate+0x83c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockOne[2] + 1;
 80011f2:	4b7c      	ldr	r3, [pc, #496]	@ (80013e4 <currBlock_Rotate+0x83c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	3301      	adds	r3, #1
 80011fa:	60bb      	str	r3, [r7, #8]
					currBlock->BlockOne[1] = testVar[1];
 80011fc:	4b79      	ldr	r3, [pc, #484]	@ (80013e4 <currBlock_Rotate+0x83c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	605a      	str	r2, [r3, #4]
					currBlock->BlockOne[2] = testVar[2];
 8001204:	4b77      	ldr	r3, [pc, #476]	@ (80013e4 <currBlock_Rotate+0x83c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	68ba      	ldr	r2, [r7, #8]
 800120a:	609a      	str	r2, [r3, #8]

					testVar[1] = currBlock->BlockTwo[1] + 1;//    middle top to mid right
 800120c:	4b75      	ldr	r3, [pc, #468]	@ (80013e4 <currBlock_Rotate+0x83c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	3301      	adds	r3, #1
 8001214:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockTwo[2] - 1;
 8001216:	4b73      	ldr	r3, [pc, #460]	@ (80013e4 <currBlock_Rotate+0x83c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	691b      	ldr	r3, [r3, #16]
 800121c:	3b01      	subs	r3, #1
 800121e:	60bb      	str	r3, [r7, #8]
					currBlock->BlockTwo[1] = testVar[1];
 8001220:	4b70      	ldr	r3, [pc, #448]	@ (80013e4 <currBlock_Rotate+0x83c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	60da      	str	r2, [r3, #12]
					currBlock->BlockTwo[2] = testVar[2];
 8001228:	4b6e      	ldr	r3, [pc, #440]	@ (80013e4 <currBlock_Rotate+0x83c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	68ba      	ldr	r2, [r7, #8]
 800122e:	611a      	str	r2, [r3, #16]

					testVar[1] = currBlock->BlockThree[1] + 2;//   top left to top right
 8001230:	4b6c      	ldr	r3, [pc, #432]	@ (80013e4 <currBlock_Rotate+0x83c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	3302      	adds	r3, #2
 8001238:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockThree[2];
 800123a:	4b6a      	ldr	r3, [pc, #424]	@ (80013e4 <currBlock_Rotate+0x83c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	60bb      	str	r3, [r7, #8]
					currBlock->BlockThree[1] = testVar[1];
 8001242:	4b68      	ldr	r3, [pc, #416]	@ (80013e4 <currBlock_Rotate+0x83c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	615a      	str	r2, [r3, #20]
					currBlock->BlockThree[2] = testVar[2];
 800124a:	4b66      	ldr	r3, [pc, #408]	@ (80013e4 <currBlock_Rotate+0x83c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	68ba      	ldr	r2, [r7, #8]
 8001250:	619a      	str	r2, [r3, #24]

					currBlock->state = state1;
 8001252:	4b64      	ldr	r3, [pc, #400]	@ (80013e4 <currBlock_Rotate+0x83c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2200      	movs	r2, #0
 8001258:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
					break;
 800125c:	e000      	b.n	8001260 <currBlock_Rotate+0x6b8>
				default:
					break;
 800125e:	bf00      	nop
				}
			}
			break;
 8001260:	e0ff      	b.n	8001462 <currBlock_Rotate+0x8ba>
			case smollPP:{
				switch(currBlock->state){// 4rotations only 3 blocks as center is centered
 8001262:	4b60      	ldr	r3, [pc, #384]	@ (80013e4 <currBlock_Rotate+0x83c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800126a:	2b03      	cmp	r3, #3
 800126c:	f200 80f8 	bhi.w	8001460 <currBlock_Rotate+0x8b8>
 8001270:	a201      	add	r2, pc, #4	@ (adr r2, 8001278 <currBlock_Rotate+0x6d0>)
 8001272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001276:	bf00      	nop
 8001278:	08001289 	.word	0x08001289
 800127c:	080012fd 	.word	0x080012fd
 8001280:	08001371 	.word	0x08001371
 8001284:	080013e9 	.word	0x080013e9
				case state1:
					testVar[1] = currBlock->BlockOne[1];//  bottom left to top left
 8001288:	4b56      	ldr	r3, [pc, #344]	@ (80013e4 <currBlock_Rotate+0x83c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockOne[2] + 2;
 8001290:	4b54      	ldr	r3, [pc, #336]	@ (80013e4 <currBlock_Rotate+0x83c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	3302      	adds	r3, #2
 8001298:	60bb      	str	r3, [r7, #8]
					currBlock->BlockOne[1] = testVar[1];
 800129a:	4b52      	ldr	r3, [pc, #328]	@ (80013e4 <currBlock_Rotate+0x83c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	605a      	str	r2, [r3, #4]
					currBlock->BlockOne[2] = testVar[2];
 80012a2:	4b50      	ldr	r3, [pc, #320]	@ (80013e4 <currBlock_Rotate+0x83c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	609a      	str	r2, [r3, #8]

					testVar[1] = currBlock->BlockTwo[1] + 1;// middle left to top middle
 80012aa:	4b4e      	ldr	r3, [pc, #312]	@ (80013e4 <currBlock_Rotate+0x83c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	3301      	adds	r3, #1
 80012b2:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockTwo[2] + 1;
 80012b4:	4b4b      	ldr	r3, [pc, #300]	@ (80013e4 <currBlock_Rotate+0x83c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	691b      	ldr	r3, [r3, #16]
 80012ba:	3301      	adds	r3, #1
 80012bc:	60bb      	str	r3, [r7, #8]
					currBlock->BlockTwo[1] = testVar[1];
 80012be:	4b49      	ldr	r3, [pc, #292]	@ (80013e4 <currBlock_Rotate+0x83c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	60da      	str	r2, [r3, #12]
					currBlock->BlockTwo[2] = testVar[2];
 80012c6:	4b47      	ldr	r3, [pc, #284]	@ (80013e4 <currBlock_Rotate+0x83c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	611a      	str	r2, [r3, #16]

					testVar[1] = currBlock->BlockThree[1] + 2;// top left to top right
 80012ce:	4b45      	ldr	r3, [pc, #276]	@ (80013e4 <currBlock_Rotate+0x83c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	695b      	ldr	r3, [r3, #20]
 80012d4:	3302      	adds	r3, #2
 80012d6:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockThree[2];
 80012d8:	4b42      	ldr	r3, [pc, #264]	@ (80013e4 <currBlock_Rotate+0x83c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	60bb      	str	r3, [r7, #8]
					currBlock->BlockThree[1] = testVar[1];
 80012e0:	4b40      	ldr	r3, [pc, #256]	@ (80013e4 <currBlock_Rotate+0x83c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	615a      	str	r2, [r3, #20]
					currBlock->BlockThree[2] = testVar[2];
 80012e8:	4b3e      	ldr	r3, [pc, #248]	@ (80013e4 <currBlock_Rotate+0x83c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	68ba      	ldr	r2, [r7, #8]
 80012ee:	619a      	str	r2, [r3, #24]

					currBlock->state = state2;
 80012f0:	4b3c      	ldr	r3, [pc, #240]	@ (80013e4 <currBlock_Rotate+0x83c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2201      	movs	r2, #1
 80012f6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
					break;
 80012fa:	e0b2      	b.n	8001462 <currBlock_Rotate+0x8ba>
				case state2:
					testVar[1] = currBlock->BlockOne[1] + 2;// top left to top right
 80012fc:	4b39      	ldr	r3, [pc, #228]	@ (80013e4 <currBlock_Rotate+0x83c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	3302      	adds	r3, #2
 8001304:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockOne[2];
 8001306:	4b37      	ldr	r3, [pc, #220]	@ (80013e4 <currBlock_Rotate+0x83c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	60bb      	str	r3, [r7, #8]
					currBlock->BlockOne[1] = testVar[1];
 800130e:	4b35      	ldr	r3, [pc, #212]	@ (80013e4 <currBlock_Rotate+0x83c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	605a      	str	r2, [r3, #4]
					currBlock->BlockOne[2] = testVar[2];
 8001316:	4b33      	ldr	r3, [pc, #204]	@ (80013e4 <currBlock_Rotate+0x83c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	609a      	str	r2, [r3, #8]

					testVar[1] = currBlock->BlockTwo[1] + 1;// middle top to  middle right
 800131e:	4b31      	ldr	r3, [pc, #196]	@ (80013e4 <currBlock_Rotate+0x83c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	3301      	adds	r3, #1
 8001326:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockTwo[2] - 1;
 8001328:	4b2e      	ldr	r3, [pc, #184]	@ (80013e4 <currBlock_Rotate+0x83c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	3b01      	subs	r3, #1
 8001330:	60bb      	str	r3, [r7, #8]
					currBlock->BlockTwo[1] = testVar[1];
 8001332:	4b2c      	ldr	r3, [pc, #176]	@ (80013e4 <currBlock_Rotate+0x83c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	60da      	str	r2, [r3, #12]
					currBlock->BlockTwo[2] = testVar[2];
 800133a:	4b2a      	ldr	r3, [pc, #168]	@ (80013e4 <currBlock_Rotate+0x83c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	611a      	str	r2, [r3, #16]

					testVar[1] = currBlock->BlockThree[1];// top right to bottom right
 8001342:	4b28      	ldr	r3, [pc, #160]	@ (80013e4 <currBlock_Rotate+0x83c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	695b      	ldr	r3, [r3, #20]
 8001348:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockThree[2] - 2;
 800134a:	4b26      	ldr	r3, [pc, #152]	@ (80013e4 <currBlock_Rotate+0x83c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	3b02      	subs	r3, #2
 8001352:	60bb      	str	r3, [r7, #8]
					currBlock->BlockThree[1] = testVar[1];
 8001354:	4b23      	ldr	r3, [pc, #140]	@ (80013e4 <currBlock_Rotate+0x83c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	615a      	str	r2, [r3, #20]
					currBlock->BlockThree[2] = testVar[2];
 800135c:	4b21      	ldr	r3, [pc, #132]	@ (80013e4 <currBlock_Rotate+0x83c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	68ba      	ldr	r2, [r7, #8]
 8001362:	619a      	str	r2, [r3, #24]

					currBlock->state = state3;
 8001364:	4b1f      	ldr	r3, [pc, #124]	@ (80013e4 <currBlock_Rotate+0x83c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2202      	movs	r2, #2
 800136a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
					break;
 800136e:	e078      	b.n	8001462 <currBlock_Rotate+0x8ba>
				case state3:
					testVar[1] = currBlock->BlockOne[1];//top right to bottom right
 8001370:	4b1c      	ldr	r3, [pc, #112]	@ (80013e4 <currBlock_Rotate+0x83c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockOne[2] - 2;
 8001378:	4b1a      	ldr	r3, [pc, #104]	@ (80013e4 <currBlock_Rotate+0x83c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	3b02      	subs	r3, #2
 8001380:	60bb      	str	r3, [r7, #8]
					currBlock->BlockOne[1] = testVar[1];
 8001382:	4b18      	ldr	r3, [pc, #96]	@ (80013e4 <currBlock_Rotate+0x83c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	605a      	str	r2, [r3, #4]
					currBlock->BlockOne[2] = testVar[2];
 800138a:	4b16      	ldr	r3, [pc, #88]	@ (80013e4 <currBlock_Rotate+0x83c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	609a      	str	r2, [r3, #8]

					testVar[1] = currBlock->BlockTwo[1] - 1;// middle right to  middle bottom
 8001392:	4b14      	ldr	r3, [pc, #80]	@ (80013e4 <currBlock_Rotate+0x83c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	3b01      	subs	r3, #1
 800139a:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockTwo[2] - 1;
 800139c:	4b11      	ldr	r3, [pc, #68]	@ (80013e4 <currBlock_Rotate+0x83c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	60bb      	str	r3, [r7, #8]
					currBlock->BlockTwo[1] = testVar[1];
 80013a6:	4b0f      	ldr	r3, [pc, #60]	@ (80013e4 <currBlock_Rotate+0x83c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	60da      	str	r2, [r3, #12]
					currBlock->BlockTwo[2] = testVar[2];
 80013ae:	4b0d      	ldr	r3, [pc, #52]	@ (80013e4 <currBlock_Rotate+0x83c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	611a      	str	r2, [r3, #16]

					testVar[1] = currBlock->BlockThree[1] - 2;// bottom right to bottom left
 80013b6:	4b0b      	ldr	r3, [pc, #44]	@ (80013e4 <currBlock_Rotate+0x83c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	695b      	ldr	r3, [r3, #20]
 80013bc:	3b02      	subs	r3, #2
 80013be:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockThree[2];
 80013c0:	4b08      	ldr	r3, [pc, #32]	@ (80013e4 <currBlock_Rotate+0x83c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	60bb      	str	r3, [r7, #8]
					currBlock->BlockThree[1] = testVar[1];
 80013c8:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <currBlock_Rotate+0x83c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	615a      	str	r2, [r3, #20]
					currBlock->BlockThree[2] = testVar[2];
 80013d0:	4b04      	ldr	r3, [pc, #16]	@ (80013e4 <currBlock_Rotate+0x83c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	68ba      	ldr	r2, [r7, #8]
 80013d6:	619a      	str	r2, [r3, #24]

					currBlock->state = state4;
 80013d8:	4b02      	ldr	r3, [pc, #8]	@ (80013e4 <currBlock_Rotate+0x83c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2203      	movs	r2, #3
 80013de:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
					break;
 80013e2:	e03e      	b.n	8001462 <currBlock_Rotate+0x8ba>
 80013e4:	200000d4 	.word	0x200000d4
				case state4:
					testVar[1] = currBlock->BlockOne[1] - 2;// bottom right to bottom left
 80013e8:	4b20      	ldr	r3, [pc, #128]	@ (800146c <currBlock_Rotate+0x8c4>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	3b02      	subs	r3, #2
 80013f0:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockOne[2];
 80013f2:	4b1e      	ldr	r3, [pc, #120]	@ (800146c <currBlock_Rotate+0x8c4>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	60bb      	str	r3, [r7, #8]
					currBlock->BlockOne[1] = testVar[1];
 80013fa:	4b1c      	ldr	r3, [pc, #112]	@ (800146c <currBlock_Rotate+0x8c4>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	605a      	str	r2, [r3, #4]
					currBlock->BlockOne[2] = testVar[2];
 8001402:	4b1a      	ldr	r3, [pc, #104]	@ (800146c <currBlock_Rotate+0x8c4>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	609a      	str	r2, [r3, #8]

					testVar[1] = currBlock->BlockTwo[1] - 1;// middle bottom to  middle left
 800140a:	4b18      	ldr	r3, [pc, #96]	@ (800146c <currBlock_Rotate+0x8c4>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	3b01      	subs	r3, #1
 8001412:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockTwo[2] + 1;
 8001414:	4b15      	ldr	r3, [pc, #84]	@ (800146c <currBlock_Rotate+0x8c4>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	3301      	adds	r3, #1
 800141c:	60bb      	str	r3, [r7, #8]
					currBlock->BlockTwo[1] = testVar[1];
 800141e:	4b13      	ldr	r3, [pc, #76]	@ (800146c <currBlock_Rotate+0x8c4>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	60da      	str	r2, [r3, #12]
					currBlock->BlockTwo[2] = testVar[2];
 8001426:	4b11      	ldr	r3, [pc, #68]	@ (800146c <currBlock_Rotate+0x8c4>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	611a      	str	r2, [r3, #16]

					testVar[1] = currBlock->BlockThree[1];// bottom left to top left
 800142e:	4b0f      	ldr	r3, [pc, #60]	@ (800146c <currBlock_Rotate+0x8c4>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	695b      	ldr	r3, [r3, #20]
 8001434:	607b      	str	r3, [r7, #4]
					testVar[2] = currBlock->BlockThree[2] + 2;
 8001436:	4b0d      	ldr	r3, [pc, #52]	@ (800146c <currBlock_Rotate+0x8c4>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	3302      	adds	r3, #2
 800143e:	60bb      	str	r3, [r7, #8]
					currBlock->BlockThree[1] = testVar[1];
 8001440:	4b0a      	ldr	r3, [pc, #40]	@ (800146c <currBlock_Rotate+0x8c4>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	615a      	str	r2, [r3, #20]
					currBlock->BlockThree[2] = testVar[2];
 8001448:	4b08      	ldr	r3, [pc, #32]	@ (800146c <currBlock_Rotate+0x8c4>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	68ba      	ldr	r2, [r7, #8]
 800144e:	619a      	str	r2, [r3, #24]

					currBlock->state = state1;
 8001450:	4b06      	ldr	r3, [pc, #24]	@ (800146c <currBlock_Rotate+0x8c4>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2200      	movs	r2, #0
 8001456:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
					break;
 800145a:	e002      	b.n	8001462 <currBlock_Rotate+0x8ba>
				break;
 800145c:	bf00      	nop
 800145e:	e000      	b.n	8001462 <currBlock_Rotate+0x8ba>
				default:
					break;
 8001460:	bf00      	nop
				}
			}
		}
	}
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	200000d4 	.word	0x200000d4

08001470 <currBlock_verifyRotate>:


bool currBlock_verifyRotate(void){
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
	int testVar[2];
	switch(currBlock->type){
 8001476:	4b9e      	ldr	r3, [pc, #632]	@ (80016f0 <currBlock_verifyRotate+0x280>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800147e:	2b06      	cmp	r3, #6
 8001480:	f200 8577 	bhi.w	8001f72 <currBlock_verifyRotate+0xb02>
 8001484:	a201      	add	r2, pc, #4	@ (adr r2, 800148c <currBlock_verifyRotate+0x1c>)
 8001486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800148a:	bf00      	nop
 800148c:	080014a9 	.word	0x080014a9
 8001490:	08001f73 	.word	0x08001f73
 8001494:	080015ff 	.word	0x080015ff
 8001498:	080016df 	.word	0x080016df
 800149c:	080017c3 	.word	0x080017c3
 80014a0:	08001a57 	.word	0x08001a57
 80014a4:	08001ced 	.word	0x08001ced
	case line:{
		switch(currBlock->state){// one block doest move
 80014a8:	4b91      	ldr	r3, [pc, #580]	@ (80016f0 <currBlock_verifyRotate+0x280>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d002      	beq.n	80014ba <currBlock_verifyRotate+0x4a>
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d04e      	beq.n	8001556 <currBlock_verifyRotate+0xe6>
			if(board[testVar[1]][testVar[2]] != Free){
				return false;
			}
			break;
		default:
			break;
 80014b8:	e09f      	b.n	80015fa <currBlock_verifyRotate+0x18a>
			testVar[1] = currBlock->BlockOne[1] + 3;
 80014ba:	4b8d      	ldr	r3, [pc, #564]	@ (80016f0 <currBlock_verifyRotate+0x280>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	3303      	adds	r3, #3
 80014c2:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockOne[2] - 3;
 80014c4:	4b8a      	ldr	r3, [pc, #552]	@ (80016f0 <currBlock_verifyRotate+0x280>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	3b03      	subs	r3, #3
 80014cc:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	68b9      	ldr	r1, [r7, #8]
 80014d2:	4888      	ldr	r0, [pc, #544]	@ (80016f4 <currBlock_verifyRotate+0x284>)
 80014d4:	4613      	mov	r3, r2
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	4413      	add	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4413      	add	r3, r2
 80014de:	4403      	add	r3, r0
 80014e0:	440b      	add	r3, r1
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d002      	beq.n	80014ee <currBlock_verifyRotate+0x7e>
				return false;
 80014e8:	2300      	movs	r3, #0
 80014ea:	f000 bd44 	b.w	8001f76 <currBlock_verifyRotate+0xb06>
			testVar[1] = currBlock->BlockTwo[1] + 2;
 80014ee:	4b80      	ldr	r3, [pc, #512]	@ (80016f0 <currBlock_verifyRotate+0x280>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	3302      	adds	r3, #2
 80014f6:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockTwo[2] - 2;
 80014f8:	4b7d      	ldr	r3, [pc, #500]	@ (80016f0 <currBlock_verifyRotate+0x280>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	3b02      	subs	r3, #2
 8001500:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	68b9      	ldr	r1, [r7, #8]
 8001506:	487b      	ldr	r0, [pc, #492]	@ (80016f4 <currBlock_verifyRotate+0x284>)
 8001508:	4613      	mov	r3, r2
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	4413      	add	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
 8001512:	4403      	add	r3, r0
 8001514:	440b      	add	r3, r1
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d002      	beq.n	8001522 <currBlock_verifyRotate+0xb2>
				return false;
 800151c:	2300      	movs	r3, #0
 800151e:	f000 bd2a 	b.w	8001f76 <currBlock_verifyRotate+0xb06>
			testVar[1] = currBlock->BlockThree[1] + 1;
 8001522:	4b73      	ldr	r3, [pc, #460]	@ (80016f0 <currBlock_verifyRotate+0x280>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	695b      	ldr	r3, [r3, #20]
 8001528:	3301      	adds	r3, #1
 800152a:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockThree[2] - 1;
 800152c:	4b70      	ldr	r3, [pc, #448]	@ (80016f0 <currBlock_verifyRotate+0x280>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	3b01      	subs	r3, #1
 8001534:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	68b9      	ldr	r1, [r7, #8]
 800153a:	486e      	ldr	r0, [pc, #440]	@ (80016f4 <currBlock_verifyRotate+0x284>)
 800153c:	4613      	mov	r3, r2
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	4413      	add	r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	4413      	add	r3, r2
 8001546:	4403      	add	r3, r0
 8001548:	440b      	add	r3, r1
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d050      	beq.n	80015f2 <currBlock_verifyRotate+0x182>
				return false;
 8001550:	2300      	movs	r3, #0
 8001552:	f000 bd10 	b.w	8001f76 <currBlock_verifyRotate+0xb06>
			testVar[1] = currBlock->BlockOne[1] - 3;
 8001556:	4b66      	ldr	r3, [pc, #408]	@ (80016f0 <currBlock_verifyRotate+0x280>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	3b03      	subs	r3, #3
 800155e:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockOne[2] + 3;
 8001560:	4b63      	ldr	r3, [pc, #396]	@ (80016f0 <currBlock_verifyRotate+0x280>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	3303      	adds	r3, #3
 8001568:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	68b9      	ldr	r1, [r7, #8]
 800156e:	4861      	ldr	r0, [pc, #388]	@ (80016f4 <currBlock_verifyRotate+0x284>)
 8001570:	4613      	mov	r3, r2
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	4413      	add	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4413      	add	r3, r2
 800157a:	4403      	add	r3, r0
 800157c:	440b      	add	r3, r1
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d002      	beq.n	800158a <currBlock_verifyRotate+0x11a>
				return false;
 8001584:	2300      	movs	r3, #0
 8001586:	f000 bcf6 	b.w	8001f76 <currBlock_verifyRotate+0xb06>
			testVar[1] = currBlock->BlockTwo[1] - 2;
 800158a:	4b59      	ldr	r3, [pc, #356]	@ (80016f0 <currBlock_verifyRotate+0x280>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	3b02      	subs	r3, #2
 8001592:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockTwo[2] + 2;
 8001594:	4b56      	ldr	r3, [pc, #344]	@ (80016f0 <currBlock_verifyRotate+0x280>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	3302      	adds	r3, #2
 800159c:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	68b9      	ldr	r1, [r7, #8]
 80015a2:	4854      	ldr	r0, [pc, #336]	@ (80016f4 <currBlock_verifyRotate+0x284>)
 80015a4:	4613      	mov	r3, r2
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	4413      	add	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	4403      	add	r3, r0
 80015b0:	440b      	add	r3, r1
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d002      	beq.n	80015be <currBlock_verifyRotate+0x14e>
				return false;
 80015b8:	2300      	movs	r3, #0
 80015ba:	f000 bcdc 	b.w	8001f76 <currBlock_verifyRotate+0xb06>
			testVar[1] = currBlock->BlockThree[1] - 1;
 80015be:	4b4c      	ldr	r3, [pc, #304]	@ (80016f0 <currBlock_verifyRotate+0x280>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	695b      	ldr	r3, [r3, #20]
 80015c4:	3b01      	subs	r3, #1
 80015c6:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockThree[2] + 1;
 80015c8:	4b49      	ldr	r3, [pc, #292]	@ (80016f0 <currBlock_verifyRotate+0x280>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	3301      	adds	r3, #1
 80015d0:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	68b9      	ldr	r1, [r7, #8]
 80015d6:	4847      	ldr	r0, [pc, #284]	@ (80016f4 <currBlock_verifyRotate+0x284>)
 80015d8:	4613      	mov	r3, r2
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	4413      	add	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	4403      	add	r3, r0
 80015e4:	440b      	add	r3, r1
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d005      	beq.n	80015f8 <currBlock_verifyRotate+0x188>
				return false;
 80015ec:	2300      	movs	r3, #0
 80015ee:	f000 bcc2 	b.w	8001f76 <currBlock_verifyRotate+0xb06>
			break;
 80015f2:	bf00      	nop
 80015f4:	f000 bcbe 	b.w	8001f74 <currBlock_verifyRotate+0xb04>
			break;
 80015f8:	bf00      	nop
		}
	}

	case Square:{
		//no work
		break;
 80015fa:	f000 bcbb 	b.w	8001f74 <currBlock_verifyRotate+0xb04>
	}
	break;
	case LeftZigZag:{
		switch(currBlock->state){// only two rotations
 80015fe:	4b3c      	ldr	r3, [pc, #240]	@ (80016f0 <currBlock_verifyRotate+0x280>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001606:	2b00      	cmp	r3, #0
 8001608:	d002      	beq.n	8001610 <currBlock_verifyRotate+0x1a0>
 800160a:	2b01      	cmp	r3, #1
 800160c:	d032      	beq.n	8001674 <currBlock_verifyRotate+0x204>
			if(board[testVar[1]][testVar[2]] != Free){
				return false;
			}
			break;
		default:
			break;
 800160e:	e066      	b.n	80016de <currBlock_verifyRotate+0x26e>
			testVar[1] = currBlock->BlockOne[1];
 8001610:	4b37      	ldr	r3, [pc, #220]	@ (80016f0 <currBlock_verifyRotate+0x280>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockOne[2] - 2;
 8001618:	4b35      	ldr	r3, [pc, #212]	@ (80016f0 <currBlock_verifyRotate+0x280>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	3b02      	subs	r3, #2
 8001620:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	68b9      	ldr	r1, [r7, #8]
 8001626:	4833      	ldr	r0, [pc, #204]	@ (80016f4 <currBlock_verifyRotate+0x284>)
 8001628:	4613      	mov	r3, r2
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	4413      	add	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	4403      	add	r3, r0
 8001634:	440b      	add	r3, r1
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d002      	beq.n	8001642 <currBlock_verifyRotate+0x1d2>
				return false;
 800163c:	2300      	movs	r3, #0
 800163e:	f000 bc9a 	b.w	8001f76 <currBlock_verifyRotate+0xb06>
			testVar[1] = currBlock->BlockTwo[1] - 2;
 8001642:	4b2b      	ldr	r3, [pc, #172]	@ (80016f0 <currBlock_verifyRotate+0x280>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	3b02      	subs	r3, #2
 800164a:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockTwo[2];
 800164c:	4b28      	ldr	r3, [pc, #160]	@ (80016f0 <currBlock_verifyRotate+0x280>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	691b      	ldr	r3, [r3, #16]
 8001652:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	68b9      	ldr	r1, [r7, #8]
 8001658:	4826      	ldr	r0, [pc, #152]	@ (80016f4 <currBlock_verifyRotate+0x284>)
 800165a:	4613      	mov	r3, r2
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	4413      	add	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	4403      	add	r3, r0
 8001666:	440b      	add	r3, r1
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d034      	beq.n	80016d8 <currBlock_verifyRotate+0x268>
				return false;
 800166e:	2300      	movs	r3, #0
 8001670:	f000 bc81 	b.w	8001f76 <currBlock_verifyRotate+0xb06>
			testVar[1] = currBlock->BlockOne[1];
 8001674:	4b1e      	ldr	r3, [pc, #120]	@ (80016f0 <currBlock_verifyRotate+0x280>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockOne[2] + 2;
 800167c:	4b1c      	ldr	r3, [pc, #112]	@ (80016f0 <currBlock_verifyRotate+0x280>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	3302      	adds	r3, #2
 8001684:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	68b9      	ldr	r1, [r7, #8]
 800168a:	481a      	ldr	r0, [pc, #104]	@ (80016f4 <currBlock_verifyRotate+0x284>)
 800168c:	4613      	mov	r3, r2
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	4413      	add	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	4403      	add	r3, r0
 8001698:	440b      	add	r3, r1
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d002      	beq.n	80016a6 <currBlock_verifyRotate+0x236>
				return false;
 80016a0:	2300      	movs	r3, #0
 80016a2:	f000 bc68 	b.w	8001f76 <currBlock_verifyRotate+0xb06>
			testVar[1] = currBlock->BlockTwo[1] + 2;
 80016a6:	4b12      	ldr	r3, [pc, #72]	@ (80016f0 <currBlock_verifyRotate+0x280>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	3302      	adds	r3, #2
 80016ae:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockTwo[2];
 80016b0:	4b0f      	ldr	r3, [pc, #60]	@ (80016f0 <currBlock_verifyRotate+0x280>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	68b9      	ldr	r1, [r7, #8]
 80016bc:	480d      	ldr	r0, [pc, #52]	@ (80016f4 <currBlock_verifyRotate+0x284>)
 80016be:	4613      	mov	r3, r2
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4413      	add	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	4403      	add	r3, r0
 80016ca:	440b      	add	r3, r1
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d004      	beq.n	80016dc <currBlock_verifyRotate+0x26c>
				return false;
 80016d2:	2300      	movs	r3, #0
 80016d4:	f000 bc4f 	b.w	8001f76 <currBlock_verifyRotate+0xb06>
			break;
 80016d8:	bf00      	nop
 80016da:	e000      	b.n	80016de <currBlock_verifyRotate+0x26e>
			break;
 80016dc:	bf00      	nop
		}
	}
	case RightZigZag:{
		switch(currBlock->state){//only two rotations
 80016de:	4b04      	ldr	r3, [pc, #16]	@ (80016f0 <currBlock_verifyRotate+0x280>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d006      	beq.n	80016f8 <currBlock_verifyRotate+0x288>
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d036      	beq.n	800175c <currBlock_verifyRotate+0x2ec>
			if(board[testVar[1]][testVar[2]] != Free){
				return false;
			}
			break;
		default:
			break;
 80016ee:	e068      	b.n	80017c2 <currBlock_verifyRotate+0x352>
 80016f0:	200000d4 	.word	0x200000d4
 80016f4:	2000005c 	.word	0x2000005c
			testVar[1] = currBlock->BlockOne[1] - 2;// rightmost most block top to top left
 80016f8:	4b9f      	ldr	r3, [pc, #636]	@ (8001978 <currBlock_verifyRotate+0x508>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	3b02      	subs	r3, #2
 8001700:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockOne[2];
 8001702:	4b9d      	ldr	r3, [pc, #628]	@ (8001978 <currBlock_verifyRotate+0x508>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	68b9      	ldr	r1, [r7, #8]
 800170e:	489b      	ldr	r0, [pc, #620]	@ (800197c <currBlock_verifyRotate+0x50c>)
 8001710:	4613      	mov	r3, r2
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	4413      	add	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	4403      	add	r3, r0
 800171c:	440b      	add	r3, r1
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d002      	beq.n	800172a <currBlock_verifyRotate+0x2ba>
				return false;
 8001724:	2300      	movs	r3, #0
 8001726:	f000 bc26 	b.w	8001f76 <currBlock_verifyRotate+0xb06>
			testVar[1] = currBlock->BlockTwo[1];// top middle to bottom middle
 800172a:	4b93      	ldr	r3, [pc, #588]	@ (8001978 <currBlock_verifyRotate+0x508>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockTwo[2] - 2;
 8001732:	4b91      	ldr	r3, [pc, #580]	@ (8001978 <currBlock_verifyRotate+0x508>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	3b02      	subs	r3, #2
 800173a:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	68b9      	ldr	r1, [r7, #8]
 8001740:	488e      	ldr	r0, [pc, #568]	@ (800197c <currBlock_verifyRotate+0x50c>)
 8001742:	4613      	mov	r3, r2
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	4413      	add	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	4403      	add	r3, r0
 800174e:	440b      	add	r3, r1
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d032      	beq.n	80017bc <currBlock_verifyRotate+0x34c>
				return false;
 8001756:	2300      	movs	r3, #0
 8001758:	f000 bc0d 	b.w	8001f76 <currBlock_verifyRotate+0xb06>
			testVar[1] = currBlock->BlockOne[1] + 2;// rightmost most block top to top left inverse
 800175c:	4b86      	ldr	r3, [pc, #536]	@ (8001978 <currBlock_verifyRotate+0x508>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	3302      	adds	r3, #2
 8001764:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockOne[2];
 8001766:	4b84      	ldr	r3, [pc, #528]	@ (8001978 <currBlock_verifyRotate+0x508>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	68b9      	ldr	r1, [r7, #8]
 8001772:	4882      	ldr	r0, [pc, #520]	@ (800197c <currBlock_verifyRotate+0x50c>)
 8001774:	4613      	mov	r3, r2
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	4413      	add	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	4403      	add	r3, r0
 8001780:	440b      	add	r3, r1
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <currBlock_verifyRotate+0x31c>
				return false;
 8001788:	2300      	movs	r3, #0
 800178a:	e3f4      	b.n	8001f76 <currBlock_verifyRotate+0xb06>
			testVar[1] = currBlock->BlockTwo[1];// top middle to bottom middle inverse
 800178c:	4b7a      	ldr	r3, [pc, #488]	@ (8001978 <currBlock_verifyRotate+0x508>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockTwo[2] + 2;
 8001794:	4b78      	ldr	r3, [pc, #480]	@ (8001978 <currBlock_verifyRotate+0x508>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	3302      	adds	r3, #2
 800179c:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	68b9      	ldr	r1, [r7, #8]
 80017a2:	4876      	ldr	r0, [pc, #472]	@ (800197c <currBlock_verifyRotate+0x50c>)
 80017a4:	4613      	mov	r3, r2
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	4413      	add	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4413      	add	r3, r2
 80017ae:	4403      	add	r3, r0
 80017b0:	440b      	add	r3, r1
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d003      	beq.n	80017c0 <currBlock_verifyRotate+0x350>
				return false;
 80017b8:	2300      	movs	r3, #0
 80017ba:	e3dc      	b.n	8001f76 <currBlock_verifyRotate+0xb06>
			break;
 80017bc:	bf00      	nop
 80017be:	e000      	b.n	80017c2 <currBlock_verifyRotate+0x352>
			break;
 80017c0:	bf00      	nop
		}
	}
	case RightL:{
		switch(currBlock->state){// 4 rotations
 80017c2:	4b6d      	ldr	r3, [pc, #436]	@ (8001978 <currBlock_verifyRotate+0x508>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80017ca:	2b03      	cmp	r3, #3
 80017cc:	f200 813a 	bhi.w	8001a44 <currBlock_verifyRotate+0x5d4>
 80017d0:	a201      	add	r2, pc, #4	@ (adr r2, 80017d8 <currBlock_verifyRotate+0x368>)
 80017d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d6:	bf00      	nop
 80017d8:	080017e9 	.word	0x080017e9
 80017dc:	0800187f 	.word	0x0800187f
 80017e0:	08001915 	.word	0x08001915
 80017e4:	080019b1 	.word	0x080019b1
		case state1:
			testVar[1] = currBlock->BlockOne[1] - 1;//  mid right to mid bottom
 80017e8:	4b63      	ldr	r3, [pc, #396]	@ (8001978 <currBlock_verifyRotate+0x508>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockOne[2] - 1;
 80017f2:	4b61      	ldr	r3, [pc, #388]	@ (8001978 <currBlock_verifyRotate+0x508>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	3b01      	subs	r3, #1
 80017fa:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	68b9      	ldr	r1, [r7, #8]
 8001800:	485e      	ldr	r0, [pc, #376]	@ (800197c <currBlock_verifyRotate+0x50c>)
 8001802:	4613      	mov	r3, r2
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	4413      	add	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	4403      	add	r3, r0
 800180e:	440b      	add	r3, r1
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <currBlock_verifyRotate+0x3aa>
				return false;
 8001816:	2300      	movs	r3, #0
 8001818:	e3ad      	b.n	8001f76 <currBlock_verifyRotate+0xb06>
			}
			testVar[1] = currBlock->BlockTwo[1] + 1;// middle left to top middle
 800181a:	4b57      	ldr	r3, [pc, #348]	@ (8001978 <currBlock_verifyRotate+0x508>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	3301      	adds	r3, #1
 8001822:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockTwo[2] + 1;
 8001824:	4b54      	ldr	r3, [pc, #336]	@ (8001978 <currBlock_verifyRotate+0x508>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	3301      	adds	r3, #1
 800182c:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	68b9      	ldr	r1, [r7, #8]
 8001832:	4852      	ldr	r0, [pc, #328]	@ (800197c <currBlock_verifyRotate+0x50c>)
 8001834:	4613      	mov	r3, r2
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	4413      	add	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	4403      	add	r3, r0
 8001840:	440b      	add	r3, r1
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <currBlock_verifyRotate+0x3dc>
				return false;
 8001848:	2300      	movs	r3, #0
 800184a:	e394      	b.n	8001f76 <currBlock_verifyRotate+0xb06>
			}
			testVar[1] = currBlock->BlockThree[1] + 2;// top left to top right
 800184c:	4b4a      	ldr	r3, [pc, #296]	@ (8001978 <currBlock_verifyRotate+0x508>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	3302      	adds	r3, #2
 8001854:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockThree[2];
 8001856:	4b48      	ldr	r3, [pc, #288]	@ (8001978 <currBlock_verifyRotate+0x508>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	68b9      	ldr	r1, [r7, #8]
 8001862:	4846      	ldr	r0, [pc, #280]	@ (800197c <currBlock_verifyRotate+0x50c>)
 8001864:	4613      	mov	r3, r2
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	4413      	add	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	4403      	add	r3, r0
 8001870:	440b      	add	r3, r1
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	f000 80e7 	beq.w	8001a48 <currBlock_verifyRotate+0x5d8>
				return false;
 800187a:	2300      	movs	r3, #0
 800187c:	e37b      	b.n	8001f76 <currBlock_verifyRotate+0xb06>
			}
			break;
		case state2:
			testVar[1] = currBlock->BlockOne[1] - 1;//  mid bottom to mid left
 800187e:	4b3e      	ldr	r3, [pc, #248]	@ (8001978 <currBlock_verifyRotate+0x508>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	3b01      	subs	r3, #1
 8001886:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockOne[2] + 1;
 8001888:	4b3b      	ldr	r3, [pc, #236]	@ (8001978 <currBlock_verifyRotate+0x508>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	3301      	adds	r3, #1
 8001890:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	68b9      	ldr	r1, [r7, #8]
 8001896:	4839      	ldr	r0, [pc, #228]	@ (800197c <currBlock_verifyRotate+0x50c>)
 8001898:	4613      	mov	r3, r2
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	4413      	add	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	4403      	add	r3, r0
 80018a4:	440b      	add	r3, r1
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <currBlock_verifyRotate+0x440>
				return false;
 80018ac:	2300      	movs	r3, #0
 80018ae:	e362      	b.n	8001f76 <currBlock_verifyRotate+0xb06>
			}
			testVar[1] = currBlock->BlockTwo[1] + 1;//  top middle to middle right
 80018b0:	4b31      	ldr	r3, [pc, #196]	@ (8001978 <currBlock_verifyRotate+0x508>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	3301      	adds	r3, #1
 80018b8:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockTwo[2] - 1;
 80018ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001978 <currBlock_verifyRotate+0x508>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	3b01      	subs	r3, #1
 80018c2:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	68b9      	ldr	r1, [r7, #8]
 80018c8:	482c      	ldr	r0, [pc, #176]	@ (800197c <currBlock_verifyRotate+0x50c>)
 80018ca:	4613      	mov	r3, r2
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	4413      	add	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	4403      	add	r3, r0
 80018d6:	440b      	add	r3, r1
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <currBlock_verifyRotate+0x472>
				return false;
 80018de:	2300      	movs	r3, #0
 80018e0:	e349      	b.n	8001f76 <currBlock_verifyRotate+0xb06>
			}
			testVar[1] = currBlock->BlockThree[1];//  top right to bottom right
 80018e2:	4b25      	ldr	r3, [pc, #148]	@ (8001978 <currBlock_verifyRotate+0x508>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	695b      	ldr	r3, [r3, #20]
 80018e8:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockThree[2] - 2;
 80018ea:	4b23      	ldr	r3, [pc, #140]	@ (8001978 <currBlock_verifyRotate+0x508>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	3b02      	subs	r3, #2
 80018f2:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	68b9      	ldr	r1, [r7, #8]
 80018f8:	4820      	ldr	r0, [pc, #128]	@ (800197c <currBlock_verifyRotate+0x50c>)
 80018fa:	4613      	mov	r3, r2
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	4413      	add	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	4403      	add	r3, r0
 8001906:	440b      	add	r3, r1
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	f000 809e 	beq.w	8001a4c <currBlock_verifyRotate+0x5dc>
				return false;
 8001910:	2300      	movs	r3, #0
 8001912:	e330      	b.n	8001f76 <currBlock_verifyRotate+0xb06>
			}
			break;
		case state3:
			testVar[1] = currBlock->BlockOne[1] + 1;//  mid left to mid top
 8001914:	4b18      	ldr	r3, [pc, #96]	@ (8001978 <currBlock_verifyRotate+0x508>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	3301      	adds	r3, #1
 800191c:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockOne[2] + 1;
 800191e:	4b16      	ldr	r3, [pc, #88]	@ (8001978 <currBlock_verifyRotate+0x508>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	3301      	adds	r3, #1
 8001926:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	68b9      	ldr	r1, [r7, #8]
 800192c:	4813      	ldr	r0, [pc, #76]	@ (800197c <currBlock_verifyRotate+0x50c>)
 800192e:	4613      	mov	r3, r2
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	4413      	add	r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	4413      	add	r3, r2
 8001938:	4403      	add	r3, r0
 800193a:	440b      	add	r3, r1
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <currBlock_verifyRotate+0x4d6>
				return false;
 8001942:	2300      	movs	r3, #0
 8001944:	e317      	b.n	8001f76 <currBlock_verifyRotate+0xb06>
			}
			testVar[1] = currBlock->BlockTwo[1] - 1;//  middle right mid bottom
 8001946:	4b0c      	ldr	r3, [pc, #48]	@ (8001978 <currBlock_verifyRotate+0x508>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	3b01      	subs	r3, #1
 800194e:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockTwo[2] - 1;
 8001950:	4b09      	ldr	r3, [pc, #36]	@ (8001978 <currBlock_verifyRotate+0x508>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	3b01      	subs	r3, #1
 8001958:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	68b9      	ldr	r1, [r7, #8]
 800195e:	4807      	ldr	r0, [pc, #28]	@ (800197c <currBlock_verifyRotate+0x50c>)
 8001960:	4613      	mov	r3, r2
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	4413      	add	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	4403      	add	r3, r0
 800196c:	440b      	add	r3, r1
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d005      	beq.n	8001980 <currBlock_verifyRotate+0x510>
				return false;
 8001974:	2300      	movs	r3, #0
 8001976:	e2fe      	b.n	8001f76 <currBlock_verifyRotate+0xb06>
 8001978:	200000d4 	.word	0x200000d4
 800197c:	2000005c 	.word	0x2000005c
			}
			testVar[1] = currBlock->BlockThree[1] - 2;//  bottom right to bottom left
 8001980:	4b96      	ldr	r3, [pc, #600]	@ (8001bdc <currBlock_verifyRotate+0x76c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	3b02      	subs	r3, #2
 8001988:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockThree[2];
 800198a:	4b94      	ldr	r3, [pc, #592]	@ (8001bdc <currBlock_verifyRotate+0x76c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	68b9      	ldr	r1, [r7, #8]
 8001996:	4892      	ldr	r0, [pc, #584]	@ (8001be0 <currBlock_verifyRotate+0x770>)
 8001998:	4613      	mov	r3, r2
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	4413      	add	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	4403      	add	r3, r0
 80019a4:	440b      	add	r3, r1
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d051      	beq.n	8001a50 <currBlock_verifyRotate+0x5e0>
				return false;
 80019ac:	2300      	movs	r3, #0
 80019ae:	e2e2      	b.n	8001f76 <currBlock_verifyRotate+0xb06>
			}
			break;
		case state4:
			testVar[1] = currBlock->BlockOne[1] + 1;//  mid top to mid right
 80019b0:	4b8a      	ldr	r3, [pc, #552]	@ (8001bdc <currBlock_verifyRotate+0x76c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	3301      	adds	r3, #1
 80019b8:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockOne[2] - 1;
 80019ba:	4b88      	ldr	r3, [pc, #544]	@ (8001bdc <currBlock_verifyRotate+0x76c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	3b01      	subs	r3, #1
 80019c2:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	68b9      	ldr	r1, [r7, #8]
 80019c8:	4885      	ldr	r0, [pc, #532]	@ (8001be0 <currBlock_verifyRotate+0x770>)
 80019ca:	4613      	mov	r3, r2
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	4413      	add	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4413      	add	r3, r2
 80019d4:	4403      	add	r3, r0
 80019d6:	440b      	add	r3, r1
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <currBlock_verifyRotate+0x572>
				return false;
 80019de:	2300      	movs	r3, #0
 80019e0:	e2c9      	b.n	8001f76 <currBlock_verifyRotate+0xb06>
			}
			testVar[1] = currBlock->BlockTwo[1] - 1;//  middle right mid bottom
 80019e2:	4b7e      	ldr	r3, [pc, #504]	@ (8001bdc <currBlock_verifyRotate+0x76c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	3b01      	subs	r3, #1
 80019ea:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockTwo[2] - 1;
 80019ec:	4b7b      	ldr	r3, [pc, #492]	@ (8001bdc <currBlock_verifyRotate+0x76c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	68b9      	ldr	r1, [r7, #8]
 80019fa:	4879      	ldr	r0, [pc, #484]	@ (8001be0 <currBlock_verifyRotate+0x770>)
 80019fc:	4613      	mov	r3, r2
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	4413      	add	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	4403      	add	r3, r0
 8001a08:	440b      	add	r3, r1
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <currBlock_verifyRotate+0x5a4>
				return false;
 8001a10:	2300      	movs	r3, #0
 8001a12:	e2b0      	b.n	8001f76 <currBlock_verifyRotate+0xb06>
			}
			testVar[1] = currBlock->BlockThree[1] - 2;//  bottom right to bottom left
 8001a14:	4b71      	ldr	r3, [pc, #452]	@ (8001bdc <currBlock_verifyRotate+0x76c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	3b02      	subs	r3, #2
 8001a1c:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockThree[2];
 8001a1e:	4b6f      	ldr	r3, [pc, #444]	@ (8001bdc <currBlock_verifyRotate+0x76c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	68b9      	ldr	r1, [r7, #8]
 8001a2a:	486d      	ldr	r0, [pc, #436]	@ (8001be0 <currBlock_verifyRotate+0x770>)
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	4413      	add	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	4403      	add	r3, r0
 8001a38:	440b      	add	r3, r1
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d009      	beq.n	8001a54 <currBlock_verifyRotate+0x5e4>
				return false;
 8001a40:	2300      	movs	r3, #0
 8001a42:	e298      	b.n	8001f76 <currBlock_verifyRotate+0xb06>
			}
			break;
		default:
			break;
 8001a44:	bf00      	nop
 8001a46:	e006      	b.n	8001a56 <currBlock_verifyRotate+0x5e6>
			break;
 8001a48:	bf00      	nop
 8001a4a:	e004      	b.n	8001a56 <currBlock_verifyRotate+0x5e6>
			break;
 8001a4c:	bf00      	nop
 8001a4e:	e002      	b.n	8001a56 <currBlock_verifyRotate+0x5e6>
			break;
 8001a50:	bf00      	nop
 8001a52:	e000      	b.n	8001a56 <currBlock_verifyRotate+0x5e6>
			break;
 8001a54:	bf00      	nop
		}
	}
	case LeftL:{
		switch(currBlock->state){// 4 rotations
 8001a56:	4b61      	ldr	r3, [pc, #388]	@ (8001bdc <currBlock_verifyRotate+0x76c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001a5e:	2b03      	cmp	r3, #3
 8001a60:	f200 813b 	bhi.w	8001cda <currBlock_verifyRotate+0x86a>
 8001a64:	a201      	add	r2, pc, #4	@ (adr r2, 8001a6c <currBlock_verifyRotate+0x5fc>)
 8001a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a6a:	bf00      	nop
 8001a6c:	08001a7d 	.word	0x08001a7d
 8001a70:	08001b13 	.word	0x08001b13
 8001a74:	08001ba9 	.word	0x08001ba9
 8001a78:	08001c47 	.word	0x08001c47
		case state1:
			testVar[1] = currBlock->BlockOne[1] + 1;//  mid left to mid top
 8001a7c:	4b57      	ldr	r3, [pc, #348]	@ (8001bdc <currBlock_verifyRotate+0x76c>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	3301      	adds	r3, #1
 8001a84:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockOne[2] + 1;
 8001a86:	4b55      	ldr	r3, [pc, #340]	@ (8001bdc <currBlock_verifyRotate+0x76c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	68b9      	ldr	r1, [r7, #8]
 8001a94:	4852      	ldr	r0, [pc, #328]	@ (8001be0 <currBlock_verifyRotate+0x770>)
 8001a96:	4613      	mov	r3, r2
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	4413      	add	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	4403      	add	r3, r0
 8001aa2:	440b      	add	r3, r1
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <currBlock_verifyRotate+0x63e>
				return false;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	e263      	b.n	8001f76 <currBlock_verifyRotate+0xb06>
			}
			testVar[1] = currBlock->BlockTwo[1] - 1;// middle right to bottom middle
 8001aae:	4b4b      	ldr	r3, [pc, #300]	@ (8001bdc <currBlock_verifyRotate+0x76c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockTwo[2] - 1;
 8001ab8:	4b48      	ldr	r3, [pc, #288]	@ (8001bdc <currBlock_verifyRotate+0x76c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	68b9      	ldr	r1, [r7, #8]
 8001ac6:	4846      	ldr	r0, [pc, #280]	@ (8001be0 <currBlock_verifyRotate+0x770>)
 8001ac8:	4613      	mov	r3, r2
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	4413      	add	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	4403      	add	r3, r0
 8001ad4:	440b      	add	r3, r1
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <currBlock_verifyRotate+0x670>
				return false;
 8001adc:	2300      	movs	r3, #0
 8001ade:	e24a      	b.n	8001f76 <currBlock_verifyRotate+0xb06>
			}
			testVar[1] = currBlock->BlockThree[1];// top right to bottom right
 8001ae0:	4b3e      	ldr	r3, [pc, #248]	@ (8001bdc <currBlock_verifyRotate+0x76c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockThree[2] - 2;
 8001ae8:	4b3c      	ldr	r3, [pc, #240]	@ (8001bdc <currBlock_verifyRotate+0x76c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	3b02      	subs	r3, #2
 8001af0:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	68b9      	ldr	r1, [r7, #8]
 8001af6:	483a      	ldr	r0, [pc, #232]	@ (8001be0 <currBlock_verifyRotate+0x770>)
 8001af8:	4613      	mov	r3, r2
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	4413      	add	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	4403      	add	r3, r0
 8001b04:	440b      	add	r3, r1
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f000 80e8 	beq.w	8001cde <currBlock_verifyRotate+0x86e>
				return false;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	e231      	b.n	8001f76 <currBlock_verifyRotate+0xb06>
			}
			break;
		case state2:
			testVar[1] = currBlock->BlockOne[1] + 1;//   mid top to mid right
 8001b12:	4b32      	ldr	r3, [pc, #200]	@ (8001bdc <currBlock_verifyRotate+0x76c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockOne[2] - 1;
 8001b1c:	4b2f      	ldr	r3, [pc, #188]	@ (8001bdc <currBlock_verifyRotate+0x76c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	68b9      	ldr	r1, [r7, #8]
 8001b2a:	482d      	ldr	r0, [pc, #180]	@ (8001be0 <currBlock_verifyRotate+0x770>)
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	4413      	add	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	4413      	add	r3, r2
 8001b36:	4403      	add	r3, r0
 8001b38:	440b      	add	r3, r1
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <currBlock_verifyRotate+0x6d4>
				return false;
 8001b40:	2300      	movs	r3, #0
 8001b42:	e218      	b.n	8001f76 <currBlock_verifyRotate+0xb06>
			}
			testVar[1] = currBlock->BlockTwo[1] - 1;//  bottom middle to middle left
 8001b44:	4b25      	ldr	r3, [pc, #148]	@ (8001bdc <currBlock_verifyRotate+0x76c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockTwo[2] + 1;
 8001b4e:	4b23      	ldr	r3, [pc, #140]	@ (8001bdc <currBlock_verifyRotate+0x76c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	3301      	adds	r3, #1
 8001b56:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	68b9      	ldr	r1, [r7, #8]
 8001b5c:	4820      	ldr	r0, [pc, #128]	@ (8001be0 <currBlock_verifyRotate+0x770>)
 8001b5e:	4613      	mov	r3, r2
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	4413      	add	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	4403      	add	r3, r0
 8001b6a:	440b      	add	r3, r1
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <currBlock_verifyRotate+0x706>
				return false;
 8001b72:	2300      	movs	r3, #0
 8001b74:	e1ff      	b.n	8001f76 <currBlock_verifyRotate+0xb06>
			}
			testVar[1] = currBlock->BlockThree[1] - 2;//  bottom right to bottom left
 8001b76:	4b19      	ldr	r3, [pc, #100]	@ (8001bdc <currBlock_verifyRotate+0x76c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	695b      	ldr	r3, [r3, #20]
 8001b7c:	3b02      	subs	r3, #2
 8001b7e:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockThree[2];
 8001b80:	4b16      	ldr	r3, [pc, #88]	@ (8001bdc <currBlock_verifyRotate+0x76c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	68b9      	ldr	r1, [r7, #8]
 8001b8c:	4814      	ldr	r0, [pc, #80]	@ (8001be0 <currBlock_verifyRotate+0x770>)
 8001b8e:	4613      	mov	r3, r2
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	4413      	add	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	4403      	add	r3, r0
 8001b9a:	440b      	add	r3, r1
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 809f 	beq.w	8001ce2 <currBlock_verifyRotate+0x872>
				return false;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	e1e6      	b.n	8001f76 <currBlock_verifyRotate+0xb06>
			}
			break;
		case state3:
			testVar[1] = currBlock->BlockOne[1] - 1;//    mid right mid bottom
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8001bdc <currBlock_verifyRotate+0x76c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockOne[2] - 1;
 8001bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bdc <currBlock_verifyRotate+0x76c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	68b9      	ldr	r1, [r7, #8]
 8001bc0:	4807      	ldr	r0, [pc, #28]	@ (8001be0 <currBlock_verifyRotate+0x770>)
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	4413      	add	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	4403      	add	r3, r0
 8001bce:	440b      	add	r3, r1
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d006      	beq.n	8001be4 <currBlock_verifyRotate+0x774>
				return false;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	e1cd      	b.n	8001f76 <currBlock_verifyRotate+0xb06>
 8001bda:	bf00      	nop
 8001bdc:	200000d4 	.word	0x200000d4
 8001be0:	2000005c 	.word	0x2000005c
			}
			testVar[1] = currBlock->BlockTwo[1] + 1;//   middle left to middle top
 8001be4:	4b94      	ldr	r3, [pc, #592]	@ (8001e38 <currBlock_verifyRotate+0x9c8>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	3301      	adds	r3, #1
 8001bec:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockTwo[2] + 1;
 8001bee:	4b92      	ldr	r3, [pc, #584]	@ (8001e38 <currBlock_verifyRotate+0x9c8>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	68b9      	ldr	r1, [r7, #8]
 8001bfc:	488f      	ldr	r0, [pc, #572]	@ (8001e3c <currBlock_verifyRotate+0x9cc>)
 8001bfe:	4613      	mov	r3, r2
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	4413      	add	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	4403      	add	r3, r0
 8001c0a:	440b      	add	r3, r1
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <currBlock_verifyRotate+0x7a6>
				return false;
 8001c12:	2300      	movs	r3, #0
 8001c14:	e1af      	b.n	8001f76 <currBlock_verifyRotate+0xb06>
			}
			testVar[1] = currBlock->BlockThree[1];//   bottom left to top left
 8001c16:	4b88      	ldr	r3, [pc, #544]	@ (8001e38 <currBlock_verifyRotate+0x9c8>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	695b      	ldr	r3, [r3, #20]
 8001c1c:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockThree[2] + 2;
 8001c1e:	4b86      	ldr	r3, [pc, #536]	@ (8001e38 <currBlock_verifyRotate+0x9c8>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	3302      	adds	r3, #2
 8001c26:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	68b9      	ldr	r1, [r7, #8]
 8001c2c:	4883      	ldr	r0, [pc, #524]	@ (8001e3c <currBlock_verifyRotate+0x9cc>)
 8001c2e:	4613      	mov	r3, r2
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	4413      	add	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	4403      	add	r3, r0
 8001c3a:	440b      	add	r3, r1
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d051      	beq.n	8001ce6 <currBlock_verifyRotate+0x876>
				return false;
 8001c42:	2300      	movs	r3, #0
 8001c44:	e197      	b.n	8001f76 <currBlock_verifyRotate+0xb06>
			}
			break;
		case state4:
			testVar[1] = currBlock->BlockOne[1] - 1;//   mid bottom to mid left
 8001c46:	4b7c      	ldr	r3, [pc, #496]	@ (8001e38 <currBlock_verifyRotate+0x9c8>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockOne[2] + 1;
 8001c50:	4b79      	ldr	r3, [pc, #484]	@ (8001e38 <currBlock_verifyRotate+0x9c8>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	3301      	adds	r3, #1
 8001c58:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	68b9      	ldr	r1, [r7, #8]
 8001c5e:	4877      	ldr	r0, [pc, #476]	@ (8001e3c <currBlock_verifyRotate+0x9cc>)
 8001c60:	4613      	mov	r3, r2
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	4413      	add	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	4403      	add	r3, r0
 8001c6c:	440b      	add	r3, r1
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <currBlock_verifyRotate+0x808>
				return false;
 8001c74:	2300      	movs	r3, #0
 8001c76:	e17e      	b.n	8001f76 <currBlock_verifyRotate+0xb06>
			}
			testVar[1] = currBlock->BlockTwo[1] + 1;//    middle top to mid right
 8001c78:	4b6f      	ldr	r3, [pc, #444]	@ (8001e38 <currBlock_verifyRotate+0x9c8>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockTwo[2] - 1;
 8001c82:	4b6d      	ldr	r3, [pc, #436]	@ (8001e38 <currBlock_verifyRotate+0x9c8>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	68b9      	ldr	r1, [r7, #8]
 8001c90:	486a      	ldr	r0, [pc, #424]	@ (8001e3c <currBlock_verifyRotate+0x9cc>)
 8001c92:	4613      	mov	r3, r2
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	4413      	add	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	4403      	add	r3, r0
 8001c9e:	440b      	add	r3, r1
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <currBlock_verifyRotate+0x83a>
				return false;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	e165      	b.n	8001f76 <currBlock_verifyRotate+0xb06>
			}
			testVar[1] = currBlock->BlockThree[1] + 2;//   top left to top right
 8001caa:	4b63      	ldr	r3, [pc, #396]	@ (8001e38 <currBlock_verifyRotate+0x9c8>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	695b      	ldr	r3, [r3, #20]
 8001cb0:	3302      	adds	r3, #2
 8001cb2:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockThree[2];
 8001cb4:	4b60      	ldr	r3, [pc, #384]	@ (8001e38 <currBlock_verifyRotate+0x9c8>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	68b9      	ldr	r1, [r7, #8]
 8001cc0:	485e      	ldr	r0, [pc, #376]	@ (8001e3c <currBlock_verifyRotate+0x9cc>)
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	4413      	add	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	4403      	add	r3, r0
 8001cce:	440b      	add	r3, r1
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d009      	beq.n	8001cea <currBlock_verifyRotate+0x87a>
				return false;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	e14d      	b.n	8001f76 <currBlock_verifyRotate+0xb06>
			}
			break;
		default:
			break;
 8001cda:	bf00      	nop
 8001cdc:	e006      	b.n	8001cec <currBlock_verifyRotate+0x87c>
			break;
 8001cde:	bf00      	nop
 8001ce0:	e004      	b.n	8001cec <currBlock_verifyRotate+0x87c>
			break;
 8001ce2:	bf00      	nop
 8001ce4:	e002      	b.n	8001cec <currBlock_verifyRotate+0x87c>
			break;
 8001ce6:	bf00      	nop
 8001ce8:	e000      	b.n	8001cec <currBlock_verifyRotate+0x87c>
			break;
 8001cea:	bf00      	nop
		}
	}
	case smollPP:{
		switch(currBlock->state){// 4rotations only 3 blocks as center is centered
 8001cec:	4b52      	ldr	r3, [pc, #328]	@ (8001e38 <currBlock_verifyRotate+0x9c8>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001cf4:	2b03      	cmp	r3, #3
 8001cf6:	f200 8135 	bhi.w	8001f64 <currBlock_verifyRotate+0xaf4>
 8001cfa:	a201      	add	r2, pc, #4	@ (adr r2, 8001d00 <currBlock_verifyRotate+0x890>)
 8001cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d00:	08001d11 	.word	0x08001d11
 8001d04:	08001da5 	.word	0x08001da5
 8001d08:	08001e41 	.word	0x08001e41
 8001d0c:	08001ed3 	.word	0x08001ed3
		case state1:
			testVar[1] = currBlock->BlockOne[1];//  bottom left to top left
 8001d10:	4b49      	ldr	r3, [pc, #292]	@ (8001e38 <currBlock_verifyRotate+0x9c8>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockOne[2] + 2;
 8001d18:	4b47      	ldr	r3, [pc, #284]	@ (8001e38 <currBlock_verifyRotate+0x9c8>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	3302      	adds	r3, #2
 8001d20:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	68b9      	ldr	r1, [r7, #8]
 8001d26:	4845      	ldr	r0, [pc, #276]	@ (8001e3c <currBlock_verifyRotate+0x9cc>)
 8001d28:	4613      	mov	r3, r2
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	4413      	add	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	4403      	add	r3, r0
 8001d34:	440b      	add	r3, r1
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <currBlock_verifyRotate+0x8d0>
				return false;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	e11a      	b.n	8001f76 <currBlock_verifyRotate+0xb06>
			}
			testVar[1] = currBlock->BlockTwo[1] + 1;// middle left to top middle
 8001d40:	4b3d      	ldr	r3, [pc, #244]	@ (8001e38 <currBlock_verifyRotate+0x9c8>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	3301      	adds	r3, #1
 8001d48:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockTwo[2] + 1;
 8001d4a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e38 <currBlock_verifyRotate+0x9c8>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	3301      	adds	r3, #1
 8001d52:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	68b9      	ldr	r1, [r7, #8]
 8001d58:	4838      	ldr	r0, [pc, #224]	@ (8001e3c <currBlock_verifyRotate+0x9cc>)
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	4413      	add	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	4403      	add	r3, r0
 8001d66:	440b      	add	r3, r1
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <currBlock_verifyRotate+0x902>
				return false;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	e101      	b.n	8001f76 <currBlock_verifyRotate+0xb06>
			}
			testVar[1] = currBlock->BlockThree[1] + 2;// top left to top right
 8001d72:	4b31      	ldr	r3, [pc, #196]	@ (8001e38 <currBlock_verifyRotate+0x9c8>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	695b      	ldr	r3, [r3, #20]
 8001d78:	3302      	adds	r3, #2
 8001d7a:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockThree[2];
 8001d7c:	4b2e      	ldr	r3, [pc, #184]	@ (8001e38 <currBlock_verifyRotate+0x9c8>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	68b9      	ldr	r1, [r7, #8]
 8001d88:	482c      	ldr	r0, [pc, #176]	@ (8001e3c <currBlock_verifyRotate+0x9cc>)
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	4413      	add	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4413      	add	r3, r2
 8001d94:	4403      	add	r3, r0
 8001d96:	440b      	add	r3, r1
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f000 80e4 	beq.w	8001f68 <currBlock_verifyRotate+0xaf8>
				return false;
 8001da0:	2300      	movs	r3, #0
 8001da2:	e0e8      	b.n	8001f76 <currBlock_verifyRotate+0xb06>
			}
			break;
		case state2:
			testVar[1] = currBlock->BlockOne[1] + 2;// top left to top right
 8001da4:	4b24      	ldr	r3, [pc, #144]	@ (8001e38 <currBlock_verifyRotate+0x9c8>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	3302      	adds	r3, #2
 8001dac:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockOne[2];
 8001dae:	4b22      	ldr	r3, [pc, #136]	@ (8001e38 <currBlock_verifyRotate+0x9c8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	68b9      	ldr	r1, [r7, #8]
 8001dba:	4820      	ldr	r0, [pc, #128]	@ (8001e3c <currBlock_verifyRotate+0x9cc>)
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	4413      	add	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	4403      	add	r3, r0
 8001dc8:	440b      	add	r3, r1
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <currBlock_verifyRotate+0x964>
				return false;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	e0d0      	b.n	8001f76 <currBlock_verifyRotate+0xb06>
			}
			testVar[1] = currBlock->BlockTwo[1] + 1;// middle top to  middle right
 8001dd4:	4b18      	ldr	r3, [pc, #96]	@ (8001e38 <currBlock_verifyRotate+0x9c8>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockTwo[2] - 1;
 8001dde:	4b16      	ldr	r3, [pc, #88]	@ (8001e38 <currBlock_verifyRotate+0x9c8>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	3b01      	subs	r3, #1
 8001de6:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	68b9      	ldr	r1, [r7, #8]
 8001dec:	4813      	ldr	r0, [pc, #76]	@ (8001e3c <currBlock_verifyRotate+0x9cc>)
 8001dee:	4613      	mov	r3, r2
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	4413      	add	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	4403      	add	r3, r0
 8001dfa:	440b      	add	r3, r1
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <currBlock_verifyRotate+0x996>
				return false;
 8001e02:	2300      	movs	r3, #0
 8001e04:	e0b7      	b.n	8001f76 <currBlock_verifyRotate+0xb06>
			}
			testVar[1] = currBlock->BlockThree[1];// top right to bottom right
 8001e06:	4b0c      	ldr	r3, [pc, #48]	@ (8001e38 <currBlock_verifyRotate+0x9c8>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockThree[2] - 2;
 8001e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e38 <currBlock_verifyRotate+0x9c8>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	3b02      	subs	r3, #2
 8001e16:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	68b9      	ldr	r1, [r7, #8]
 8001e1c:	4807      	ldr	r0, [pc, #28]	@ (8001e3c <currBlock_verifyRotate+0x9cc>)
 8001e1e:	4613      	mov	r3, r2
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	4413      	add	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4413      	add	r3, r2
 8001e28:	4403      	add	r3, r0
 8001e2a:	440b      	add	r3, r1
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f000 809c 	beq.w	8001f6c <currBlock_verifyRotate+0xafc>
				return false;
 8001e34:	2300      	movs	r3, #0
 8001e36:	e09e      	b.n	8001f76 <currBlock_verifyRotate+0xb06>
 8001e38:	200000d4 	.word	0x200000d4
 8001e3c:	2000005c 	.word	0x2000005c
			}
			break;
		case state3:
			testVar[1] = currBlock->BlockOne[1];//top right to bottom right
 8001e40:	4b50      	ldr	r3, [pc, #320]	@ (8001f84 <currBlock_verifyRotate+0xb14>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockOne[2] - 2;
 8001e48:	4b4e      	ldr	r3, [pc, #312]	@ (8001f84 <currBlock_verifyRotate+0xb14>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	3b02      	subs	r3, #2
 8001e50:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	68b9      	ldr	r1, [r7, #8]
 8001e56:	484c      	ldr	r0, [pc, #304]	@ (8001f88 <currBlock_verifyRotate+0xb18>)
 8001e58:	4613      	mov	r3, r2
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	4413      	add	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	4403      	add	r3, r0
 8001e64:	440b      	add	r3, r1
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <currBlock_verifyRotate+0xa00>
				return false;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	e082      	b.n	8001f76 <currBlock_verifyRotate+0xb06>
			}
			testVar[1] = currBlock->BlockTwo[1] - 1;// middle right to  middle bottom
 8001e70:	4b44      	ldr	r3, [pc, #272]	@ (8001f84 <currBlock_verifyRotate+0xb14>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockTwo[2] - 1;
 8001e7a:	4b42      	ldr	r3, [pc, #264]	@ (8001f84 <currBlock_verifyRotate+0xb14>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	3b01      	subs	r3, #1
 8001e82:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	68b9      	ldr	r1, [r7, #8]
 8001e88:	483f      	ldr	r0, [pc, #252]	@ (8001f88 <currBlock_verifyRotate+0xb18>)
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	4413      	add	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	4403      	add	r3, r0
 8001e96:	440b      	add	r3, r1
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <currBlock_verifyRotate+0xa32>
				return false;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	e069      	b.n	8001f76 <currBlock_verifyRotate+0xb06>
			}
			testVar[1] = currBlock->BlockThree[1] - 2;// bottom right to bottom left
 8001ea2:	4b38      	ldr	r3, [pc, #224]	@ (8001f84 <currBlock_verifyRotate+0xb14>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	3b02      	subs	r3, #2
 8001eaa:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockThree[2];
 8001eac:	4b35      	ldr	r3, [pc, #212]	@ (8001f84 <currBlock_verifyRotate+0xb14>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	68b9      	ldr	r1, [r7, #8]
 8001eb8:	4833      	ldr	r0, [pc, #204]	@ (8001f88 <currBlock_verifyRotate+0xb18>)
 8001eba:	4613      	mov	r3, r2
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	4413      	add	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4413      	add	r3, r2
 8001ec4:	4403      	add	r3, r0
 8001ec6:	440b      	add	r3, r1
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d050      	beq.n	8001f70 <currBlock_verifyRotate+0xb00>
				return false;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	e051      	b.n	8001f76 <currBlock_verifyRotate+0xb06>
			}
			break;
		case state4:
			testVar[1] = currBlock->BlockOne[1] - 2;// bottom right to bottom left
 8001ed2:	4b2c      	ldr	r3, [pc, #176]	@ (8001f84 <currBlock_verifyRotate+0xb14>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	3b02      	subs	r3, #2
 8001eda:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockOne[2];
 8001edc:	4b29      	ldr	r3, [pc, #164]	@ (8001f84 <currBlock_verifyRotate+0xb14>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	68b9      	ldr	r1, [r7, #8]
 8001ee8:	4827      	ldr	r0, [pc, #156]	@ (8001f88 <currBlock_verifyRotate+0xb18>)
 8001eea:	4613      	mov	r3, r2
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	4413      	add	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	4403      	add	r3, r0
 8001ef6:	440b      	add	r3, r1
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <currBlock_verifyRotate+0xa92>
				return false;
 8001efe:	2300      	movs	r3, #0
 8001f00:	e039      	b.n	8001f76 <currBlock_verifyRotate+0xb06>
			}
			testVar[1] = currBlock->BlockTwo[1] - 1;// middle bottom to  middle left
 8001f02:	4b20      	ldr	r3, [pc, #128]	@ (8001f84 <currBlock_verifyRotate+0xb14>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockTwo[2] + 1;
 8001f0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001f84 <currBlock_verifyRotate+0xb14>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	3301      	adds	r3, #1
 8001f14:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	68b9      	ldr	r1, [r7, #8]
 8001f1a:	481b      	ldr	r0, [pc, #108]	@ (8001f88 <currBlock_verifyRotate+0xb18>)
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	4413      	add	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	4403      	add	r3, r0
 8001f28:	440b      	add	r3, r1
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <currBlock_verifyRotate+0xac4>
				return false;
 8001f30:	2300      	movs	r3, #0
 8001f32:	e020      	b.n	8001f76 <currBlock_verifyRotate+0xb06>
			}
			testVar[1] = currBlock->BlockThree[1];// bottom left to top left
 8001f34:	4b13      	ldr	r3, [pc, #76]	@ (8001f84 <currBlock_verifyRotate+0xb14>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	607b      	str	r3, [r7, #4]
			testVar[2] = currBlock->BlockThree[2] + 2;
 8001f3c:	4b11      	ldr	r3, [pc, #68]	@ (8001f84 <currBlock_verifyRotate+0xb14>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	3302      	adds	r3, #2
 8001f44:	60bb      	str	r3, [r7, #8]
			if(board[testVar[1]][testVar[2]] != Free){
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	68b9      	ldr	r1, [r7, #8]
 8001f4a:	480f      	ldr	r0, [pc, #60]	@ (8001f88 <currBlock_verifyRotate+0xb18>)
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	4413      	add	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	4403      	add	r3, r0
 8001f58:	440b      	add	r3, r1
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <currBlock_verifyRotate+0xaf4>
				return false;
 8001f60:	2300      	movs	r3, #0
 8001f62:	e008      	b.n	8001f76 <currBlock_verifyRotate+0xb06>
			}
		default:
			break;
 8001f64:	bf00      	nop
 8001f66:	e004      	b.n	8001f72 <currBlock_verifyRotate+0xb02>
			break;
 8001f68:	bf00      	nop
 8001f6a:	e002      	b.n	8001f72 <currBlock_verifyRotate+0xb02>
			break;
 8001f6c:	bf00      	nop
 8001f6e:	e000      	b.n	8001f72 <currBlock_verifyRotate+0xb02>
			break;
 8001f70:	bf00      	nop
		}
	}
	default:
		break;
 8001f72:	bf00      	nop

	}
	return true;
 8001f74:	2301      	movs	r3, #1
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	200000d4 	.word	0x200000d4
 8001f88:	2000005c 	.word	0x2000005c

08001f8c <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08c      	sub	sp, #48	@ 0x30
 8001f90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	61bb      	str	r3, [r7, #24]
 8001f96:	4b5a      	ldr	r3, [pc, #360]	@ (8002100 <LCD_GPIO_Init+0x174>)
 8001f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f9a:	4a59      	ldr	r2, [pc, #356]	@ (8002100 <LCD_GPIO_Init+0x174>)
 8001f9c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001fa0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fa2:	4b57      	ldr	r3, [pc, #348]	@ (8002100 <LCD_GPIO_Init+0x174>)
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001faa:	61bb      	str	r3, [r7, #24]
 8001fac:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	617b      	str	r3, [r7, #20]
 8001fb2:	4b53      	ldr	r3, [pc, #332]	@ (8002100 <LCD_GPIO_Init+0x174>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb6:	4a52      	ldr	r2, [pc, #328]	@ (8002100 <LCD_GPIO_Init+0x174>)
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fbe:	4b50      	ldr	r3, [pc, #320]	@ (8002100 <LCD_GPIO_Init+0x174>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	617b      	str	r3, [r7, #20]
 8001fc8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	613b      	str	r3, [r7, #16]
 8001fce:	4b4c      	ldr	r3, [pc, #304]	@ (8002100 <LCD_GPIO_Init+0x174>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd2:	4a4b      	ldr	r2, [pc, #300]	@ (8002100 <LCD_GPIO_Init+0x174>)
 8001fd4:	f043 0302 	orr.w	r3, r3, #2
 8001fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fda:	4b49      	ldr	r3, [pc, #292]	@ (8002100 <LCD_GPIO_Init+0x174>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	4b45      	ldr	r3, [pc, #276]	@ (8002100 <LCD_GPIO_Init+0x174>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fee:	4a44      	ldr	r2, [pc, #272]	@ (8002100 <LCD_GPIO_Init+0x174>)
 8001ff0:	f043 0304 	orr.w	r3, r3, #4
 8001ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ff6:	4b42      	ldr	r3, [pc, #264]	@ (8002100 <LCD_GPIO_Init+0x174>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffa:	f003 0304 	and.w	r3, r3, #4
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	60bb      	str	r3, [r7, #8]
 8002006:	4b3e      	ldr	r3, [pc, #248]	@ (8002100 <LCD_GPIO_Init+0x174>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200a:	4a3d      	ldr	r2, [pc, #244]	@ (8002100 <LCD_GPIO_Init+0x174>)
 800200c:	f043 0308 	orr.w	r3, r3, #8
 8002010:	6313      	str	r3, [r2, #48]	@ 0x30
 8002012:	4b3b      	ldr	r3, [pc, #236]	@ (8002100 <LCD_GPIO_Init+0x174>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002016:	f003 0308 	and.w	r3, r3, #8
 800201a:	60bb      	str	r3, [r7, #8]
 800201c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	607b      	str	r3, [r7, #4]
 8002022:	4b37      	ldr	r3, [pc, #220]	@ (8002100 <LCD_GPIO_Init+0x174>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002026:	4a36      	ldr	r2, [pc, #216]	@ (8002100 <LCD_GPIO_Init+0x174>)
 8002028:	f043 0320 	orr.w	r3, r3, #32
 800202c:	6313      	str	r3, [r2, #48]	@ 0x30
 800202e:	4b34      	ldr	r3, [pc, #208]	@ (8002100 <LCD_GPIO_Init+0x174>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002032:	f003 0320 	and.w	r3, r3, #32
 8002036:	607b      	str	r3, [r7, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	603b      	str	r3, [r7, #0]
 800203e:	4b30      	ldr	r3, [pc, #192]	@ (8002100 <LCD_GPIO_Init+0x174>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002042:	4a2f      	ldr	r2, [pc, #188]	@ (8002100 <LCD_GPIO_Init+0x174>)
 8002044:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002048:	6313      	str	r3, [r2, #48]	@ 0x30
 800204a:	4b2d      	ldr	r3, [pc, #180]	@ (8002100 <LCD_GPIO_Init+0x174>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002052:	603b      	str	r3, [r7, #0]
 8002054:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8002056:	f641 0358 	movw	r3, #6232	@ 0x1858
 800205a:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800205c:	2302      	movs	r3, #2
 800205e:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002064:	2302      	movs	r3, #2
 8002066:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8002068:	230e      	movs	r3, #14
 800206a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800206c:	f107 031c 	add.w	r3, r7, #28
 8002070:	4619      	mov	r1, r3
 8002072:	4824      	ldr	r0, [pc, #144]	@ (8002104 <LCD_GPIO_Init+0x178>)
 8002074:	f002 f970 	bl	8004358 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002078:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800207c:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800207e:	f107 031c 	add.w	r3, r7, #28
 8002082:	4619      	mov	r1, r3
 8002084:	4820      	ldr	r0, [pc, #128]	@ (8002108 <LCD_GPIO_Init+0x17c>)
 8002086:	f002 f967 	bl	8004358 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800208a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800208e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002090:	f107 031c 	add.w	r3, r7, #28
 8002094:	4619      	mov	r1, r3
 8002096:	481d      	ldr	r0, [pc, #116]	@ (800210c <LCD_GPIO_Init+0x180>)
 8002098:	f002 f95e 	bl	8004358 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 800209c:	2348      	movs	r3, #72	@ 0x48
 800209e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80020a0:	f107 031c 	add.w	r3, r7, #28
 80020a4:	4619      	mov	r1, r3
 80020a6:	481a      	ldr	r0, [pc, #104]	@ (8002110 <LCD_GPIO_Init+0x184>)
 80020a8:	f002 f956 	bl	8004358 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80020ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80020b2:	f107 031c 	add.w	r3, r7, #28
 80020b6:	4619      	mov	r1, r3
 80020b8:	4816      	ldr	r0, [pc, #88]	@ (8002114 <LCD_GPIO_Init+0x188>)
 80020ba:	f002 f94d 	bl	8004358 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80020be:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80020c2:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80020c4:	f107 031c 	add.w	r3, r7, #28
 80020c8:	4619      	mov	r1, r3
 80020ca:	4813      	ldr	r0, [pc, #76]	@ (8002118 <LCD_GPIO_Init+0x18c>)
 80020cc:	f002 f944 	bl	8004358 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80020d0:	2303      	movs	r3, #3
 80020d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80020d4:	2309      	movs	r3, #9
 80020d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80020d8:	f107 031c 	add.w	r3, r7, #28
 80020dc:	4619      	mov	r1, r3
 80020de:	480a      	ldr	r0, [pc, #40]	@ (8002108 <LCD_GPIO_Init+0x17c>)
 80020e0:	f002 f93a 	bl	8004358 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80020e4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80020e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80020ea:	f107 031c 	add.w	r3, r7, #28
 80020ee:	4619      	mov	r1, r3
 80020f0:	4809      	ldr	r0, [pc, #36]	@ (8002118 <LCD_GPIO_Init+0x18c>)
 80020f2:	f002 f931 	bl	8004358 <HAL_GPIO_Init>
}
 80020f6:	bf00      	nop
 80020f8:	3730      	adds	r7, #48	@ 0x30
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40023800 	.word	0x40023800
 8002104:	40020000 	.word	0x40020000
 8002108:	40020400 	.word	0x40020400
 800210c:	40020800 	.word	0x40020800
 8002110:	40020c00 	.word	0x40020c00
 8002114:	40021400 	.word	0x40021400
 8002118:	40021800 	.word	0x40021800

0800211c <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b090      	sub	sp, #64	@ 0x40
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 800212a:	23f0      	movs	r3, #240	@ 0xf0
 800212c:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 800212e:	2300      	movs	r3, #0
 8002130:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8002132:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002136:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8002138:	2302      	movs	r3, #2
 800213a:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 800213c:	23ff      	movs	r3, #255	@ 0xff
 800213e:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8002140:	2300      	movs	r3, #0
 8002142:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002144:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002148:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800214a:	2305      	movs	r3, #5
 800214c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8002154:	4b0f      	ldr	r3, [pc, #60]	@ (8002194 <LTCD_Layer_Init+0x78>)
 8002156:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8002158:	23f0      	movs	r3, #240	@ 0xf0
 800215a:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 800215c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002160:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8002162:	2300      	movs	r3, #0
 8002164:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8002168:	2300      	movs	r3, #0
 800216a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 800216e:	2300      	movs	r3, #0
 8002170:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8002174:	79fa      	ldrb	r2, [r7, #7]
 8002176:	f107 030c 	add.w	r3, r7, #12
 800217a:	4619      	mov	r1, r3
 800217c:	4806      	ldr	r0, [pc, #24]	@ (8002198 <LTCD_Layer_Init+0x7c>)
 800217e:	f003 fcb1 	bl	8005ae4 <HAL_LTDC_ConfigLayer>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8002188:	f000 fe00 	bl	8002d8c <LCD_Error_Handler>
	}
}
 800218c:	bf00      	nop
 800218e:	3740      	adds	r7, #64	@ 0x40
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	200001b4 	.word	0x200001b4
 8002198:	200000d8 	.word	0x200000d8

0800219c <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 80021a0:	4b2a      	ldr	r3, [pc, #168]	@ (800224c <LTCD__Init+0xb0>)
 80021a2:	4a2b      	ldr	r2, [pc, #172]	@ (8002250 <LTCD__Init+0xb4>)
 80021a4:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 80021a6:	4b29      	ldr	r3, [pc, #164]	@ (800224c <LTCD__Init+0xb0>)
 80021a8:	2209      	movs	r2, #9
 80021aa:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 80021ac:	4b27      	ldr	r3, [pc, #156]	@ (800224c <LTCD__Init+0xb0>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 80021b2:	4b26      	ldr	r3, [pc, #152]	@ (800224c <LTCD__Init+0xb0>)
 80021b4:	221d      	movs	r2, #29
 80021b6:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 80021b8:	4b24      	ldr	r3, [pc, #144]	@ (800224c <LTCD__Init+0xb0>)
 80021ba:	2203      	movs	r2, #3
 80021bc:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 80021be:	4b23      	ldr	r3, [pc, #140]	@ (800224c <LTCD__Init+0xb0>)
 80021c0:	f240 120d 	movw	r2, #269	@ 0x10d
 80021c4:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 80021c6:	4b21      	ldr	r3, [pc, #132]	@ (800224c <LTCD__Init+0xb0>)
 80021c8:	f240 1243 	movw	r2, #323	@ 0x143
 80021cc:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 80021ce:	4b1f      	ldr	r3, [pc, #124]	@ (800224c <LTCD__Init+0xb0>)
 80021d0:	f240 1217 	movw	r2, #279	@ 0x117
 80021d4:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 80021d6:	4b1d      	ldr	r3, [pc, #116]	@ (800224c <LTCD__Init+0xb0>)
 80021d8:	f240 1247 	movw	r2, #327	@ 0x147
 80021dc:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 80021de:	4b1b      	ldr	r3, [pc, #108]	@ (800224c <LTCD__Init+0xb0>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 80021e6:	4b19      	ldr	r3, [pc, #100]	@ (800224c <LTCD__Init+0xb0>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 80021ee:	4b17      	ldr	r3, [pc, #92]	@ (800224c <LTCD__Init+0xb0>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80021f6:	4b17      	ldr	r3, [pc, #92]	@ (8002254 <LTCD__Init+0xb8>)
 80021f8:	2208      	movs	r2, #8
 80021fa:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80021fc:	4b15      	ldr	r3, [pc, #84]	@ (8002254 <LTCD__Init+0xb8>)
 80021fe:	22c0      	movs	r2, #192	@ 0xc0
 8002200:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002202:	4b14      	ldr	r3, [pc, #80]	@ (8002254 <LTCD__Init+0xb8>)
 8002204:	2204      	movs	r2, #4
 8002206:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002208:	4b12      	ldr	r3, [pc, #72]	@ (8002254 <LTCD__Init+0xb8>)
 800220a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800220e:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8002210:	4810      	ldr	r0, [pc, #64]	@ (8002254 <LTCD__Init+0xb8>)
 8002212:	f004 fac1 	bl	8006798 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002216:	4b0d      	ldr	r3, [pc, #52]	@ (800224c <LTCD__Init+0xb0>)
 8002218:	2200      	movs	r2, #0
 800221a:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800221c:	4b0b      	ldr	r3, [pc, #44]	@ (800224c <LTCD__Init+0xb0>)
 800221e:	2200      	movs	r2, #0
 8002220:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002222:	4b0a      	ldr	r3, [pc, #40]	@ (800224c <LTCD__Init+0xb0>)
 8002224:	2200      	movs	r2, #0
 8002226:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002228:	4b08      	ldr	r3, [pc, #32]	@ (800224c <LTCD__Init+0xb0>)
 800222a:	2200      	movs	r2, #0
 800222c:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 800222e:	f7ff fead 	bl	8001f8c <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002232:	4806      	ldr	r0, [pc, #24]	@ (800224c <LTCD__Init+0xb0>)
 8002234:	f003 fb86 	bl	8005944 <HAL_LTDC_Init>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 800223e:	f000 fda5 	bl	8002d8c <LCD_Error_Handler>
	 }

	ili9341_Init();
 8002242:	f000 fe1b 	bl	8002e7c <ili9341_Init>
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	200000d8 	.word	0x200000d8
 8002250:	40016800 	.word	0x40016800
 8002254:	20000180 	.word	0x20000180

08002258 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	80fb      	strh	r3, [r7, #6]
 8002262:	460b      	mov	r3, r1
 8002264:	80bb      	strh	r3, [r7, #4]
 8002266:	4613      	mov	r3, r2
 8002268:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 800226a:	88ba      	ldrh	r2, [r7, #4]
 800226c:	4613      	mov	r3, r2
 800226e:	011b      	lsls	r3, r3, #4
 8002270:	1a9b      	subs	r3, r3, r2
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	461a      	mov	r2, r3
 8002276:	88fb      	ldrh	r3, [r7, #6]
 8002278:	4413      	add	r3, r2
 800227a:	4905      	ldr	r1, [pc, #20]	@ (8002290 <LCD_Draw_Pixel+0x38>)
 800227c:	887a      	ldrh	r2, [r7, #2]
 800227e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	200001b4 	.word	0x200001b4

08002294 <LCD_Draw_Vertical_Line>:
        }
    }
}

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8002294:	b590      	push	{r4, r7, lr}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	4604      	mov	r4, r0
 800229c:	4608      	mov	r0, r1
 800229e:	4611      	mov	r1, r2
 80022a0:	461a      	mov	r2, r3
 80022a2:	4623      	mov	r3, r4
 80022a4:	80fb      	strh	r3, [r7, #6]
 80022a6:	4603      	mov	r3, r0
 80022a8:	80bb      	strh	r3, [r7, #4]
 80022aa:	460b      	mov	r3, r1
 80022ac:	807b      	strh	r3, [r7, #2]
 80022ae:	4613      	mov	r3, r2
 80022b0:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 80022b2:	2300      	movs	r3, #0
 80022b4:	81fb      	strh	r3, [r7, #14]
 80022b6:	e00b      	b.n	80022d0 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 80022b8:	89fa      	ldrh	r2, [r7, #14]
 80022ba:	88bb      	ldrh	r3, [r7, #4]
 80022bc:	4413      	add	r3, r2
 80022be:	b299      	uxth	r1, r3
 80022c0:	883a      	ldrh	r2, [r7, #0]
 80022c2:	88fb      	ldrh	r3, [r7, #6]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff ffc7 	bl	8002258 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 80022ca:	89fb      	ldrh	r3, [r7, #14]
 80022cc:	3301      	adds	r3, #1
 80022ce:	81fb      	strh	r3, [r7, #14]
 80022d0:	89fa      	ldrh	r2, [r7, #14]
 80022d2:	887b      	ldrh	r3, [r7, #2]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d3ef      	bcc.n	80022b8 <LCD_Draw_Vertical_Line+0x24>
  }
}
 80022d8:	bf00      	nop
 80022da:	bf00      	nop
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd90      	pop	{r4, r7, pc}

080022e2 <LCD_Draw_Horizontal_Line>:
void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 80022e2:	b590      	push	{r4, r7, lr}
 80022e4:	b085      	sub	sp, #20
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	4604      	mov	r4, r0
 80022ea:	4608      	mov	r0, r1
 80022ec:	4611      	mov	r1, r2
 80022ee:	461a      	mov	r2, r3
 80022f0:	4623      	mov	r3, r4
 80022f2:	80fb      	strh	r3, [r7, #6]
 80022f4:	4603      	mov	r3, r0
 80022f6:	80bb      	strh	r3, [r7, #4]
 80022f8:	460b      	mov	r3, r1
 80022fa:	807b      	strh	r3, [r7, #2]
 80022fc:	4613      	mov	r3, r2
 80022fe:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8002300:	2300      	movs	r3, #0
 8002302:	81fb      	strh	r3, [r7, #14]
 8002304:	e00b      	b.n	800231e <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(x+i, y, color);
 8002306:	88fa      	ldrh	r2, [r7, #6]
 8002308:	89fb      	ldrh	r3, [r7, #14]
 800230a:	4413      	add	r3, r2
 800230c:	b29b      	uxth	r3, r3
 800230e:	883a      	ldrh	r2, [r7, #0]
 8002310:	88b9      	ldrh	r1, [r7, #4]
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff ffa0 	bl	8002258 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8002318:	89fb      	ldrh	r3, [r7, #14]
 800231a:	3301      	adds	r3, #1
 800231c:	81fb      	strh	r3, [r7, #14]
 800231e:	89fa      	ldrh	r2, [r7, #14]
 8002320:	887b      	ldrh	r3, [r7, #2]
 8002322:	429a      	cmp	r2, r3
 8002324:	d3ef      	bcc.n	8002306 <LCD_Draw_Horizontal_Line+0x24>
  }
}
 8002326:	bf00      	nop
 8002328:	bf00      	nop
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	bd90      	pop	{r4, r7, pc}

08002330 <LCD_Draw_Box>:
void LCD_Draw_Box(uint16_t x, uint16_t y,uint16_t len, uint16_t color){
 8002330:	b590      	push	{r4, r7, lr}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	4604      	mov	r4, r0
 8002338:	4608      	mov	r0, r1
 800233a:	4611      	mov	r1, r2
 800233c:	461a      	mov	r2, r3
 800233e:	4623      	mov	r3, r4
 8002340:	80fb      	strh	r3, [r7, #6]
 8002342:	4603      	mov	r3, r0
 8002344:	80bb      	strh	r3, [r7, #4]
 8002346:	460b      	mov	r3, r1
 8002348:	807b      	strh	r3, [r7, #2]
 800234a:	4613      	mov	r3, r2
 800234c:	803b      	strh	r3, [r7, #0]
	for (uint16_t i = 0; i < len; i++){
 800234e:	2300      	movs	r3, #0
 8002350:	81fb      	strh	r3, [r7, #14]
 8002352:	e00b      	b.n	800236c <LCD_Draw_Box+0x3c>
		LCD_Draw_Vertical_Line(x+i,y,len,color);
 8002354:	88fa      	ldrh	r2, [r7, #6]
 8002356:	89fb      	ldrh	r3, [r7, #14]
 8002358:	4413      	add	r3, r2
 800235a:	b298      	uxth	r0, r3
 800235c:	883b      	ldrh	r3, [r7, #0]
 800235e:	887a      	ldrh	r2, [r7, #2]
 8002360:	88b9      	ldrh	r1, [r7, #4]
 8002362:	f7ff ff97 	bl	8002294 <LCD_Draw_Vertical_Line>
	for (uint16_t i = 0; i < len; i++){
 8002366:	89fb      	ldrh	r3, [r7, #14]
 8002368:	3301      	adds	r3, #1
 800236a:	81fb      	strh	r3, [r7, #14]
 800236c:	89fa      	ldrh	r2, [r7, #14]
 800236e:	887b      	ldrh	r3, [r7, #2]
 8002370:	429a      	cmp	r2, r3
 8002372:	d3ef      	bcc.n	8002354 <LCD_Draw_Box+0x24>
	}

}
 8002374:	bf00      	nop
 8002376:	bf00      	nop
 8002378:	3714      	adds	r7, #20
 800237a:	46bd      	mov	sp, r7
 800237c:	bd90      	pop	{r4, r7, pc}
	...

08002380 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	460a      	mov	r2, r1
 800238a:	71fb      	strb	r3, [r7, #7]
 800238c:	4613      	mov	r3, r2
 800238e:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8002390:	79fb      	ldrb	r3, [r7, #7]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10e      	bne.n	80023b4 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8002396:	2300      	movs	r3, #0
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	e007      	b.n	80023ac <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 800239c:	4908      	ldr	r1, [pc, #32]	@ (80023c0 <LCD_Clear+0x40>)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	88ba      	ldrh	r2, [r7, #4]
 80023a2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	3301      	adds	r3, #1
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 80023b2:	d3f3      	bcc.n	800239c <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 80023b4:	bf00      	nop
 80023b6:	3714      	adds	r7, #20
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	200001b4 	.word	0x200001b4

080023c4 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 80023ce:	4a04      	ldr	r2, [pc, #16]	@ (80023e0 <LCD_SetTextColor+0x1c>)
 80023d0:	88fb      	ldrh	r3, [r7, #6]
 80023d2:	8013      	strh	r3, [r2, #0]
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	20000000 	.word	0x20000000

080023e4 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 80023ec:	4a04      	ldr	r2, [pc, #16]	@ (8002400 <LCD_SetFont+0x1c>)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6013      	str	r3, [r2, #0]
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	200001b0 	.word	0x200001b0

08002404 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	603a      	str	r2, [r7, #0]
 800240e:	80fb      	strh	r3, [r7, #6]
 8002410:	460b      	mov	r3, r1
 8002412:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8002414:	2300      	movs	r3, #0
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	2300      	movs	r3, #0
 800241a:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 800241c:	2300      	movs	r3, #0
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	e04c      	b.n	80024bc <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8002422:	2300      	movs	r3, #0
 8002424:	60bb      	str	r3, [r7, #8]
 8002426:	e03f      	b.n	80024a8 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	4413      	add	r3, r2
 8002430:	881b      	ldrh	r3, [r3, #0]
 8002432:	4619      	mov	r1, r3
 8002434:	4b27      	ldr	r3, [pc, #156]	@ (80024d4 <LCD_Draw_Char+0xd0>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	889b      	ldrh	r3, [r3, #4]
 800243a:	4a27      	ldr	r2, [pc, #156]	@ (80024d8 <LCD_Draw_Char+0xd4>)
 800243c:	fba2 2303 	umull	r2, r3, r2, r3
 8002440:	08db      	lsrs	r3, r3, #3
 8002442:	b29b      	uxth	r3, r3
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	2280      	movs	r2, #128	@ 0x80
 8002448:	409a      	lsls	r2, r3
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	fa42 f303 	asr.w	r3, r2, r3
 8002450:	400b      	ands	r3, r1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d104      	bne.n	8002460 <LCD_Draw_Char+0x5c>
 8002456:	4b1f      	ldr	r3, [pc, #124]	@ (80024d4 <LCD_Draw_Char+0xd0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	889b      	ldrh	r3, [r3, #4]
 800245c:	2b0c      	cmp	r3, #12
 800245e:	d920      	bls.n	80024a2 <LCD_Draw_Char+0x9e>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	4413      	add	r3, r2
 8002468:	881b      	ldrh	r3, [r3, #0]
 800246a:	461a      	mov	r2, r3
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	fa42 f303 	asr.w	r3, r2, r3
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d104      	bne.n	8002484 <LCD_Draw_Char+0x80>
 800247a:	4b16      	ldr	r3, [pc, #88]	@ (80024d4 <LCD_Draw_Char+0xd0>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	889b      	ldrh	r3, [r3, #4]
 8002480:	2b0c      	cmp	r3, #12
 8002482:	d80e      	bhi.n	80024a2 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	b29a      	uxth	r2, r3
 8002488:	88fb      	ldrh	r3, [r7, #6]
 800248a:	4413      	add	r3, r2
 800248c:	b298      	uxth	r0, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	b29a      	uxth	r2, r3
 8002492:	88bb      	ldrh	r3, [r7, #4]
 8002494:	4413      	add	r3, r2
 8002496:	b29b      	uxth	r3, r3
 8002498:	4a10      	ldr	r2, [pc, #64]	@ (80024dc <LCD_Draw_Char+0xd8>)
 800249a:	8812      	ldrh	r2, [r2, #0]
 800249c:	4619      	mov	r1, r3
 800249e:	f7ff fedb 	bl	8002258 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	3301      	adds	r3, #1
 80024a6:	60bb      	str	r3, [r7, #8]
 80024a8:	4b0a      	ldr	r3, [pc, #40]	@ (80024d4 <LCD_Draw_Char+0xd0>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	889b      	ldrh	r3, [r3, #4]
 80024ae:	461a      	mov	r2, r3
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d3b8      	bcc.n	8002428 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	3301      	adds	r3, #1
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	4b05      	ldr	r3, [pc, #20]	@ (80024d4 <LCD_Draw_Char+0xd0>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	88db      	ldrh	r3, [r3, #6]
 80024c2:	461a      	mov	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d3ab      	bcc.n	8002422 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 80024ca:	bf00      	nop
 80024cc:	bf00      	nop
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	200001b0 	.word	0x200001b0
 80024d8:	aaaaaaab 	.word	0xaaaaaaab
 80024dc:	20000000 	.word	0x20000000

080024e0 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	80fb      	strh	r3, [r7, #6]
 80024ea:	460b      	mov	r3, r1
 80024ec:	80bb      	strh	r3, [r7, #4]
 80024ee:	4613      	mov	r3, r2
 80024f0:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 80024f2:	78fb      	ldrb	r3, [r7, #3]
 80024f4:	3b20      	subs	r3, #32
 80024f6:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 80024f8:	4b09      	ldr	r3, [pc, #36]	@ (8002520 <LCD_DisplayChar+0x40>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	78fb      	ldrb	r3, [r7, #3]
 8002500:	4907      	ldr	r1, [pc, #28]	@ (8002520 <LCD_DisplayChar+0x40>)
 8002502:	6809      	ldr	r1, [r1, #0]
 8002504:	88c9      	ldrh	r1, [r1, #6]
 8002506:	fb01 f303 	mul.w	r3, r1, r3
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	441a      	add	r2, r3
 800250e:	88b9      	ldrh	r1, [r7, #4]
 8002510:	88fb      	ldrh	r3, [r7, #6]
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff ff76 	bl	8002404 <LCD_Draw_Char>
}
 8002518:	bf00      	nop
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	200001b0 	.word	0x200001b0

08002524 <title_screen>:
void title_screen(void){
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0

	LCD_SetFont(&Font16x24);
 8002528:	48fd      	ldr	r0, [pc, #1012]	@ (8002920 <title_screen+0x3fc>)
 800252a:	f7ff ff5b 	bl	80023e4 <LCD_SetFont>

	LCD_SetTextColor(LCD_COLOR_BLACK);
 800252e:	2000      	movs	r0, #0
 8002530:	f7ff ff48 	bl	80023c4 <LCD_SetTextColor>
	LCD_DisplayChar(100,140,'T');
 8002534:	2254      	movs	r2, #84	@ 0x54
 8002536:	218c      	movs	r1, #140	@ 0x8c
 8002538:	2064      	movs	r0, #100	@ 0x64
 800253a:	f7ff ffd1 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(115,140,'E');
 800253e:	2245      	movs	r2, #69	@ 0x45
 8002540:	218c      	movs	r1, #140	@ 0x8c
 8002542:	2073      	movs	r0, #115	@ 0x73
 8002544:	f7ff ffcc 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(130,140,'T');
 8002548:	2254      	movs	r2, #84	@ 0x54
 800254a:	218c      	movs	r1, #140	@ 0x8c
 800254c:	2082      	movs	r0, #130	@ 0x82
 800254e:	f7ff ffc7 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(145,140,'R');
 8002552:	2252      	movs	r2, #82	@ 0x52
 8002554:	218c      	movs	r1, #140	@ 0x8c
 8002556:	2091      	movs	r0, #145	@ 0x91
 8002558:	f7ff ffc2 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(155,140,'I');
 800255c:	2249      	movs	r2, #73	@ 0x49
 800255e:	218c      	movs	r1, #140	@ 0x8c
 8002560:	209b      	movs	r0, #155	@ 0x9b
 8002562:	f7ff ffbd 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(165,140,'S');
 8002566:	2253      	movs	r2, #83	@ 0x53
 8002568:	218c      	movs	r1, #140	@ 0x8c
 800256a:	20a5      	movs	r0, #165	@ 0xa5
 800256c:	f7ff ffb8 	bl	80024e0 <LCD_DisplayChar>

	//line
	LCD_Draw_Box(20,80,20,LCD_COLOR_CYAN);
 8002570:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8002574:	2214      	movs	r2, #20
 8002576:	2150      	movs	r1, #80	@ 0x50
 8002578:	2014      	movs	r0, #20
 800257a:	f7ff fed9 	bl	8002330 <LCD_Draw_Box>
	LCD_Draw_Box(20,60,20,LCD_COLOR_CYAN);
 800257e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8002582:	2214      	movs	r2, #20
 8002584:	213c      	movs	r1, #60	@ 0x3c
 8002586:	2014      	movs	r0, #20
 8002588:	f7ff fed2 	bl	8002330 <LCD_Draw_Box>
	LCD_Draw_Box(20,20,20,LCD_COLOR_CYAN);
 800258c:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8002590:	2214      	movs	r2, #20
 8002592:	2114      	movs	r1, #20
 8002594:	2014      	movs	r0, #20
 8002596:	f7ff fecb 	bl	8002330 <LCD_Draw_Box>
	LCD_Draw_Box(20,40,20,LCD_COLOR_CYAN);
 800259a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800259e:	2214      	movs	r2, #20
 80025a0:	2128      	movs	r1, #40	@ 0x28
 80025a2:	2014      	movs	r0, #20
 80025a4:	f7ff fec4 	bl	8002330 <LCD_Draw_Box>

	HAL_Delay(500);
 80025a8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80025ac:	f001 fd28 	bl	8004000 <HAL_Delay>
	LCD_Clear(0, LCD_COLOR_BLACK);
 80025b0:	2100      	movs	r1, #0
 80025b2:	2000      	movs	r0, #0
 80025b4:	f7ff fee4 	bl	8002380 <LCD_Clear>

	LCD_SetTextColor(LCD_COLOR_WHITE);
 80025b8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80025bc:	f7ff ff02 	bl	80023c4 <LCD_SetTextColor>
	LCD_DisplayChar(100,140,'T');
 80025c0:	2254      	movs	r2, #84	@ 0x54
 80025c2:	218c      	movs	r1, #140	@ 0x8c
 80025c4:	2064      	movs	r0, #100	@ 0x64
 80025c6:	f7ff ff8b 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(115,140,'E');
 80025ca:	2245      	movs	r2, #69	@ 0x45
 80025cc:	218c      	movs	r1, #140	@ 0x8c
 80025ce:	2073      	movs	r0, #115	@ 0x73
 80025d0:	f7ff ff86 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(130,140,'T');
 80025d4:	2254      	movs	r2, #84	@ 0x54
 80025d6:	218c      	movs	r1, #140	@ 0x8c
 80025d8:	2082      	movs	r0, #130	@ 0x82
 80025da:	f7ff ff81 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(145,140,'R');
 80025de:	2252      	movs	r2, #82	@ 0x52
 80025e0:	218c      	movs	r1, #140	@ 0x8c
 80025e2:	2091      	movs	r0, #145	@ 0x91
 80025e4:	f7ff ff7c 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(155,140,'I');
 80025e8:	2249      	movs	r2, #73	@ 0x49
 80025ea:	218c      	movs	r1, #140	@ 0x8c
 80025ec:	209b      	movs	r0, #155	@ 0x9b
 80025ee:	f7ff ff77 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(165,140,'S');
 80025f2:	2253      	movs	r2, #83	@ 0x53
 80025f4:	218c      	movs	r1, #140	@ 0x8c
 80025f6:	20a5      	movs	r0, #165	@ 0xa5
 80025f8:	f7ff ff72 	bl	80024e0 <LCD_DisplayChar>
	//square
	LCD_Draw_Box(160,200,20,LCD_COLOR_RED);
 80025fc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002600:	2214      	movs	r2, #20
 8002602:	21c8      	movs	r1, #200	@ 0xc8
 8002604:	20a0      	movs	r0, #160	@ 0xa0
 8002606:	f7ff fe93 	bl	8002330 <LCD_Draw_Box>
	LCD_Draw_Box(180,200,20,LCD_COLOR_RED);
 800260a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800260e:	2214      	movs	r2, #20
 8002610:	21c8      	movs	r1, #200	@ 0xc8
 8002612:	20b4      	movs	r0, #180	@ 0xb4
 8002614:	f7ff fe8c 	bl	8002330 <LCD_Draw_Box>
	LCD_Draw_Box(180,220,20,LCD_COLOR_RED);
 8002618:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800261c:	2214      	movs	r2, #20
 800261e:	21dc      	movs	r1, #220	@ 0xdc
 8002620:	20b4      	movs	r0, #180	@ 0xb4
 8002622:	f7ff fe85 	bl	8002330 <LCD_Draw_Box>
	LCD_Draw_Box(160,220,20,LCD_COLOR_RED);
 8002626:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800262a:	2214      	movs	r2, #20
 800262c:	21dc      	movs	r1, #220	@ 0xdc
 800262e:	20a0      	movs	r0, #160	@ 0xa0
 8002630:	f7ff fe7e 	bl	8002330 <LCD_Draw_Box>

	HAL_Delay(500);
 8002634:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002638:	f001 fce2 	bl	8004000 <HAL_Delay>
	LCD_Clear(0, LCD_COLOR_WHITE);
 800263c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002640:	2000      	movs	r0, #0
 8002642:	f7ff fe9d 	bl	8002380 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 8002646:	2000      	movs	r0, #0
 8002648:	f7ff febc 	bl	80023c4 <LCD_SetTextColor>
	LCD_DisplayChar(100,140,'T');
 800264c:	2254      	movs	r2, #84	@ 0x54
 800264e:	218c      	movs	r1, #140	@ 0x8c
 8002650:	2064      	movs	r0, #100	@ 0x64
 8002652:	f7ff ff45 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(115,140,'E');
 8002656:	2245      	movs	r2, #69	@ 0x45
 8002658:	218c      	movs	r1, #140	@ 0x8c
 800265a:	2073      	movs	r0, #115	@ 0x73
 800265c:	f7ff ff40 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(130,140,'T');
 8002660:	2254      	movs	r2, #84	@ 0x54
 8002662:	218c      	movs	r1, #140	@ 0x8c
 8002664:	2082      	movs	r0, #130	@ 0x82
 8002666:	f7ff ff3b 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(145,140,'R');
 800266a:	2252      	movs	r2, #82	@ 0x52
 800266c:	218c      	movs	r1, #140	@ 0x8c
 800266e:	2091      	movs	r0, #145	@ 0x91
 8002670:	f7ff ff36 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(155,140,'I');
 8002674:	2249      	movs	r2, #73	@ 0x49
 8002676:	218c      	movs	r1, #140	@ 0x8c
 8002678:	209b      	movs	r0, #155	@ 0x9b
 800267a:	f7ff ff31 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(165,140,'S');
 800267e:	2253      	movs	r2, #83	@ 0x53
 8002680:	218c      	movs	r1, #140	@ 0x8c
 8002682:	20a5      	movs	r0, #165	@ 0xa5
 8002684:	f7ff ff2c 	bl	80024e0 <LCD_DisplayChar>
	//L
	LCD_Draw_Box(20,220,20,LCD_COLOR_BLUE);
 8002688:	231f      	movs	r3, #31
 800268a:	2214      	movs	r2, #20
 800268c:	21dc      	movs	r1, #220	@ 0xdc
 800268e:	2014      	movs	r0, #20
 8002690:	f7ff fe4e 	bl	8002330 <LCD_Draw_Box>
	LCD_Draw_Box(20,240,20,LCD_COLOR_BLUE);
 8002694:	231f      	movs	r3, #31
 8002696:	2214      	movs	r2, #20
 8002698:	21f0      	movs	r1, #240	@ 0xf0
 800269a:	2014      	movs	r0, #20
 800269c:	f7ff fe48 	bl	8002330 <LCD_Draw_Box>
	LCD_Draw_Box(20,260,20,LCD_COLOR_BLUE);
 80026a0:	231f      	movs	r3, #31
 80026a2:	2214      	movs	r2, #20
 80026a4:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80026a8:	2014      	movs	r0, #20
 80026aa:	f7ff fe41 	bl	8002330 <LCD_Draw_Box>
	LCD_Draw_Box(40,260,20,LCD_COLOR_BLUE);
 80026ae:	231f      	movs	r3, #31
 80026b0:	2214      	movs	r2, #20
 80026b2:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80026b6:	2028      	movs	r0, #40	@ 0x28
 80026b8:	f7ff fe3a 	bl	8002330 <LCD_Draw_Box>

	HAL_Delay(500);
 80026bc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80026c0:	f001 fc9e 	bl	8004000 <HAL_Delay>
	LCD_Clear(0, LCD_COLOR_BLACK);
 80026c4:	2100      	movs	r1, #0
 80026c6:	2000      	movs	r0, #0
 80026c8:	f7ff fe5a 	bl	8002380 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 80026cc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80026d0:	f7ff fe78 	bl	80023c4 <LCD_SetTextColor>
	LCD_DisplayChar(100,140,'T');
 80026d4:	2254      	movs	r2, #84	@ 0x54
 80026d6:	218c      	movs	r1, #140	@ 0x8c
 80026d8:	2064      	movs	r0, #100	@ 0x64
 80026da:	f7ff ff01 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(115,140,'E');
 80026de:	2245      	movs	r2, #69	@ 0x45
 80026e0:	218c      	movs	r1, #140	@ 0x8c
 80026e2:	2073      	movs	r0, #115	@ 0x73
 80026e4:	f7ff fefc 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(130,140,'T');
 80026e8:	2254      	movs	r2, #84	@ 0x54
 80026ea:	218c      	movs	r1, #140	@ 0x8c
 80026ec:	2082      	movs	r0, #130	@ 0x82
 80026ee:	f7ff fef7 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(145,140,'R');
 80026f2:	2252      	movs	r2, #82	@ 0x52
 80026f4:	218c      	movs	r1, #140	@ 0x8c
 80026f6:	2091      	movs	r0, #145	@ 0x91
 80026f8:	f7ff fef2 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(155,140,'I');
 80026fc:	2249      	movs	r2, #73	@ 0x49
 80026fe:	218c      	movs	r1, #140	@ 0x8c
 8002700:	209b      	movs	r0, #155	@ 0x9b
 8002702:	f7ff feed 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(165,140,'S');
 8002706:	2253      	movs	r2, #83	@ 0x53
 8002708:	218c      	movs	r1, #140	@ 0x8c
 800270a:	20a5      	movs	r0, #165	@ 0xa5
 800270c:	f7ff fee8 	bl	80024e0 <LCD_DisplayChar>

	//other L
	LCD_Draw_Box(80,80,20,LCD_COLOR_GREEN);
 8002710:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002714:	2214      	movs	r2, #20
 8002716:	2150      	movs	r1, #80	@ 0x50
 8002718:	2050      	movs	r0, #80	@ 0x50
 800271a:	f7ff fe09 	bl	8002330 <LCD_Draw_Box>
	LCD_Draw_Box(80,100,20,LCD_COLOR_GREEN);
 800271e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002722:	2214      	movs	r2, #20
 8002724:	2164      	movs	r1, #100	@ 0x64
 8002726:	2050      	movs	r0, #80	@ 0x50
 8002728:	f7ff fe02 	bl	8002330 <LCD_Draw_Box>
	LCD_Draw_Box(80,120,20,LCD_COLOR_GREEN);
 800272c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002730:	2214      	movs	r2, #20
 8002732:	2178      	movs	r1, #120	@ 0x78
 8002734:	2050      	movs	r0, #80	@ 0x50
 8002736:	f7ff fdfb 	bl	8002330 <LCD_Draw_Box>
	LCD_Draw_Box(60,120,20,LCD_COLOR_GREEN);
 800273a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800273e:	2214      	movs	r2, #20
 8002740:	2178      	movs	r1, #120	@ 0x78
 8002742:	203c      	movs	r0, #60	@ 0x3c
 8002744:	f7ff fdf4 	bl	8002330 <LCD_Draw_Box>

	HAL_Delay(500);
 8002748:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800274c:	f001 fc58 	bl	8004000 <HAL_Delay>
	LCD_Clear(0, LCD_COLOR_WHITE);
 8002750:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002754:	2000      	movs	r0, #0
 8002756:	f7ff fe13 	bl	8002380 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 800275a:	2000      	movs	r0, #0
 800275c:	f7ff fe32 	bl	80023c4 <LCD_SetTextColor>
	LCD_DisplayChar(100,140,'T');
 8002760:	2254      	movs	r2, #84	@ 0x54
 8002762:	218c      	movs	r1, #140	@ 0x8c
 8002764:	2064      	movs	r0, #100	@ 0x64
 8002766:	f7ff febb 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(115,140,'E');
 800276a:	2245      	movs	r2, #69	@ 0x45
 800276c:	218c      	movs	r1, #140	@ 0x8c
 800276e:	2073      	movs	r0, #115	@ 0x73
 8002770:	f7ff feb6 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(130,140,'T');
 8002774:	2254      	movs	r2, #84	@ 0x54
 8002776:	218c      	movs	r1, #140	@ 0x8c
 8002778:	2082      	movs	r0, #130	@ 0x82
 800277a:	f7ff feb1 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(145,140,'R');
 800277e:	2252      	movs	r2, #82	@ 0x52
 8002780:	218c      	movs	r1, #140	@ 0x8c
 8002782:	2091      	movs	r0, #145	@ 0x91
 8002784:	f7ff feac 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(155,140,'I');
 8002788:	2249      	movs	r2, #73	@ 0x49
 800278a:	218c      	movs	r1, #140	@ 0x8c
 800278c:	209b      	movs	r0, #155	@ 0x9b
 800278e:	f7ff fea7 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(165,140,'S');
 8002792:	2253      	movs	r2, #83	@ 0x53
 8002794:	218c      	movs	r1, #140	@ 0x8c
 8002796:	20a5      	movs	r0, #165	@ 0xa5
 8002798:	f7ff fea2 	bl	80024e0 <LCD_DisplayChar>
	// smol pp
	LCD_Draw_Box(150,20,20,LCD_COLOR_BLUE2);
 800279c:	f240 531f 	movw	r3, #1311	@ 0x51f
 80027a0:	2214      	movs	r2, #20
 80027a2:	2114      	movs	r1, #20
 80027a4:	2096      	movs	r0, #150	@ 0x96
 80027a6:	f7ff fdc3 	bl	8002330 <LCD_Draw_Box>
	LCD_Draw_Box(150,40,20,LCD_COLOR_BLUE2);
 80027aa:	f240 531f 	movw	r3, #1311	@ 0x51f
 80027ae:	2214      	movs	r2, #20
 80027b0:	2128      	movs	r1, #40	@ 0x28
 80027b2:	2096      	movs	r0, #150	@ 0x96
 80027b4:	f7ff fdbc 	bl	8002330 <LCD_Draw_Box>
	LCD_Draw_Box(170,20,20,LCD_COLOR_BLUE2);
 80027b8:	f240 531f 	movw	r3, #1311	@ 0x51f
 80027bc:	2214      	movs	r2, #20
 80027be:	2114      	movs	r1, #20
 80027c0:	20aa      	movs	r0, #170	@ 0xaa
 80027c2:	f7ff fdb5 	bl	8002330 <LCD_Draw_Box>
	LCD_Draw_Box(130,20,20,LCD_COLOR_BLUE2);
 80027c6:	f240 531f 	movw	r3, #1311	@ 0x51f
 80027ca:	2214      	movs	r2, #20
 80027cc:	2114      	movs	r1, #20
 80027ce:	2082      	movs	r0, #130	@ 0x82
 80027d0:	f7ff fdae 	bl	8002330 <LCD_Draw_Box>

	HAL_Delay(500);
 80027d4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80027d8:	f001 fc12 	bl	8004000 <HAL_Delay>
	LCD_Clear(0, LCD_COLOR_BLACK);
 80027dc:	2100      	movs	r1, #0
 80027de:	2000      	movs	r0, #0
 80027e0:	f7ff fdce 	bl	8002380 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 80027e4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80027e8:	f7ff fdec 	bl	80023c4 <LCD_SetTextColor>
	LCD_DisplayChar(100,140,'T');
 80027ec:	2254      	movs	r2, #84	@ 0x54
 80027ee:	218c      	movs	r1, #140	@ 0x8c
 80027f0:	2064      	movs	r0, #100	@ 0x64
 80027f2:	f7ff fe75 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(115,140,'E');
 80027f6:	2245      	movs	r2, #69	@ 0x45
 80027f8:	218c      	movs	r1, #140	@ 0x8c
 80027fa:	2073      	movs	r0, #115	@ 0x73
 80027fc:	f7ff fe70 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(130,140,'T');
 8002800:	2254      	movs	r2, #84	@ 0x54
 8002802:	218c      	movs	r1, #140	@ 0x8c
 8002804:	2082      	movs	r0, #130	@ 0x82
 8002806:	f7ff fe6b 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(145,140,'R');
 800280a:	2252      	movs	r2, #82	@ 0x52
 800280c:	218c      	movs	r1, #140	@ 0x8c
 800280e:	2091      	movs	r0, #145	@ 0x91
 8002810:	f7ff fe66 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(155,140,'I');
 8002814:	2249      	movs	r2, #73	@ 0x49
 8002816:	218c      	movs	r1, #140	@ 0x8c
 8002818:	209b      	movs	r0, #155	@ 0x9b
 800281a:	f7ff fe61 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(165,140,'S');
 800281e:	2253      	movs	r2, #83	@ 0x53
 8002820:	218c      	movs	r1, #140	@ 0x8c
 8002822:	20a5      	movs	r0, #165	@ 0xa5
 8002824:	f7ff fe5c 	bl	80024e0 <LCD_DisplayChar>
	//squiggle
	LCD_Draw_Box(70,170,20,LCD_COLOR_MAGENTA);
 8002828:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800282c:	2214      	movs	r2, #20
 800282e:	21aa      	movs	r1, #170	@ 0xaa
 8002830:	2046      	movs	r0, #70	@ 0x46
 8002832:	f7ff fd7d 	bl	8002330 <LCD_Draw_Box>
	LCD_Draw_Box(90,170,20,LCD_COLOR_MAGENTA);
 8002836:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800283a:	2214      	movs	r2, #20
 800283c:	21aa      	movs	r1, #170	@ 0xaa
 800283e:	205a      	movs	r0, #90	@ 0x5a
 8002840:	f7ff fd76 	bl	8002330 <LCD_Draw_Box>
	LCD_Draw_Box(90,190,20,LCD_COLOR_MAGENTA);
 8002844:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002848:	2214      	movs	r2, #20
 800284a:	21be      	movs	r1, #190	@ 0xbe
 800284c:	205a      	movs	r0, #90	@ 0x5a
 800284e:	f7ff fd6f 	bl	8002330 <LCD_Draw_Box>
	LCD_Draw_Box(110,190,20,LCD_COLOR_MAGENTA);
 8002852:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002856:	2214      	movs	r2, #20
 8002858:	21be      	movs	r1, #190	@ 0xbe
 800285a:	206e      	movs	r0, #110	@ 0x6e
 800285c:	f7ff fd68 	bl	8002330 <LCD_Draw_Box>

	HAL_Delay(500);
 8002860:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002864:	f001 fbcc 	bl	8004000 <HAL_Delay>
	LCD_Clear(0, LCD_COLOR_WHITE);
 8002868:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800286c:	2000      	movs	r0, #0
 800286e:	f7ff fd87 	bl	8002380 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 8002872:	2000      	movs	r0, #0
 8002874:	f7ff fda6 	bl	80023c4 <LCD_SetTextColor>
	LCD_DisplayChar(100,140,'T');
 8002878:	2254      	movs	r2, #84	@ 0x54
 800287a:	218c      	movs	r1, #140	@ 0x8c
 800287c:	2064      	movs	r0, #100	@ 0x64
 800287e:	f7ff fe2f 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(115,140,'E');
 8002882:	2245      	movs	r2, #69	@ 0x45
 8002884:	218c      	movs	r1, #140	@ 0x8c
 8002886:	2073      	movs	r0, #115	@ 0x73
 8002888:	f7ff fe2a 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(130,140,'T');
 800288c:	2254      	movs	r2, #84	@ 0x54
 800288e:	218c      	movs	r1, #140	@ 0x8c
 8002890:	2082      	movs	r0, #130	@ 0x82
 8002892:	f7ff fe25 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(145,140,'R');
 8002896:	2252      	movs	r2, #82	@ 0x52
 8002898:	218c      	movs	r1, #140	@ 0x8c
 800289a:	2091      	movs	r0, #145	@ 0x91
 800289c:	f7ff fe20 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(155,140,'I');
 80028a0:	2249      	movs	r2, #73	@ 0x49
 80028a2:	218c      	movs	r1, #140	@ 0x8c
 80028a4:	209b      	movs	r0, #155	@ 0x9b
 80028a6:	f7ff fe1b 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(165,140,'S');
 80028aa:	2253      	movs	r2, #83	@ 0x53
 80028ac:	218c      	movs	r1, #140	@ 0x8c
 80028ae:	20a5      	movs	r0, #165	@ 0xa5
 80028b0:	f7ff fe16 	bl	80024e0 <LCD_DisplayChar>
	//other squiggle
	LCD_Draw_Box(160,270,20,LCD_COLOR_YELLOW);
 80028b4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80028b8:	2214      	movs	r2, #20
 80028ba:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80028be:	20a0      	movs	r0, #160	@ 0xa0
 80028c0:	f7ff fd36 	bl	8002330 <LCD_Draw_Box>
	LCD_Draw_Box(180,270,20,LCD_COLOR_YELLOW);
 80028c4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80028c8:	2214      	movs	r2, #20
 80028ca:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80028ce:	20b4      	movs	r0, #180	@ 0xb4
 80028d0:	f7ff fd2e 	bl	8002330 <LCD_Draw_Box>
	LCD_Draw_Box(160,290,20,LCD_COLOR_YELLOW);
 80028d4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80028d8:	2214      	movs	r2, #20
 80028da:	f44f 7191 	mov.w	r1, #290	@ 0x122
 80028de:	20a0      	movs	r0, #160	@ 0xa0
 80028e0:	f7ff fd26 	bl	8002330 <LCD_Draw_Box>
	LCD_Draw_Box(140,290,20,LCD_COLOR_YELLOW);
 80028e4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80028e8:	2214      	movs	r2, #20
 80028ea:	f44f 7191 	mov.w	r1, #290	@ 0x122
 80028ee:	208c      	movs	r0, #140	@ 0x8c
 80028f0:	f7ff fd1e 	bl	8002330 <LCD_Draw_Box>


	HAL_Delay(500);
 80028f4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80028f8:	f001 fb82 	bl	8004000 <HAL_Delay>
	LCD_Clear(0, LCD_COLOR_BLACK);
 80028fc:	2100      	movs	r1, #0
 80028fe:	2000      	movs	r0, #0
 8002900:	f7ff fd3e 	bl	8002380 <LCD_Clear>


	//line
	LCD_Draw_Box(20,80,20,LCD_COLOR_CYAN);
 8002904:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8002908:	2214      	movs	r2, #20
 800290a:	2150      	movs	r1, #80	@ 0x50
 800290c:	2014      	movs	r0, #20
 800290e:	f7ff fd0f 	bl	8002330 <LCD_Draw_Box>
	LCD_Draw_Box(20,60,20,LCD_COLOR_CYAN);
 8002912:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8002916:	2214      	movs	r2, #20
 8002918:	213c      	movs	r1, #60	@ 0x3c
 800291a:	2014      	movs	r0, #20
 800291c:	e002      	b.n	8002924 <title_screen+0x400>
 800291e:	bf00      	nop
 8002920:	20000004 	.word	0x20000004
 8002924:	f7ff fd04 	bl	8002330 <LCD_Draw_Box>
	LCD_Draw_Box(20,20,20,LCD_COLOR_CYAN);
 8002928:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800292c:	2214      	movs	r2, #20
 800292e:	2114      	movs	r1, #20
 8002930:	2014      	movs	r0, #20
 8002932:	f7ff fcfd 	bl	8002330 <LCD_Draw_Box>
	LCD_Draw_Box(20,40,20,LCD_COLOR_CYAN);
 8002936:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800293a:	2214      	movs	r2, #20
 800293c:	2128      	movs	r1, #40	@ 0x28
 800293e:	2014      	movs	r0, #20
 8002940:	f7ff fcf6 	bl	8002330 <LCD_Draw_Box>



	//square
	LCD_Draw_Box(160,200,20,LCD_COLOR_RED);
 8002944:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002948:	2214      	movs	r2, #20
 800294a:	21c8      	movs	r1, #200	@ 0xc8
 800294c:	20a0      	movs	r0, #160	@ 0xa0
 800294e:	f7ff fcef 	bl	8002330 <LCD_Draw_Box>
	LCD_Draw_Box(180,200,20,LCD_COLOR_RED);
 8002952:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002956:	2214      	movs	r2, #20
 8002958:	21c8      	movs	r1, #200	@ 0xc8
 800295a:	20b4      	movs	r0, #180	@ 0xb4
 800295c:	f7ff fce8 	bl	8002330 <LCD_Draw_Box>
	LCD_Draw_Box(180,220,20,LCD_COLOR_RED);
 8002960:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002964:	2214      	movs	r2, #20
 8002966:	21dc      	movs	r1, #220	@ 0xdc
 8002968:	20b4      	movs	r0, #180	@ 0xb4
 800296a:	f7ff fce1 	bl	8002330 <LCD_Draw_Box>
	LCD_Draw_Box(160,220,20,LCD_COLOR_RED);
 800296e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002972:	2214      	movs	r2, #20
 8002974:	21dc      	movs	r1, #220	@ 0xdc
 8002976:	20a0      	movs	r0, #160	@ 0xa0
 8002978:	f7ff fcda 	bl	8002330 <LCD_Draw_Box>


	//L
	LCD_Draw_Box(20,220,20,LCD_COLOR_BLUE);
 800297c:	231f      	movs	r3, #31
 800297e:	2214      	movs	r2, #20
 8002980:	21dc      	movs	r1, #220	@ 0xdc
 8002982:	2014      	movs	r0, #20
 8002984:	f7ff fcd4 	bl	8002330 <LCD_Draw_Box>
	LCD_Draw_Box(20,240,20,LCD_COLOR_BLUE);
 8002988:	231f      	movs	r3, #31
 800298a:	2214      	movs	r2, #20
 800298c:	21f0      	movs	r1, #240	@ 0xf0
 800298e:	2014      	movs	r0, #20
 8002990:	f7ff fcce 	bl	8002330 <LCD_Draw_Box>
	LCD_Draw_Box(20,260,20,LCD_COLOR_BLUE);
 8002994:	231f      	movs	r3, #31
 8002996:	2214      	movs	r2, #20
 8002998:	f44f 7182 	mov.w	r1, #260	@ 0x104
 800299c:	2014      	movs	r0, #20
 800299e:	f7ff fcc7 	bl	8002330 <LCD_Draw_Box>
	LCD_Draw_Box(40,260,20,LCD_COLOR_BLUE);
 80029a2:	231f      	movs	r3, #31
 80029a4:	2214      	movs	r2, #20
 80029a6:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80029aa:	2028      	movs	r0, #40	@ 0x28
 80029ac:	f7ff fcc0 	bl	8002330 <LCD_Draw_Box>


	//other L
	LCD_Draw_Box(80,80,20,LCD_COLOR_GREEN);
 80029b0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80029b4:	2214      	movs	r2, #20
 80029b6:	2150      	movs	r1, #80	@ 0x50
 80029b8:	2050      	movs	r0, #80	@ 0x50
 80029ba:	f7ff fcb9 	bl	8002330 <LCD_Draw_Box>
	LCD_Draw_Box(80,100,20,LCD_COLOR_GREEN);
 80029be:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80029c2:	2214      	movs	r2, #20
 80029c4:	2164      	movs	r1, #100	@ 0x64
 80029c6:	2050      	movs	r0, #80	@ 0x50
 80029c8:	f7ff fcb2 	bl	8002330 <LCD_Draw_Box>
	LCD_Draw_Box(80,120,20,LCD_COLOR_GREEN);
 80029cc:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80029d0:	2214      	movs	r2, #20
 80029d2:	2178      	movs	r1, #120	@ 0x78
 80029d4:	2050      	movs	r0, #80	@ 0x50
 80029d6:	f7ff fcab 	bl	8002330 <LCD_Draw_Box>
	LCD_Draw_Box(60,120,20,LCD_COLOR_GREEN);
 80029da:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80029de:	2214      	movs	r2, #20
 80029e0:	2178      	movs	r1, #120	@ 0x78
 80029e2:	203c      	movs	r0, #60	@ 0x3c
 80029e4:	f7ff fca4 	bl	8002330 <LCD_Draw_Box>


	// smol pp
	LCD_Draw_Box(150,20,20,LCD_COLOR_BLUE2);
 80029e8:	f240 531f 	movw	r3, #1311	@ 0x51f
 80029ec:	2214      	movs	r2, #20
 80029ee:	2114      	movs	r1, #20
 80029f0:	2096      	movs	r0, #150	@ 0x96
 80029f2:	f7ff fc9d 	bl	8002330 <LCD_Draw_Box>
	LCD_Draw_Box(150,40,20,LCD_COLOR_BLUE2);
 80029f6:	f240 531f 	movw	r3, #1311	@ 0x51f
 80029fa:	2214      	movs	r2, #20
 80029fc:	2128      	movs	r1, #40	@ 0x28
 80029fe:	2096      	movs	r0, #150	@ 0x96
 8002a00:	f7ff fc96 	bl	8002330 <LCD_Draw_Box>
	LCD_Draw_Box(170,20,20,LCD_COLOR_BLUE2);
 8002a04:	f240 531f 	movw	r3, #1311	@ 0x51f
 8002a08:	2214      	movs	r2, #20
 8002a0a:	2114      	movs	r1, #20
 8002a0c:	20aa      	movs	r0, #170	@ 0xaa
 8002a0e:	f7ff fc8f 	bl	8002330 <LCD_Draw_Box>
	LCD_Draw_Box(130,20,20,LCD_COLOR_BLUE2);
 8002a12:	f240 531f 	movw	r3, #1311	@ 0x51f
 8002a16:	2214      	movs	r2, #20
 8002a18:	2114      	movs	r1, #20
 8002a1a:	2082      	movs	r0, #130	@ 0x82
 8002a1c:	f7ff fc88 	bl	8002330 <LCD_Draw_Box>


	//squiggle
	LCD_Draw_Box(70,170,20,LCD_COLOR_MAGENTA);
 8002a20:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002a24:	2214      	movs	r2, #20
 8002a26:	21aa      	movs	r1, #170	@ 0xaa
 8002a28:	2046      	movs	r0, #70	@ 0x46
 8002a2a:	f7ff fc81 	bl	8002330 <LCD_Draw_Box>
	LCD_Draw_Box(90,170,20,LCD_COLOR_MAGENTA);
 8002a2e:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002a32:	2214      	movs	r2, #20
 8002a34:	21aa      	movs	r1, #170	@ 0xaa
 8002a36:	205a      	movs	r0, #90	@ 0x5a
 8002a38:	f7ff fc7a 	bl	8002330 <LCD_Draw_Box>
	LCD_Draw_Box(90,190,20,LCD_COLOR_MAGENTA);
 8002a3c:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002a40:	2214      	movs	r2, #20
 8002a42:	21be      	movs	r1, #190	@ 0xbe
 8002a44:	205a      	movs	r0, #90	@ 0x5a
 8002a46:	f7ff fc73 	bl	8002330 <LCD_Draw_Box>
	LCD_Draw_Box(110,190,20,LCD_COLOR_MAGENTA);
 8002a4a:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002a4e:	2214      	movs	r2, #20
 8002a50:	21be      	movs	r1, #190	@ 0xbe
 8002a52:	206e      	movs	r0, #110	@ 0x6e
 8002a54:	f7ff fc6c 	bl	8002330 <LCD_Draw_Box>


	//other squiggle
	LCD_Draw_Box(160,270,20,LCD_COLOR_YELLOW);
 8002a58:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002a5c:	2214      	movs	r2, #20
 8002a5e:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002a62:	20a0      	movs	r0, #160	@ 0xa0
 8002a64:	f7ff fc64 	bl	8002330 <LCD_Draw_Box>
	LCD_Draw_Box(180,270,20,LCD_COLOR_YELLOW);
 8002a68:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002a6c:	2214      	movs	r2, #20
 8002a6e:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002a72:	20b4      	movs	r0, #180	@ 0xb4
 8002a74:	f7ff fc5c 	bl	8002330 <LCD_Draw_Box>
	LCD_Draw_Box(160,290,20,LCD_COLOR_YELLOW);
 8002a78:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002a7c:	2214      	movs	r2, #20
 8002a7e:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8002a82:	20a0      	movs	r0, #160	@ 0xa0
 8002a84:	f7ff fc54 	bl	8002330 <LCD_Draw_Box>
	LCD_Draw_Box(140,290,20,LCD_COLOR_YELLOW);
 8002a88:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002a8c:	2214      	movs	r2, #20
 8002a8e:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8002a92:	208c      	movs	r0, #140	@ 0x8c
 8002a94:	f7ff fc4c 	bl	8002330 <LCD_Draw_Box>

	LCD_SetTextColor(LCD_COLOR_WHITE);
 8002a98:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002a9c:	f7ff fc92 	bl	80023c4 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8002aa0:	4811      	ldr	r0, [pc, #68]	@ (8002ae8 <title_screen+0x5c4>)
 8002aa2:	f7ff fc9f 	bl	80023e4 <LCD_SetFont>
	LCD_DisplayChar(100,140,'T');
 8002aa6:	2254      	movs	r2, #84	@ 0x54
 8002aa8:	218c      	movs	r1, #140	@ 0x8c
 8002aaa:	2064      	movs	r0, #100	@ 0x64
 8002aac:	f7ff fd18 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(115,140,'E');
 8002ab0:	2245      	movs	r2, #69	@ 0x45
 8002ab2:	218c      	movs	r1, #140	@ 0x8c
 8002ab4:	2073      	movs	r0, #115	@ 0x73
 8002ab6:	f7ff fd13 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(130,140,'T');
 8002aba:	2254      	movs	r2, #84	@ 0x54
 8002abc:	218c      	movs	r1, #140	@ 0x8c
 8002abe:	2082      	movs	r0, #130	@ 0x82
 8002ac0:	f7ff fd0e 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(145,140,'R');
 8002ac4:	2252      	movs	r2, #82	@ 0x52
 8002ac6:	218c      	movs	r1, #140	@ 0x8c
 8002ac8:	2091      	movs	r0, #145	@ 0x91
 8002aca:	f7ff fd09 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(155,140,'I');
 8002ace:	2249      	movs	r2, #73	@ 0x49
 8002ad0:	218c      	movs	r1, #140	@ 0x8c
 8002ad2:	209b      	movs	r0, #155	@ 0x9b
 8002ad4:	f7ff fd04 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(165,140,'S');
 8002ad8:	2253      	movs	r2, #83	@ 0x53
 8002ada:	218c      	movs	r1, #140	@ 0x8c
 8002adc:	20a5      	movs	r0, #165	@ 0xa5
 8002ade:	f7ff fcff 	bl	80024e0 <LCD_DisplayChar>

}
 8002ae2:	bf00      	nop
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	20000004 	.word	0x20000004

08002aec <game_screen>:
void game_screen(void){
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
	LCD_Clear(0, LCD_COLOR_BLACK);
 8002af2:	2100      	movs	r1, #0
 8002af4:	2000      	movs	r0, #0
 8002af6:	f7ff fc43 	bl	8002380 <LCD_Clear>
	for(uint16_t i = 30;i < 230; i=i+20 ){
 8002afa:	231e      	movs	r3, #30
 8002afc:	80fb      	strh	r3, [r7, #6]
 8002afe:	e009      	b.n	8002b14 <game_screen+0x28>
		LCD_Draw_Vertical_Line(i, 40, 220,LCD_COLOR_WHITE);
 8002b00:	88f8      	ldrh	r0, [r7, #6]
 8002b02:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b06:	22dc      	movs	r2, #220	@ 0xdc
 8002b08:	2128      	movs	r1, #40	@ 0x28
 8002b0a:	f7ff fbc3 	bl	8002294 <LCD_Draw_Vertical_Line>
	for(uint16_t i = 30;i < 230; i=i+20 ){
 8002b0e:	88fb      	ldrh	r3, [r7, #6]
 8002b10:	3314      	adds	r3, #20
 8002b12:	80fb      	strh	r3, [r7, #6]
 8002b14:	88fb      	ldrh	r3, [r7, #6]
 8002b16:	2be5      	cmp	r3, #229	@ 0xe5
 8002b18:	d9f2      	bls.n	8002b00 <game_screen+0x14>

	}
	for(uint16_t i = 40;i < 280; i=i + 20){
 8002b1a:	2328      	movs	r3, #40	@ 0x28
 8002b1c:	80bb      	strh	r3, [r7, #4]
 8002b1e:	e009      	b.n	8002b34 <game_screen+0x48>
		LCD_Draw_Horizontal_Line(30, i, 180,LCD_COLOR_WHITE);
 8002b20:	88b9      	ldrh	r1, [r7, #4]
 8002b22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b26:	22b4      	movs	r2, #180	@ 0xb4
 8002b28:	201e      	movs	r0, #30
 8002b2a:	f7ff fbda 	bl	80022e2 <LCD_Draw_Horizontal_Line>
	for(uint16_t i = 40;i < 280; i=i + 20){
 8002b2e:	88bb      	ldrh	r3, [r7, #4]
 8002b30:	3314      	adds	r3, #20
 8002b32:	80bb      	strh	r3, [r7, #4]
 8002b34:	88bb      	ldrh	r3, [r7, #4]
 8002b36:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8002b3a:	d3f1      	bcc.n	8002b20 <game_screen+0x34>

	}
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8002b3c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002b40:	f7ff fc40 	bl	80023c4 <LCD_SetTextColor>
	LCD_SetFont(&Font12x12);
 8002b44:	4812      	ldr	r0, [pc, #72]	@ (8002b90 <game_screen+0xa4>)
 8002b46:	f7ff fc4d 	bl	80023e4 <LCD_SetFont>
	LCD_DisplayChar(100,25,'T');
 8002b4a:	2254      	movs	r2, #84	@ 0x54
 8002b4c:	2119      	movs	r1, #25
 8002b4e:	2064      	movs	r0, #100	@ 0x64
 8002b50:	f7ff fcc6 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(107,25,'E');
 8002b54:	2245      	movs	r2, #69	@ 0x45
 8002b56:	2119      	movs	r1, #25
 8002b58:	206b      	movs	r0, #107	@ 0x6b
 8002b5a:	f7ff fcc1 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(114,25,'T');
 8002b5e:	2254      	movs	r2, #84	@ 0x54
 8002b60:	2119      	movs	r1, #25
 8002b62:	2072      	movs	r0, #114	@ 0x72
 8002b64:	f7ff fcbc 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(120,25,'R');
 8002b68:	2252      	movs	r2, #82	@ 0x52
 8002b6a:	2119      	movs	r1, #25
 8002b6c:	2078      	movs	r0, #120	@ 0x78
 8002b6e:	f7ff fcb7 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(127,25,'I');
 8002b72:	2249      	movs	r2, #73	@ 0x49
 8002b74:	2119      	movs	r1, #25
 8002b76:	207f      	movs	r0, #127	@ 0x7f
 8002b78:	f7ff fcb2 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(130,25,'S');
 8002b7c:	2253      	movs	r2, #83	@ 0x53
 8002b7e:	2119      	movs	r1, #25
 8002b80:	2082      	movs	r0, #130	@ 0x82
 8002b82:	f7ff fcad 	bl	80024e0 <LCD_DisplayChar>
}
 8002b86:	bf00      	nop
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	2000000c 	.word	0x2000000c

08002b94 <end_screen>:
void end_screen(void){
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
	LCD_Clear(0, LCD_COLOR_BLACK);
 8002b98:	2100      	movs	r1, #0
 8002b9a:	2000      	movs	r0, #0
 8002b9c:	f7ff fbf0 	bl	8002380 <LCD_Clear>
	LCD_SetFont(&Font16x24);
 8002ba0:	4879      	ldr	r0, [pc, #484]	@ (8002d88 <end_screen+0x1f4>)
 8002ba2:	f7ff fc1f 	bl	80023e4 <LCD_SetFont>
	LCD_DisplayChar(120,140,'G');
 8002ba6:	2247      	movs	r2, #71	@ 0x47
 8002ba8:	218c      	movs	r1, #140	@ 0x8c
 8002baa:	2078      	movs	r0, #120	@ 0x78
 8002bac:	f7ff fc98 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(135,140,'A');
 8002bb0:	2241      	movs	r2, #65	@ 0x41
 8002bb2:	218c      	movs	r1, #140	@ 0x8c
 8002bb4:	2087      	movs	r0, #135	@ 0x87
 8002bb6:	f7ff fc93 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(150,140,'M');
 8002bba:	224d      	movs	r2, #77	@ 0x4d
 8002bbc:	218c      	movs	r1, #140	@ 0x8c
 8002bbe:	2096      	movs	r0, #150	@ 0x96
 8002bc0:	f7ff fc8e 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(165,140,'E');
 8002bc4:	2245      	movs	r2, #69	@ 0x45
 8002bc6:	218c      	movs	r1, #140	@ 0x8c
 8002bc8:	20a5      	movs	r0, #165	@ 0xa5
 8002bca:	f7ff fc89 	bl	80024e0 <LCD_DisplayChar>

	LCD_DisplayChar(120,170,'O');
 8002bce:	224f      	movs	r2, #79	@ 0x4f
 8002bd0:	21aa      	movs	r1, #170	@ 0xaa
 8002bd2:	2078      	movs	r0, #120	@ 0x78
 8002bd4:	f7ff fc84 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(135,170,'V');
 8002bd8:	2256      	movs	r2, #86	@ 0x56
 8002bda:	21aa      	movs	r1, #170	@ 0xaa
 8002bdc:	2087      	movs	r0, #135	@ 0x87
 8002bde:	f7ff fc7f 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(150,170,'E');
 8002be2:	2245      	movs	r2, #69	@ 0x45
 8002be4:	21aa      	movs	r1, #170	@ 0xaa
 8002be6:	2096      	movs	r0, #150	@ 0x96
 8002be8:	f7ff fc7a 	bl	80024e0 <LCD_DisplayChar>
	LCD_DisplayChar(165,170,'R');
 8002bec:	2252      	movs	r2, #82	@ 0x52
 8002bee:	21aa      	movs	r1, #170	@ 0xaa
 8002bf0:	20a5      	movs	r0, #165	@ 0xa5
 8002bf2:	f7ff fc75 	bl	80024e0 <LCD_DisplayChar>




	//line
		LCD_Draw_Box(20,80,20,LCD_COLOR_CYAN);
 8002bf6:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8002bfa:	2214      	movs	r2, #20
 8002bfc:	2150      	movs	r1, #80	@ 0x50
 8002bfe:	2014      	movs	r0, #20
 8002c00:	f7ff fb96 	bl	8002330 <LCD_Draw_Box>
		LCD_Draw_Box(20,60,20,LCD_COLOR_CYAN);
 8002c04:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8002c08:	2214      	movs	r2, #20
 8002c0a:	213c      	movs	r1, #60	@ 0x3c
 8002c0c:	2014      	movs	r0, #20
 8002c0e:	f7ff fb8f 	bl	8002330 <LCD_Draw_Box>
		LCD_Draw_Box(20,20,20,LCD_COLOR_CYAN);
 8002c12:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8002c16:	2214      	movs	r2, #20
 8002c18:	2114      	movs	r1, #20
 8002c1a:	2014      	movs	r0, #20
 8002c1c:	f7ff fb88 	bl	8002330 <LCD_Draw_Box>
		LCD_Draw_Box(20,40,20,LCD_COLOR_CYAN);
 8002c20:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8002c24:	2214      	movs	r2, #20
 8002c26:	2128      	movs	r1, #40	@ 0x28
 8002c28:	2014      	movs	r0, #20
 8002c2a:	f7ff fb81 	bl	8002330 <LCD_Draw_Box>



		//square
		LCD_Draw_Box(160,200,20,LCD_COLOR_RED);
 8002c2e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002c32:	2214      	movs	r2, #20
 8002c34:	21c8      	movs	r1, #200	@ 0xc8
 8002c36:	20a0      	movs	r0, #160	@ 0xa0
 8002c38:	f7ff fb7a 	bl	8002330 <LCD_Draw_Box>
		LCD_Draw_Box(180,200,20,LCD_COLOR_RED);
 8002c3c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002c40:	2214      	movs	r2, #20
 8002c42:	21c8      	movs	r1, #200	@ 0xc8
 8002c44:	20b4      	movs	r0, #180	@ 0xb4
 8002c46:	f7ff fb73 	bl	8002330 <LCD_Draw_Box>
		LCD_Draw_Box(180,220,20,LCD_COLOR_RED);
 8002c4a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002c4e:	2214      	movs	r2, #20
 8002c50:	21dc      	movs	r1, #220	@ 0xdc
 8002c52:	20b4      	movs	r0, #180	@ 0xb4
 8002c54:	f7ff fb6c 	bl	8002330 <LCD_Draw_Box>
		LCD_Draw_Box(160,220,20,LCD_COLOR_RED);
 8002c58:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002c5c:	2214      	movs	r2, #20
 8002c5e:	21dc      	movs	r1, #220	@ 0xdc
 8002c60:	20a0      	movs	r0, #160	@ 0xa0
 8002c62:	f7ff fb65 	bl	8002330 <LCD_Draw_Box>


		//L
		LCD_Draw_Box(20,220,20,LCD_COLOR_BLUE);
 8002c66:	231f      	movs	r3, #31
 8002c68:	2214      	movs	r2, #20
 8002c6a:	21dc      	movs	r1, #220	@ 0xdc
 8002c6c:	2014      	movs	r0, #20
 8002c6e:	f7ff fb5f 	bl	8002330 <LCD_Draw_Box>
		LCD_Draw_Box(20,240,20,LCD_COLOR_BLUE);
 8002c72:	231f      	movs	r3, #31
 8002c74:	2214      	movs	r2, #20
 8002c76:	21f0      	movs	r1, #240	@ 0xf0
 8002c78:	2014      	movs	r0, #20
 8002c7a:	f7ff fb59 	bl	8002330 <LCD_Draw_Box>
		LCD_Draw_Box(20,260,20,LCD_COLOR_BLUE);
 8002c7e:	231f      	movs	r3, #31
 8002c80:	2214      	movs	r2, #20
 8002c82:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8002c86:	2014      	movs	r0, #20
 8002c88:	f7ff fb52 	bl	8002330 <LCD_Draw_Box>
		LCD_Draw_Box(40,260,20,LCD_COLOR_BLUE);
 8002c8c:	231f      	movs	r3, #31
 8002c8e:	2214      	movs	r2, #20
 8002c90:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8002c94:	2028      	movs	r0, #40	@ 0x28
 8002c96:	f7ff fb4b 	bl	8002330 <LCD_Draw_Box>


		//other L
		LCD_Draw_Box(80,80,20,LCD_COLOR_GREEN);
 8002c9a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002c9e:	2214      	movs	r2, #20
 8002ca0:	2150      	movs	r1, #80	@ 0x50
 8002ca2:	2050      	movs	r0, #80	@ 0x50
 8002ca4:	f7ff fb44 	bl	8002330 <LCD_Draw_Box>
		LCD_Draw_Box(80,100,20,LCD_COLOR_GREEN);
 8002ca8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002cac:	2214      	movs	r2, #20
 8002cae:	2164      	movs	r1, #100	@ 0x64
 8002cb0:	2050      	movs	r0, #80	@ 0x50
 8002cb2:	f7ff fb3d 	bl	8002330 <LCD_Draw_Box>
		LCD_Draw_Box(80,120,20,LCD_COLOR_GREEN);
 8002cb6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002cba:	2214      	movs	r2, #20
 8002cbc:	2178      	movs	r1, #120	@ 0x78
 8002cbe:	2050      	movs	r0, #80	@ 0x50
 8002cc0:	f7ff fb36 	bl	8002330 <LCD_Draw_Box>
		LCD_Draw_Box(60,120,20,LCD_COLOR_GREEN);
 8002cc4:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002cc8:	2214      	movs	r2, #20
 8002cca:	2178      	movs	r1, #120	@ 0x78
 8002ccc:	203c      	movs	r0, #60	@ 0x3c
 8002cce:	f7ff fb2f 	bl	8002330 <LCD_Draw_Box>


		// smol pp
		LCD_Draw_Box(150,20,20,LCD_COLOR_BLUE2);
 8002cd2:	f240 531f 	movw	r3, #1311	@ 0x51f
 8002cd6:	2214      	movs	r2, #20
 8002cd8:	2114      	movs	r1, #20
 8002cda:	2096      	movs	r0, #150	@ 0x96
 8002cdc:	f7ff fb28 	bl	8002330 <LCD_Draw_Box>
		LCD_Draw_Box(150,40,20,LCD_COLOR_BLUE2);
 8002ce0:	f240 531f 	movw	r3, #1311	@ 0x51f
 8002ce4:	2214      	movs	r2, #20
 8002ce6:	2128      	movs	r1, #40	@ 0x28
 8002ce8:	2096      	movs	r0, #150	@ 0x96
 8002cea:	f7ff fb21 	bl	8002330 <LCD_Draw_Box>
		LCD_Draw_Box(170,20,20,LCD_COLOR_BLUE2);
 8002cee:	f240 531f 	movw	r3, #1311	@ 0x51f
 8002cf2:	2214      	movs	r2, #20
 8002cf4:	2114      	movs	r1, #20
 8002cf6:	20aa      	movs	r0, #170	@ 0xaa
 8002cf8:	f7ff fb1a 	bl	8002330 <LCD_Draw_Box>
		LCD_Draw_Box(130,20,20,LCD_COLOR_BLUE2);
 8002cfc:	f240 531f 	movw	r3, #1311	@ 0x51f
 8002d00:	2214      	movs	r2, #20
 8002d02:	2114      	movs	r1, #20
 8002d04:	2082      	movs	r0, #130	@ 0x82
 8002d06:	f7ff fb13 	bl	8002330 <LCD_Draw_Box>


		//squiggle
		LCD_Draw_Box(70,170,20,LCD_COLOR_MAGENTA);
 8002d0a:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002d0e:	2214      	movs	r2, #20
 8002d10:	21aa      	movs	r1, #170	@ 0xaa
 8002d12:	2046      	movs	r0, #70	@ 0x46
 8002d14:	f7ff fb0c 	bl	8002330 <LCD_Draw_Box>
		LCD_Draw_Box(90,170,20,LCD_COLOR_MAGENTA);
 8002d18:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002d1c:	2214      	movs	r2, #20
 8002d1e:	21aa      	movs	r1, #170	@ 0xaa
 8002d20:	205a      	movs	r0, #90	@ 0x5a
 8002d22:	f7ff fb05 	bl	8002330 <LCD_Draw_Box>
		LCD_Draw_Box(90,190,20,LCD_COLOR_MAGENTA);
 8002d26:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002d2a:	2214      	movs	r2, #20
 8002d2c:	21be      	movs	r1, #190	@ 0xbe
 8002d2e:	205a      	movs	r0, #90	@ 0x5a
 8002d30:	f7ff fafe 	bl	8002330 <LCD_Draw_Box>
		LCD_Draw_Box(110,190,20,LCD_COLOR_MAGENTA);
 8002d34:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002d38:	2214      	movs	r2, #20
 8002d3a:	21be      	movs	r1, #190	@ 0xbe
 8002d3c:	206e      	movs	r0, #110	@ 0x6e
 8002d3e:	f7ff faf7 	bl	8002330 <LCD_Draw_Box>


		//other squiggle
		LCD_Draw_Box(160,270,20,LCD_COLOR_YELLOW);
 8002d42:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002d46:	2214      	movs	r2, #20
 8002d48:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002d4c:	20a0      	movs	r0, #160	@ 0xa0
 8002d4e:	f7ff faef 	bl	8002330 <LCD_Draw_Box>
		LCD_Draw_Box(180,270,20,LCD_COLOR_YELLOW);
 8002d52:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002d56:	2214      	movs	r2, #20
 8002d58:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002d5c:	20b4      	movs	r0, #180	@ 0xb4
 8002d5e:	f7ff fae7 	bl	8002330 <LCD_Draw_Box>
		LCD_Draw_Box(160,290,20,LCD_COLOR_YELLOW);
 8002d62:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002d66:	2214      	movs	r2, #20
 8002d68:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8002d6c:	20a0      	movs	r0, #160	@ 0xa0
 8002d6e:	f7ff fadf 	bl	8002330 <LCD_Draw_Box>
		LCD_Draw_Box(140,290,20,LCD_COLOR_YELLOW);
 8002d72:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002d76:	2214      	movs	r2, #20
 8002d78:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8002d7c:	208c      	movs	r0, #140	@ 0x8c
 8002d7e:	f7ff fad7 	bl	8002330 <LCD_Draw_Box>
}
 8002d82:	bf00      	nop
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	20000004 	.word	0x20000004

08002d8c <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d90:	b672      	cpsid	i
}
 8002d92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d94:	bf00      	nop
 8002d96:	e7fd      	b.n	8002d94 <LCD_Error_Handler+0x8>

08002d98 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8002d9c:	f000 fe4a 	bl	8003a34 <STMPE811_Init>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d001      	beq.n	8002daa <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8002da6:	bf00      	nop
 8002da8:	e7fd      	b.n	8002da6 <InitializeLCDTouch+0xe>
  }
}
 8002daa:	bf00      	nop
 8002dac:	bd80      	pop	{r7, pc}

08002dae <ReadRegisterFromTouchModule>:
{
	STMPE811_DetermineTouchPosition(touchStruct);
}

uint8_t ReadRegisterFromTouchModule(uint8_t RegToRead)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b082      	sub	sp, #8
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	4603      	mov	r3, r0
 8002db6:	71fb      	strb	r3, [r7, #7]
	return STMPE811_Read(RegToRead);
 8002db8:	79fb      	ldrb	r3, [r7, #7]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 ff01 	bl	8003bc2 <STMPE811_Read>
 8002dc0:	4603      	mov	r3, r0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <WriteDataToTouchModule>:

void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b082      	sub	sp, #8
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	460a      	mov	r2, r1
 8002dd4:	71fb      	strb	r3, [r7, #7]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	71bb      	strb	r3, [r7, #6]
	STMPE811_Write(RegToWrite, writeData);
 8002dda:	79ba      	ldrb	r2, [r7, #6]
 8002ddc:	79fb      	ldrb	r3, [r7, #7]
 8002dde:	4611      	mov	r1, r2
 8002de0:	4618      	mov	r0, r3
 8002de2:	f000 feff 	bl	8003be4 <STMPE811_Write>
}
 8002de6:	bf00      	nop
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
	...

08002df0 <getScheduledEvents>:
 */
#include "Scheduler.h"

static uint32_t scheduledEvents;

uint32_t getScheduledEvents(void){
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
	return scheduledEvents;
 8002df4:	4b03      	ldr	r3, [pc, #12]	@ (8002e04 <getScheduledEvents+0x14>)
 8002df6:	681b      	ldr	r3, [r3, #0]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	200259b4 	.word	0x200259b4

08002e08 <addSchedulerEvent>:
void addSchedulerEvent(uint32_t fent){
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
	scheduledEvents |=  fent;
 8002e10:	4b05      	ldr	r3, [pc, #20]	@ (8002e28 <addSchedulerEvent+0x20>)
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	4a03      	ldr	r2, [pc, #12]	@ (8002e28 <addSchedulerEvent+0x20>)
 8002e1a:	6013      	str	r3, [r2, #0]
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	200259b4 	.word	0x200259b4

08002e2c <removeSchedulerEvent>:
void removeSchedulerEvent(uint32_t fent){
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
	scheduledEvents &= ~ fent;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	43da      	mvns	r2, r3
 8002e38:	4b05      	ldr	r3, [pc, #20]	@ (8002e50 <removeSchedulerEvent+0x24>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	4a04      	ldr	r2, [pc, #16]	@ (8002e50 <removeSchedulerEvent+0x24>)
 8002e40:	6013      	str	r3, [r2, #0]
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	200259b4 	.word	0x200259b4

08002e54 <TIM2_IRQHandler>:
void tim2Stop(){
	__HAL_TIM_ENABLE_IT( &timer,TIM_IT_UPDATE);
	HAL_TIM_Base_Stop_IT(&timer);
	__HAL_TIM_CLEAR_IT(&timer,TIM_IT_UPDATE);
}
void TIM2_IRQHandler(){
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e58:	201c      	movs	r0, #28
 8002e5a:	f001 fa2e 	bl	80042ba <HAL_NVIC_EnableIRQ>
	__HAL_TIM_CLEAR_IT(&timer,TIM_IT_UPDATE);
 8002e5e:	4b06      	ldr	r3, [pc, #24]	@ (8002e78 <TIM2_IRQHandler+0x24>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f06f 0201 	mvn.w	r2, #1
 8002e66:	611a      	str	r2, [r3, #16]
	// move down code
	addSchedulerEvent(BlockDown);
 8002e68:	2001      	movs	r0, #1
 8002e6a:	f7ff ffcd 	bl	8002e08 <addSchedulerEvent>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e6e:	201c      	movs	r0, #28
 8002e70:	f001 fa23 	bl	80042ba <HAL_NVIC_EnableIRQ>
}
 8002e74:	bf00      	nop
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	200259b8 	.word	0x200259b8

08002e7c <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002e80:	f000 f9fe 	bl	8003280 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8002e84:	20ca      	movs	r0, #202	@ 0xca
 8002e86:	f000 f943 	bl	8003110 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8002e8a:	20c3      	movs	r0, #195	@ 0xc3
 8002e8c:	f000 f94d 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8002e90:	2008      	movs	r0, #8
 8002e92:	f000 f94a 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8002e96:	2050      	movs	r0, #80	@ 0x50
 8002e98:	f000 f947 	bl	800312a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8002e9c:	20cf      	movs	r0, #207	@ 0xcf
 8002e9e:	f000 f937 	bl	8003110 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	f000 f941 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8002ea8:	20c1      	movs	r0, #193	@ 0xc1
 8002eaa:	f000 f93e 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8002eae:	2030      	movs	r0, #48	@ 0x30
 8002eb0:	f000 f93b 	bl	800312a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8002eb4:	20ed      	movs	r0, #237	@ 0xed
 8002eb6:	f000 f92b 	bl	8003110 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8002eba:	2064      	movs	r0, #100	@ 0x64
 8002ebc:	f000 f935 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8002ec0:	2003      	movs	r0, #3
 8002ec2:	f000 f932 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8002ec6:	2012      	movs	r0, #18
 8002ec8:	f000 f92f 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8002ecc:	2081      	movs	r0, #129	@ 0x81
 8002ece:	f000 f92c 	bl	800312a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8002ed2:	20e8      	movs	r0, #232	@ 0xe8
 8002ed4:	f000 f91c 	bl	8003110 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8002ed8:	2085      	movs	r0, #133	@ 0x85
 8002eda:	f000 f926 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002ede:	2000      	movs	r0, #0
 8002ee0:	f000 f923 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8002ee4:	2078      	movs	r0, #120	@ 0x78
 8002ee6:	f000 f920 	bl	800312a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8002eea:	20cb      	movs	r0, #203	@ 0xcb
 8002eec:	f000 f910 	bl	8003110 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8002ef0:	2039      	movs	r0, #57	@ 0x39
 8002ef2:	f000 f91a 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8002ef6:	202c      	movs	r0, #44	@ 0x2c
 8002ef8:	f000 f917 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002efc:	2000      	movs	r0, #0
 8002efe:	f000 f914 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8002f02:	2034      	movs	r0, #52	@ 0x34
 8002f04:	f000 f911 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8002f08:	2002      	movs	r0, #2
 8002f0a:	f000 f90e 	bl	800312a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8002f0e:	20f7      	movs	r0, #247	@ 0xf7
 8002f10:	f000 f8fe 	bl	8003110 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8002f14:	2020      	movs	r0, #32
 8002f16:	f000 f908 	bl	800312a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8002f1a:	20ea      	movs	r0, #234	@ 0xea
 8002f1c:	f000 f8f8 	bl	8003110 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002f20:	2000      	movs	r0, #0
 8002f22:	f000 f902 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002f26:	2000      	movs	r0, #0
 8002f28:	f000 f8ff 	bl	800312a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8002f2c:	20b1      	movs	r0, #177	@ 0xb1
 8002f2e:	f000 f8ef 	bl	8003110 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002f32:	2000      	movs	r0, #0
 8002f34:	f000 f8f9 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8002f38:	201b      	movs	r0, #27
 8002f3a:	f000 f8f6 	bl	800312a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8002f3e:	20b6      	movs	r0, #182	@ 0xb6
 8002f40:	f000 f8e6 	bl	8003110 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8002f44:	200a      	movs	r0, #10
 8002f46:	f000 f8f0 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8002f4a:	20a2      	movs	r0, #162	@ 0xa2
 8002f4c:	f000 f8ed 	bl	800312a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8002f50:	20c0      	movs	r0, #192	@ 0xc0
 8002f52:	f000 f8dd 	bl	8003110 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8002f56:	2010      	movs	r0, #16
 8002f58:	f000 f8e7 	bl	800312a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8002f5c:	20c1      	movs	r0, #193	@ 0xc1
 8002f5e:	f000 f8d7 	bl	8003110 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8002f62:	2010      	movs	r0, #16
 8002f64:	f000 f8e1 	bl	800312a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8002f68:	20c5      	movs	r0, #197	@ 0xc5
 8002f6a:	f000 f8d1 	bl	8003110 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8002f6e:	2045      	movs	r0, #69	@ 0x45
 8002f70:	f000 f8db 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8002f74:	2015      	movs	r0, #21
 8002f76:	f000 f8d8 	bl	800312a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8002f7a:	20c7      	movs	r0, #199	@ 0xc7
 8002f7c:	f000 f8c8 	bl	8003110 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8002f80:	2090      	movs	r0, #144	@ 0x90
 8002f82:	f000 f8d2 	bl	800312a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8002f86:	2036      	movs	r0, #54	@ 0x36
 8002f88:	f000 f8c2 	bl	8003110 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8002f8c:	20c8      	movs	r0, #200	@ 0xc8
 8002f8e:	f000 f8cc 	bl	800312a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8002f92:	20f2      	movs	r0, #242	@ 0xf2
 8002f94:	f000 f8bc 	bl	8003110 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002f98:	2000      	movs	r0, #0
 8002f9a:	f000 f8c6 	bl	800312a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8002f9e:	20b0      	movs	r0, #176	@ 0xb0
 8002fa0:	f000 f8b6 	bl	8003110 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8002fa4:	20c2      	movs	r0, #194	@ 0xc2
 8002fa6:	f000 f8c0 	bl	800312a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8002faa:	20b6      	movs	r0, #182	@ 0xb6
 8002fac:	f000 f8b0 	bl	8003110 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8002fb0:	200a      	movs	r0, #10
 8002fb2:	f000 f8ba 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8002fb6:	20a7      	movs	r0, #167	@ 0xa7
 8002fb8:	f000 f8b7 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8002fbc:	2027      	movs	r0, #39	@ 0x27
 8002fbe:	f000 f8b4 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8002fc2:	2004      	movs	r0, #4
 8002fc4:	f000 f8b1 	bl	800312a <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8002fc8:	202a      	movs	r0, #42	@ 0x2a
 8002fca:	f000 f8a1 	bl	8003110 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002fce:	2000      	movs	r0, #0
 8002fd0:	f000 f8ab 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	f000 f8a8 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002fda:	2000      	movs	r0, #0
 8002fdc:	f000 f8a5 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8002fe0:	20ef      	movs	r0, #239	@ 0xef
 8002fe2:	f000 f8a2 	bl	800312a <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8002fe6:	202b      	movs	r0, #43	@ 0x2b
 8002fe8:	f000 f892 	bl	8003110 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002fec:	2000      	movs	r0, #0
 8002fee:	f000 f89c 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002ff2:	2000      	movs	r0, #0
 8002ff4:	f000 f899 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8002ff8:	2001      	movs	r0, #1
 8002ffa:	f000 f896 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8002ffe:	203f      	movs	r0, #63	@ 0x3f
 8003000:	f000 f893 	bl	800312a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8003004:	20f6      	movs	r0, #246	@ 0xf6
 8003006:	f000 f883 	bl	8003110 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 800300a:	2001      	movs	r0, #1
 800300c:	f000 f88d 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003010:	2000      	movs	r0, #0
 8003012:	f000 f88a 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8003016:	2006      	movs	r0, #6
 8003018:	f000 f887 	bl	800312a <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 800301c:	202c      	movs	r0, #44	@ 0x2c
 800301e:	f000 f877 	bl	8003110 <ili9341_Write_Reg>
  LCD_Delay(200);
 8003022:	20c8      	movs	r0, #200	@ 0xc8
 8003024:	f000 f9e8 	bl	80033f8 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8003028:	2026      	movs	r0, #38	@ 0x26
 800302a:	f000 f871 	bl	8003110 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 800302e:	2001      	movs	r0, #1
 8003030:	f000 f87b 	bl	800312a <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8003034:	20e0      	movs	r0, #224	@ 0xe0
 8003036:	f000 f86b 	bl	8003110 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 800303a:	200f      	movs	r0, #15
 800303c:	f000 f875 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8003040:	2029      	movs	r0, #41	@ 0x29
 8003042:	f000 f872 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8003046:	2024      	movs	r0, #36	@ 0x24
 8003048:	f000 f86f 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 800304c:	200c      	movs	r0, #12
 800304e:	f000 f86c 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8003052:	200e      	movs	r0, #14
 8003054:	f000 f869 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8003058:	2009      	movs	r0, #9
 800305a:	f000 f866 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 800305e:	204e      	movs	r0, #78	@ 0x4e
 8003060:	f000 f863 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8003064:	2078      	movs	r0, #120	@ 0x78
 8003066:	f000 f860 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 800306a:	203c      	movs	r0, #60	@ 0x3c
 800306c:	f000 f85d 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8003070:	2009      	movs	r0, #9
 8003072:	f000 f85a 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8003076:	2013      	movs	r0, #19
 8003078:	f000 f857 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 800307c:	2005      	movs	r0, #5
 800307e:	f000 f854 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8003082:	2017      	movs	r0, #23
 8003084:	f000 f851 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8003088:	2011      	movs	r0, #17
 800308a:	f000 f84e 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800308e:	2000      	movs	r0, #0
 8003090:	f000 f84b 	bl	800312a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8003094:	20e1      	movs	r0, #225	@ 0xe1
 8003096:	f000 f83b 	bl	8003110 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800309a:	2000      	movs	r0, #0
 800309c:	f000 f845 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 80030a0:	2016      	movs	r0, #22
 80030a2:	f000 f842 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80030a6:	201b      	movs	r0, #27
 80030a8:	f000 f83f 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80030ac:	2004      	movs	r0, #4
 80030ae:	f000 f83c 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80030b2:	2011      	movs	r0, #17
 80030b4:	f000 f839 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 80030b8:	2007      	movs	r0, #7
 80030ba:	f000 f836 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 80030be:	2031      	movs	r0, #49	@ 0x31
 80030c0:	f000 f833 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 80030c4:	2033      	movs	r0, #51	@ 0x33
 80030c6:	f000 f830 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 80030ca:	2042      	movs	r0, #66	@ 0x42
 80030cc:	f000 f82d 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80030d0:	2005      	movs	r0, #5
 80030d2:	f000 f82a 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80030d6:	200c      	movs	r0, #12
 80030d8:	f000 f827 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 80030dc:	200a      	movs	r0, #10
 80030de:	f000 f824 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 80030e2:	2028      	movs	r0, #40	@ 0x28
 80030e4:	f000 f821 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 80030e8:	202f      	movs	r0, #47	@ 0x2f
 80030ea:	f000 f81e 	bl	800312a <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 80030ee:	200f      	movs	r0, #15
 80030f0:	f000 f81b 	bl	800312a <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 80030f4:	2011      	movs	r0, #17
 80030f6:	f000 f80b 	bl	8003110 <ili9341_Write_Reg>
  LCD_Delay(200);
 80030fa:	20c8      	movs	r0, #200	@ 0xc8
 80030fc:	f000 f97c 	bl	80033f8 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8003100:	2029      	movs	r0, #41	@ 0x29
 8003102:	f000 f805 	bl	8003110 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8003106:	202c      	movs	r0, #44	@ 0x2c
 8003108:	f000 f802 	bl	8003110 <ili9341_Write_Reg>
}
 800310c:	bf00      	nop
 800310e:	bd80      	pop	{r7, pc}

08003110 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	4603      	mov	r3, r0
 8003118:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 800311a:	79fb      	ldrb	r3, [r7, #7]
 800311c:	4618      	mov	r0, r3
 800311e:	f000 f949 	bl	80033b4 <LCD_IO_WriteReg>
}
 8003122:	bf00      	nop
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b082      	sub	sp, #8
 800312e:	af00      	add	r7, sp, #0
 8003130:	4603      	mov	r3, r0
 8003132:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8003134:	88fb      	ldrh	r3, [r7, #6]
 8003136:	4618      	mov	r0, r3
 8003138:	f000 f91a 	bl	8003370 <LCD_IO_WriteData>
}
 800313c:	bf00      	nop
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8003148:	4819      	ldr	r0, [pc, #100]	@ (80031b0 <SPI_Init+0x6c>)
 800314a:	f003 feda 	bl	8006f02 <HAL_SPI_GetState>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d12b      	bne.n	80031ac <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8003154:	4b16      	ldr	r3, [pc, #88]	@ (80031b0 <SPI_Init+0x6c>)
 8003156:	4a17      	ldr	r2, [pc, #92]	@ (80031b4 <SPI_Init+0x70>)
 8003158:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800315a:	4b15      	ldr	r3, [pc, #84]	@ (80031b0 <SPI_Init+0x6c>)
 800315c:	2218      	movs	r2, #24
 800315e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8003160:	4b13      	ldr	r3, [pc, #76]	@ (80031b0 <SPI_Init+0x6c>)
 8003162:	2200      	movs	r2, #0
 8003164:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8003166:	4b12      	ldr	r3, [pc, #72]	@ (80031b0 <SPI_Init+0x6c>)
 8003168:	2200      	movs	r2, #0
 800316a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800316c:	4b10      	ldr	r3, [pc, #64]	@ (80031b0 <SPI_Init+0x6c>)
 800316e:	2200      	movs	r2, #0
 8003170:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8003172:	4b0f      	ldr	r3, [pc, #60]	@ (80031b0 <SPI_Init+0x6c>)
 8003174:	2200      	movs	r2, #0
 8003176:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8003178:	4b0d      	ldr	r3, [pc, #52]	@ (80031b0 <SPI_Init+0x6c>)
 800317a:	2207      	movs	r2, #7
 800317c:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800317e:	4b0c      	ldr	r3, [pc, #48]	@ (80031b0 <SPI_Init+0x6c>)
 8003180:	2200      	movs	r2, #0
 8003182:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8003184:	4b0a      	ldr	r3, [pc, #40]	@ (80031b0 <SPI_Init+0x6c>)
 8003186:	2200      	movs	r2, #0
 8003188:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800318a:	4b09      	ldr	r3, [pc, #36]	@ (80031b0 <SPI_Init+0x6c>)
 800318c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003190:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8003192:	4b07      	ldr	r3, [pc, #28]	@ (80031b0 <SPI_Init+0x6c>)
 8003194:	2200      	movs	r2, #0
 8003196:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8003198:	4b05      	ldr	r3, [pc, #20]	@ (80031b0 <SPI_Init+0x6c>)
 800319a:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800319e:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 80031a0:	4803      	ldr	r0, [pc, #12]	@ (80031b0 <SPI_Init+0x6c>)
 80031a2:	f000 f833 	bl	800320c <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80031a6:	4802      	ldr	r0, [pc, #8]	@ (80031b0 <SPI_Init+0x6c>)
 80031a8:	f003 fcb6 	bl	8006b18 <HAL_SPI_Init>
  }
}
 80031ac:	bf00      	nop
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	20025a00 	.word	0x20025a00
 80031b4:	40015000 	.word	0x40015000

080031b8 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	4603      	mov	r3, r0
 80031c0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80031c2:	2300      	movs	r3, #0
 80031c4:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 80031c6:	4b09      	ldr	r3, [pc, #36]	@ (80031ec <SPI_Write+0x34>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	1db9      	adds	r1, r7, #6
 80031cc:	2201      	movs	r2, #1
 80031ce:	4808      	ldr	r0, [pc, #32]	@ (80031f0 <SPI_Write+0x38>)
 80031d0:	f003 fd53 	bl	8006c7a <HAL_SPI_Transmit>
 80031d4:	4603      	mov	r3, r0
 80031d6:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 80031d8:	7bfb      	ldrb	r3, [r7, #15]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 80031de:	f000 f809 	bl	80031f4 <SPI_Error>
  }
}
 80031e2:	bf00      	nop
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	20000014 	.word	0x20000014
 80031f0:	20025a00 	.word	0x20025a00

080031f4 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80031f8:	4803      	ldr	r0, [pc, #12]	@ (8003208 <SPI_Error+0x14>)
 80031fa:	f003 fd16 	bl	8006c2a <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 80031fe:	f7ff ffa1 	bl	8003144 <SPI_Init>
}
 8003202:	bf00      	nop
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	20025a00 	.word	0x20025a00

0800320c <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b08a      	sub	sp, #40	@ 0x28
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8003214:	2300      	movs	r3, #0
 8003216:	613b      	str	r3, [r7, #16]
 8003218:	4b17      	ldr	r3, [pc, #92]	@ (8003278 <SPI_MspInit+0x6c>)
 800321a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800321c:	4a16      	ldr	r2, [pc, #88]	@ (8003278 <SPI_MspInit+0x6c>)
 800321e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003222:	6453      	str	r3, [r2, #68]	@ 0x44
 8003224:	4b14      	ldr	r3, [pc, #80]	@ (8003278 <SPI_MspInit+0x6c>)
 8003226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003228:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800322c:	613b      	str	r3, [r7, #16]
 800322e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8003230:	2300      	movs	r3, #0
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	4b10      	ldr	r3, [pc, #64]	@ (8003278 <SPI_MspInit+0x6c>)
 8003236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003238:	4a0f      	ldr	r2, [pc, #60]	@ (8003278 <SPI_MspInit+0x6c>)
 800323a:	f043 0320 	orr.w	r3, r3, #32
 800323e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003240:	4b0d      	ldr	r3, [pc, #52]	@ (8003278 <SPI_MspInit+0x6c>)
 8003242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003244:	f003 0320 	and.w	r3, r3, #32
 8003248:	60fb      	str	r3, [r7, #12]
 800324a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 800324c:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003250:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8003252:	2302      	movs	r3, #2
 8003254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8003256:	2302      	movs	r3, #2
 8003258:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800325a:	2301      	movs	r3, #1
 800325c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 800325e:	2305      	movs	r3, #5
 8003260:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8003262:	f107 0314 	add.w	r3, r7, #20
 8003266:	4619      	mov	r1, r3
 8003268:	4804      	ldr	r0, [pc, #16]	@ (800327c <SPI_MspInit+0x70>)
 800326a:	f001 f875 	bl	8004358 <HAL_GPIO_Init>
}
 800326e:	bf00      	nop
 8003270:	3728      	adds	r7, #40	@ 0x28
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	40023800 	.word	0x40023800
 800327c:	40021400 	.word	0x40021400

08003280 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b088      	sub	sp, #32
 8003284:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8003286:	4b36      	ldr	r3, [pc, #216]	@ (8003360 <LCD_IO_Init+0xe0>)
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d164      	bne.n	8003358 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 800328e:	4b34      	ldr	r3, [pc, #208]	@ (8003360 <LCD_IO_Init+0xe0>)
 8003290:	2201      	movs	r2, #1
 8003292:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8003294:	2300      	movs	r3, #0
 8003296:	60bb      	str	r3, [r7, #8]
 8003298:	4b32      	ldr	r3, [pc, #200]	@ (8003364 <LCD_IO_Init+0xe4>)
 800329a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329c:	4a31      	ldr	r2, [pc, #196]	@ (8003364 <LCD_IO_Init+0xe4>)
 800329e:	f043 0308 	orr.w	r3, r3, #8
 80032a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80032a4:	4b2f      	ldr	r3, [pc, #188]	@ (8003364 <LCD_IO_Init+0xe4>)
 80032a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a8:	f003 0308 	and.w	r3, r3, #8
 80032ac:	60bb      	str	r3, [r7, #8]
 80032ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80032b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80032b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80032b6:	2301      	movs	r3, #1
 80032b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80032ba:	2300      	movs	r3, #0
 80032bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80032be:	2302      	movs	r3, #2
 80032c0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80032c2:	f107 030c 	add.w	r3, r7, #12
 80032c6:	4619      	mov	r1, r3
 80032c8:	4827      	ldr	r0, [pc, #156]	@ (8003368 <LCD_IO_Init+0xe8>)
 80032ca:	f001 f845 	bl	8004358 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 80032ce:	2300      	movs	r3, #0
 80032d0:	607b      	str	r3, [r7, #4]
 80032d2:	4b24      	ldr	r3, [pc, #144]	@ (8003364 <LCD_IO_Init+0xe4>)
 80032d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d6:	4a23      	ldr	r2, [pc, #140]	@ (8003364 <LCD_IO_Init+0xe4>)
 80032d8:	f043 0308 	orr.w	r3, r3, #8
 80032dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80032de:	4b21      	ldr	r3, [pc, #132]	@ (8003364 <LCD_IO_Init+0xe4>)
 80032e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e2:	f003 0308 	and.w	r3, r3, #8
 80032e6:	607b      	str	r3, [r7, #4]
 80032e8:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80032ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80032f0:	2301      	movs	r3, #1
 80032f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80032f4:	2300      	movs	r3, #0
 80032f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80032f8:	2302      	movs	r3, #2
 80032fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80032fc:	f107 030c 	add.w	r3, r7, #12
 8003300:	4619      	mov	r1, r3
 8003302:	4819      	ldr	r0, [pc, #100]	@ (8003368 <LCD_IO_Init+0xe8>)
 8003304:	f001 f828 	bl	8004358 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8003308:	2300      	movs	r3, #0
 800330a:	603b      	str	r3, [r7, #0]
 800330c:	4b15      	ldr	r3, [pc, #84]	@ (8003364 <LCD_IO_Init+0xe4>)
 800330e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003310:	4a14      	ldr	r2, [pc, #80]	@ (8003364 <LCD_IO_Init+0xe4>)
 8003312:	f043 0304 	orr.w	r3, r3, #4
 8003316:	6313      	str	r3, [r2, #48]	@ 0x30
 8003318:	4b12      	ldr	r3, [pc, #72]	@ (8003364 <LCD_IO_Init+0xe4>)
 800331a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	603b      	str	r3, [r7, #0]
 8003322:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8003324:	2304      	movs	r3, #4
 8003326:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003328:	2301      	movs	r3, #1
 800332a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800332c:	2300      	movs	r3, #0
 800332e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003330:	2302      	movs	r3, #2
 8003332:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8003334:	f107 030c 	add.w	r3, r7, #12
 8003338:	4619      	mov	r1, r3
 800333a:	480c      	ldr	r0, [pc, #48]	@ (800336c <LCD_IO_Init+0xec>)
 800333c:	f001 f80c 	bl	8004358 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8003340:	2200      	movs	r2, #0
 8003342:	2104      	movs	r1, #4
 8003344:	4809      	ldr	r0, [pc, #36]	@ (800336c <LCD_IO_Init+0xec>)
 8003346:	f001 fabf 	bl	80048c8 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800334a:	2201      	movs	r2, #1
 800334c:	2104      	movs	r1, #4
 800334e:	4807      	ldr	r0, [pc, #28]	@ (800336c <LCD_IO_Init+0xec>)
 8003350:	f001 faba 	bl	80048c8 <HAL_GPIO_WritePin>

    SPI_Init();
 8003354:	f7ff fef6 	bl	8003144 <SPI_Init>
  }
}
 8003358:	bf00      	nop
 800335a:	3720      	adds	r7, #32
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	20025a58 	.word	0x20025a58
 8003364:	40023800 	.word	0x40023800
 8003368:	40020c00 	.word	0x40020c00
 800336c:	40020800 	.word	0x40020800

08003370 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	4603      	mov	r3, r0
 8003378:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800337a:	2201      	movs	r2, #1
 800337c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003380:	480a      	ldr	r0, [pc, #40]	@ (80033ac <LCD_IO_WriteData+0x3c>)
 8003382:	f001 faa1 	bl	80048c8 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8003386:	2200      	movs	r2, #0
 8003388:	2104      	movs	r1, #4
 800338a:	4809      	ldr	r0, [pc, #36]	@ (80033b0 <LCD_IO_WriteData+0x40>)
 800338c:	f001 fa9c 	bl	80048c8 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8003390:	88fb      	ldrh	r3, [r7, #6]
 8003392:	4618      	mov	r0, r3
 8003394:	f7ff ff10 	bl	80031b8 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003398:	2201      	movs	r2, #1
 800339a:	2104      	movs	r1, #4
 800339c:	4804      	ldr	r0, [pc, #16]	@ (80033b0 <LCD_IO_WriteData+0x40>)
 800339e:	f001 fa93 	bl	80048c8 <HAL_GPIO_WritePin>
}
 80033a2:	bf00      	nop
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	40020c00 	.word	0x40020c00
 80033b0:	40020800 	.word	0x40020800

080033b4 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	4603      	mov	r3, r0
 80033bc:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80033be:	2200      	movs	r2, #0
 80033c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80033c4:	480a      	ldr	r0, [pc, #40]	@ (80033f0 <LCD_IO_WriteReg+0x3c>)
 80033c6:	f001 fa7f 	bl	80048c8 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80033ca:	2200      	movs	r2, #0
 80033cc:	2104      	movs	r1, #4
 80033ce:	4809      	ldr	r0, [pc, #36]	@ (80033f4 <LCD_IO_WriteReg+0x40>)
 80033d0:	f001 fa7a 	bl	80048c8 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 80033d4:	79fb      	ldrb	r3, [r7, #7]
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff feed 	bl	80031b8 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80033de:	2201      	movs	r2, #1
 80033e0:	2104      	movs	r1, #4
 80033e2:	4804      	ldr	r0, [pc, #16]	@ (80033f4 <LCD_IO_WriteReg+0x40>)
 80033e4:	f001 fa70 	bl	80048c8 <HAL_GPIO_WritePin>
}
 80033e8:	bf00      	nop
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40020c00 	.word	0x40020c00
 80033f4:	40020800 	.word	0x40020800

080033f8 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 fdfd 	bl	8004000 <HAL_Delay>
}
 8003406:	bf00      	nop
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
	...

08003410 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003416:	f000 fd81 	bl	8003f1c <HAL_Init>


  // The default system configuration function is "suspect" so we need to make our own clock configuration
  // Note - You, the developer, MAY have to play with some of this coniguration as you progress in your project
  SystemClockOverride();
 800341a:	f000 f857 	bl	80034cc <SystemClockOverride>

  ApplicationInit(); // Initializes the LCD functionality
 800341e:	f7fd f85d 	bl	80004dc <ApplicationInit>




  HAL_Delay(5000);
 8003422:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003426:	f000 fdeb 	bl	8004000 <HAL_Delay>

  // DO NOT CALL THIS FUNCTION WHEN INTERRUPT MODE IS SELECTED IN THE COMPILE SWITCH IN stmpe811.h
  // Un-comment the below function after setting COMPILE_TOUCH to 1 in stmpe811.h
  //LCD_Touch_Polling_Demo(); // This function Will not return

  uint32_t events_to_run = 0;
 800342a:	2300      	movs	r3, #0
 800342c:	607b      	str	r3, [r7, #4]
  addSchedulerEvent(StartScreen);
 800342e:	2008      	movs	r0, #8
 8003430:	f7ff fcea 	bl	8002e08 <addSchedulerEvent>
  while (1)
  {
	  events_to_run = getScheduledEvents();
 8003434:	f7ff fcdc 	bl	8002df0 <getScheduledEvents>
 8003438:	6078      	str	r0, [r7, #4]
	  switch(events_to_run){
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	3b01      	subs	r3, #1
 800343e:	2b0f      	cmp	r3, #15
 8003440:	d842      	bhi.n	80034c8 <main+0xb8>
 8003442:	a201      	add	r2, pc, #4	@ (adr r2, 8003448 <main+0x38>)
 8003444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003448:	080034a1 	.word	0x080034a1
 800344c:	080034ad 	.word	0x080034ad
 8003450:	080034c9 	.word	0x080034c9
 8003454:	08003495 	.word	0x08003495
 8003458:	080034c9 	.word	0x080034c9
 800345c:	080034c9 	.word	0x080034c9
 8003460:	080034c9 	.word	0x080034c9
 8003464:	08003489 	.word	0x08003489
 8003468:	080034c9 	.word	0x080034c9
 800346c:	080034c9 	.word	0x080034c9
 8003470:	080034c9 	.word	0x080034c9
 8003474:	080034c9 	.word	0x080034c9
 8003478:	080034c9 	.word	0x080034c9
 800347c:	080034c9 	.word	0x080034c9
 8003480:	080034c9 	.word	0x080034c9
 8003484:	080034b9 	.word	0x080034b9
	  	  case StartScreen:
	  		startScreen();
 8003488:	f7fd f842 	bl	8000510 <startScreen>
	  		removeSchedulerEvent(StartScreen);
 800348c:	2008      	movs	r0, #8
 800348e:	f7ff fccd 	bl	8002e2c <removeSchedulerEvent>
	  		break;
 8003492:	e01a      	b.n	80034ca <main+0xba>
	  	  case EndScreen:
	  		endScreen();
 8003494:	f7fd f842 	bl	800051c <endScreen>
	  		removeSchedulerEvent(EndScreen);
 8003498:	2004      	movs	r0, #4
 800349a:	f7ff fcc7 	bl	8002e2c <removeSchedulerEvent>
	  		break;
 800349e:	e014      	b.n	80034ca <main+0xba>
	  	  case BlockDown:
	  		currBlock_Down();
 80034a0:	f7fd fb30 	bl	8000b04 <currBlock_Down>
	  		removeSchedulerEvent(BlockDown);
 80034a4:	2001      	movs	r0, #1
 80034a6:	f7ff fcc1 	bl	8002e2c <removeSchedulerEvent>
	  		  break;
 80034aa:	e00e      	b.n	80034ca <main+0xba>
	  	  case BlockRotate:
	  		currBlock_Rotate();
 80034ac:	f7fd fb7c 	bl	8000ba8 <currBlock_Rotate>
	  		removeSchedulerEvent(BlockRotate);
 80034b0:	2002      	movs	r0, #2
 80034b2:	f7ff fcbb 	bl	8002e2c <removeSchedulerEvent>
	  		  break;
 80034b6:	e008      	b.n	80034ca <main+0xba>
	  	  case GameScreen:
	  		game_screen();
 80034b8:	f7ff fb18 	bl	8002aec <game_screen>
	  		newCurrBlock();
 80034bc:	f7fd f8e2 	bl	8000684 <newCurrBlock>
	  		removeSchedulerEvent(GameScreen);
 80034c0:	2010      	movs	r0, #16
 80034c2:	f7ff fcb3 	bl	8002e2c <removeSchedulerEvent>
	  		  break;
 80034c6:	e000      	b.n	80034ca <main+0xba>
	  	  default:
	  		  break;
 80034c8:	bf00      	nop
	  events_to_run = getScheduledEvents();
 80034ca:	e7b3      	b.n	8003434 <main+0x24>

080034cc <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b092      	sub	sp, #72	@ 0x48
 80034d0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 80034d2:	2300      	movs	r3, #0
 80034d4:	603b      	str	r3, [r7, #0]
 80034d6:	4b1c      	ldr	r3, [pc, #112]	@ (8003548 <SystemClockOverride+0x7c>)
 80034d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034da:	4a1b      	ldr	r2, [pc, #108]	@ (8003548 <SystemClockOverride+0x7c>)
 80034dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80034e2:	4b19      	ldr	r3, [pc, #100]	@ (8003548 <SystemClockOverride+0x7c>)
 80034e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ea:	603b      	str	r3, [r7, #0]
 80034ec:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80034ee:	2301      	movs	r3, #1
 80034f0:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80034f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80034f6:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80034f8:	2302      	movs	r3, #2
 80034fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80034fc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003500:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003502:	2308      	movs	r3, #8
 8003504:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003506:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800350a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800350c:	2302      	movs	r3, #2
 800350e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003510:	2307      	movs	r3, #7
 8003512:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8003514:	1d3b      	adds	r3, r7, #4
 8003516:	4618      	mov	r0, r3
 8003518:	f002 fcba 	bl	8005e90 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800351c:	230f      	movs	r3, #15
 800351e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003520:	2302      	movs	r3, #2
 8003522:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003524:	2300      	movs	r3, #0
 8003526:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003528:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800352c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800352e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003532:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8003534:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003538:	2105      	movs	r1, #5
 800353a:	4618      	mov	r0, r3
 800353c:	f002 ff20 	bl	8006380 <HAL_RCC_ClockConfig>
}
 8003540:	bf00      	nop
 8003542:	3748      	adds	r7, #72	@ 0x48
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40023800 	.word	0x40023800

0800354c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003550:	b672      	cpsid	i
}
 8003552:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003554:	bf00      	nop
 8003556:	e7fd      	b.n	8003554 <Error_Handler+0x8>

08003558 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800355e:	2300      	movs	r3, #0
 8003560:	607b      	str	r3, [r7, #4]
 8003562:	4b10      	ldr	r3, [pc, #64]	@ (80035a4 <HAL_MspInit+0x4c>)
 8003564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003566:	4a0f      	ldr	r2, [pc, #60]	@ (80035a4 <HAL_MspInit+0x4c>)
 8003568:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800356c:	6453      	str	r3, [r2, #68]	@ 0x44
 800356e:	4b0d      	ldr	r3, [pc, #52]	@ (80035a4 <HAL_MspInit+0x4c>)
 8003570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003572:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003576:	607b      	str	r3, [r7, #4]
 8003578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800357a:	2300      	movs	r3, #0
 800357c:	603b      	str	r3, [r7, #0]
 800357e:	4b09      	ldr	r3, [pc, #36]	@ (80035a4 <HAL_MspInit+0x4c>)
 8003580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003582:	4a08      	ldr	r2, [pc, #32]	@ (80035a4 <HAL_MspInit+0x4c>)
 8003584:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003588:	6413      	str	r3, [r2, #64]	@ 0x40
 800358a:	4b06      	ldr	r3, [pc, #24]	@ (80035a4 <HAL_MspInit+0x4c>)
 800358c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003592:	603b      	str	r3, [r7, #0]
 8003594:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003596:	2007      	movs	r0, #7
 8003598:	f000 fe68 	bl	800426c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800359c:	bf00      	nop
 800359e:	3708      	adds	r7, #8
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40023800 	.word	0x40023800

080035a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b08a      	sub	sp, #40	@ 0x28
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035b0:	f107 0314 	add.w	r3, r7, #20
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	605a      	str	r2, [r3, #4]
 80035ba:	609a      	str	r2, [r3, #8]
 80035bc:	60da      	str	r2, [r3, #12]
 80035be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a29      	ldr	r2, [pc, #164]	@ (800366c <HAL_I2C_MspInit+0xc4>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d14b      	bne.n	8003662 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035ca:	2300      	movs	r3, #0
 80035cc:	613b      	str	r3, [r7, #16]
 80035ce:	4b28      	ldr	r3, [pc, #160]	@ (8003670 <HAL_I2C_MspInit+0xc8>)
 80035d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d2:	4a27      	ldr	r2, [pc, #156]	@ (8003670 <HAL_I2C_MspInit+0xc8>)
 80035d4:	f043 0304 	orr.w	r3, r3, #4
 80035d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80035da:	4b25      	ldr	r3, [pc, #148]	@ (8003670 <HAL_I2C_MspInit+0xc8>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035de:	f003 0304 	and.w	r3, r3, #4
 80035e2:	613b      	str	r3, [r7, #16]
 80035e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035e6:	2300      	movs	r3, #0
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	4b21      	ldr	r3, [pc, #132]	@ (8003670 <HAL_I2C_MspInit+0xc8>)
 80035ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ee:	4a20      	ldr	r2, [pc, #128]	@ (8003670 <HAL_I2C_MspInit+0xc8>)
 80035f0:	f043 0301 	orr.w	r3, r3, #1
 80035f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80035f6:	4b1e      	ldr	r3, [pc, #120]	@ (8003670 <HAL_I2C_MspInit+0xc8>)
 80035f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8003602:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003606:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003608:	2312      	movs	r3, #18
 800360a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800360c:	2300      	movs	r3, #0
 800360e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003610:	2300      	movs	r3, #0
 8003612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003614:	2304      	movs	r3, #4
 8003616:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8003618:	f107 0314 	add.w	r3, r7, #20
 800361c:	4619      	mov	r1, r3
 800361e:	4815      	ldr	r0, [pc, #84]	@ (8003674 <HAL_I2C_MspInit+0xcc>)
 8003620:	f000 fe9a 	bl	8004358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8003624:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800362a:	2312      	movs	r3, #18
 800362c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362e:	2300      	movs	r3, #0
 8003630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003632:	2300      	movs	r3, #0
 8003634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003636:	2304      	movs	r3, #4
 8003638:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800363a:	f107 0314 	add.w	r3, r7, #20
 800363e:	4619      	mov	r1, r3
 8003640:	480d      	ldr	r0, [pc, #52]	@ (8003678 <HAL_I2C_MspInit+0xd0>)
 8003642:	f000 fe89 	bl	8004358 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003646:	2300      	movs	r3, #0
 8003648:	60bb      	str	r3, [r7, #8]
 800364a:	4b09      	ldr	r3, [pc, #36]	@ (8003670 <HAL_I2C_MspInit+0xc8>)
 800364c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364e:	4a08      	ldr	r2, [pc, #32]	@ (8003670 <HAL_I2C_MspInit+0xc8>)
 8003650:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003654:	6413      	str	r3, [r2, #64]	@ 0x40
 8003656:	4b06      	ldr	r3, [pc, #24]	@ (8003670 <HAL_I2C_MspInit+0xc8>)
 8003658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800365e:	60bb      	str	r3, [r7, #8]
 8003660:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8003662:	bf00      	nop
 8003664:	3728      	adds	r7, #40	@ 0x28
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	40005c00 	.word	0x40005c00
 8003670:	40023800 	.word	0x40023800
 8003674:	40020800 	.word	0x40020800
 8003678:	40020000 	.word	0x40020000

0800367c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b09a      	sub	sp, #104	@ 0x68
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003684:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	605a      	str	r2, [r3, #4]
 800368e:	609a      	str	r2, [r3, #8]
 8003690:	60da      	str	r2, [r3, #12]
 8003692:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003694:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003698:	2230      	movs	r2, #48	@ 0x30
 800369a:	2100      	movs	r1, #0
 800369c:	4618      	mov	r0, r3
 800369e:	f003 fd1b 	bl	80070d8 <memset>
  if(hltdc->Instance==LTDC)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a81      	ldr	r2, [pc, #516]	@ (80038ac <HAL_LTDC_MspInit+0x230>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	f040 80fa 	bne.w	80038a2 <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80036ae:	2308      	movs	r3, #8
 80036b0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80036b2:	2332      	movs	r3, #50	@ 0x32
 80036b4:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80036b6:	2302      	movs	r3, #2
 80036b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80036ba:	2300      	movs	r3, #0
 80036bc:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036c2:	4618      	mov	r0, r3
 80036c4:	f003 f868 	bl	8006798 <HAL_RCCEx_PeriphCLKConfig>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80036ce:	f7ff ff3d 	bl	800354c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80036d2:	2300      	movs	r3, #0
 80036d4:	623b      	str	r3, [r7, #32]
 80036d6:	4b76      	ldr	r3, [pc, #472]	@ (80038b0 <HAL_LTDC_MspInit+0x234>)
 80036d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036da:	4a75      	ldr	r2, [pc, #468]	@ (80038b0 <HAL_LTDC_MspInit+0x234>)
 80036dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80036e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80036e2:	4b73      	ldr	r3, [pc, #460]	@ (80038b0 <HAL_LTDC_MspInit+0x234>)
 80036e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036e6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80036ea:	623b      	str	r3, [r7, #32]
 80036ec:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80036ee:	2300      	movs	r3, #0
 80036f0:	61fb      	str	r3, [r7, #28]
 80036f2:	4b6f      	ldr	r3, [pc, #444]	@ (80038b0 <HAL_LTDC_MspInit+0x234>)
 80036f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f6:	4a6e      	ldr	r2, [pc, #440]	@ (80038b0 <HAL_LTDC_MspInit+0x234>)
 80036f8:	f043 0320 	orr.w	r3, r3, #32
 80036fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80036fe:	4b6c      	ldr	r3, [pc, #432]	@ (80038b0 <HAL_LTDC_MspInit+0x234>)
 8003700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003702:	f003 0320 	and.w	r3, r3, #32
 8003706:	61fb      	str	r3, [r7, #28]
 8003708:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800370a:	2300      	movs	r3, #0
 800370c:	61bb      	str	r3, [r7, #24]
 800370e:	4b68      	ldr	r3, [pc, #416]	@ (80038b0 <HAL_LTDC_MspInit+0x234>)
 8003710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003712:	4a67      	ldr	r2, [pc, #412]	@ (80038b0 <HAL_LTDC_MspInit+0x234>)
 8003714:	f043 0301 	orr.w	r3, r3, #1
 8003718:	6313      	str	r3, [r2, #48]	@ 0x30
 800371a:	4b65      	ldr	r3, [pc, #404]	@ (80038b0 <HAL_LTDC_MspInit+0x234>)
 800371c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	61bb      	str	r3, [r7, #24]
 8003724:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003726:	2300      	movs	r3, #0
 8003728:	617b      	str	r3, [r7, #20]
 800372a:	4b61      	ldr	r3, [pc, #388]	@ (80038b0 <HAL_LTDC_MspInit+0x234>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372e:	4a60      	ldr	r2, [pc, #384]	@ (80038b0 <HAL_LTDC_MspInit+0x234>)
 8003730:	f043 0302 	orr.w	r3, r3, #2
 8003734:	6313      	str	r3, [r2, #48]	@ 0x30
 8003736:	4b5e      	ldr	r3, [pc, #376]	@ (80038b0 <HAL_LTDC_MspInit+0x234>)
 8003738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	617b      	str	r3, [r7, #20]
 8003740:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003742:	2300      	movs	r3, #0
 8003744:	613b      	str	r3, [r7, #16]
 8003746:	4b5a      	ldr	r3, [pc, #360]	@ (80038b0 <HAL_LTDC_MspInit+0x234>)
 8003748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374a:	4a59      	ldr	r2, [pc, #356]	@ (80038b0 <HAL_LTDC_MspInit+0x234>)
 800374c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003750:	6313      	str	r3, [r2, #48]	@ 0x30
 8003752:	4b57      	ldr	r3, [pc, #348]	@ (80038b0 <HAL_LTDC_MspInit+0x234>)
 8003754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800375a:	613b      	str	r3, [r7, #16]
 800375c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800375e:	2300      	movs	r3, #0
 8003760:	60fb      	str	r3, [r7, #12]
 8003762:	4b53      	ldr	r3, [pc, #332]	@ (80038b0 <HAL_LTDC_MspInit+0x234>)
 8003764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003766:	4a52      	ldr	r2, [pc, #328]	@ (80038b0 <HAL_LTDC_MspInit+0x234>)
 8003768:	f043 0304 	orr.w	r3, r3, #4
 800376c:	6313      	str	r3, [r2, #48]	@ 0x30
 800376e:	4b50      	ldr	r3, [pc, #320]	@ (80038b0 <HAL_LTDC_MspInit+0x234>)
 8003770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003772:	f003 0304 	and.w	r3, r3, #4
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800377a:	2300      	movs	r3, #0
 800377c:	60bb      	str	r3, [r7, #8]
 800377e:	4b4c      	ldr	r3, [pc, #304]	@ (80038b0 <HAL_LTDC_MspInit+0x234>)
 8003780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003782:	4a4b      	ldr	r2, [pc, #300]	@ (80038b0 <HAL_LTDC_MspInit+0x234>)
 8003784:	f043 0308 	orr.w	r3, r3, #8
 8003788:	6313      	str	r3, [r2, #48]	@ 0x30
 800378a:	4b49      	ldr	r3, [pc, #292]	@ (80038b0 <HAL_LTDC_MspInit+0x234>)
 800378c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378e:	f003 0308 	and.w	r3, r3, #8
 8003792:	60bb      	str	r3, [r7, #8]
 8003794:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8003796:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800379a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800379c:	2302      	movs	r3, #2
 800379e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a0:	2300      	movs	r3, #0
 80037a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a4:	2300      	movs	r3, #0
 80037a6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80037a8:	230e      	movs	r3, #14
 80037aa:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80037ac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80037b0:	4619      	mov	r1, r3
 80037b2:	4840      	ldr	r0, [pc, #256]	@ (80038b4 <HAL_LTDC_MspInit+0x238>)
 80037b4:	f000 fdd0 	bl	8004358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80037b8:	f641 0358 	movw	r3, #6232	@ 0x1858
 80037bc:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037be:	2302      	movs	r3, #2
 80037c0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c2:	2300      	movs	r3, #0
 80037c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c6:	2300      	movs	r3, #0
 80037c8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80037ca:	230e      	movs	r3, #14
 80037cc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037ce:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80037d2:	4619      	mov	r1, r3
 80037d4:	4838      	ldr	r0, [pc, #224]	@ (80038b8 <HAL_LTDC_MspInit+0x23c>)
 80037d6:	f000 fdbf 	bl	8004358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80037da:	2303      	movs	r3, #3
 80037dc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037de:	2302      	movs	r3, #2
 80037e0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e2:	2300      	movs	r3, #0
 80037e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e6:	2300      	movs	r3, #0
 80037e8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80037ea:	2309      	movs	r3, #9
 80037ec:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037ee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80037f2:	4619      	mov	r1, r3
 80037f4:	4831      	ldr	r0, [pc, #196]	@ (80038bc <HAL_LTDC_MspInit+0x240>)
 80037f6:	f000 fdaf 	bl	8004358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80037fa:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80037fe:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003800:	2302      	movs	r3, #2
 8003802:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003804:	2300      	movs	r3, #0
 8003806:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003808:	2300      	movs	r3, #0
 800380a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800380c:	230e      	movs	r3, #14
 800380e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003810:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003814:	4619      	mov	r1, r3
 8003816:	4829      	ldr	r0, [pc, #164]	@ (80038bc <HAL_LTDC_MspInit+0x240>)
 8003818:	f000 fd9e 	bl	8004358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800381c:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8003820:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003822:	2302      	movs	r3, #2
 8003824:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003826:	2300      	movs	r3, #0
 8003828:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800382a:	2300      	movs	r3, #0
 800382c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800382e:	230e      	movs	r3, #14
 8003830:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003832:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003836:	4619      	mov	r1, r3
 8003838:	4821      	ldr	r0, [pc, #132]	@ (80038c0 <HAL_LTDC_MspInit+0x244>)
 800383a:	f000 fd8d 	bl	8004358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800383e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8003842:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003844:	2302      	movs	r3, #2
 8003846:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003848:	2300      	movs	r3, #0
 800384a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800384c:	2300      	movs	r3, #0
 800384e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003850:	230e      	movs	r3, #14
 8003852:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003854:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003858:	4619      	mov	r1, r3
 800385a:	481a      	ldr	r0, [pc, #104]	@ (80038c4 <HAL_LTDC_MspInit+0x248>)
 800385c:	f000 fd7c 	bl	8004358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8003860:	2348      	movs	r3, #72	@ 0x48
 8003862:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003864:	2302      	movs	r3, #2
 8003866:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003868:	2300      	movs	r3, #0
 800386a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800386c:	2300      	movs	r3, #0
 800386e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003870:	230e      	movs	r3, #14
 8003872:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003874:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003878:	4619      	mov	r1, r3
 800387a:	4813      	ldr	r0, [pc, #76]	@ (80038c8 <HAL_LTDC_MspInit+0x24c>)
 800387c:	f000 fd6c 	bl	8004358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8003880:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003884:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003886:	2302      	movs	r3, #2
 8003888:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800388a:	2300      	movs	r3, #0
 800388c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800388e:	2300      	movs	r3, #0
 8003890:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003892:	2309      	movs	r3, #9
 8003894:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003896:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800389a:	4619      	mov	r1, r3
 800389c:	4808      	ldr	r0, [pc, #32]	@ (80038c0 <HAL_LTDC_MspInit+0x244>)
 800389e:	f000 fd5b 	bl	8004358 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80038a2:	bf00      	nop
 80038a4:	3768      	adds	r7, #104	@ 0x68
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	40016800 	.word	0x40016800
 80038b0:	40023800 	.word	0x40023800
 80038b4:	40021400 	.word	0x40021400
 80038b8:	40020000 	.word	0x40020000
 80038bc:	40020400 	.word	0x40020400
 80038c0:	40021800 	.word	0x40021800
 80038c4:	40020800 	.word	0x40020800
 80038c8:	40020c00 	.word	0x40020c00

080038cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b08a      	sub	sp, #40	@ 0x28
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038d4:	f107 0314 	add.w	r3, r7, #20
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	605a      	str	r2, [r3, #4]
 80038de:	609a      	str	r2, [r3, #8]
 80038e0:	60da      	str	r2, [r3, #12]
 80038e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a19      	ldr	r2, [pc, #100]	@ (8003950 <HAL_SPI_MspInit+0x84>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d12c      	bne.n	8003948 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80038ee:	2300      	movs	r3, #0
 80038f0:	613b      	str	r3, [r7, #16]
 80038f2:	4b18      	ldr	r3, [pc, #96]	@ (8003954 <HAL_SPI_MspInit+0x88>)
 80038f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038f6:	4a17      	ldr	r2, [pc, #92]	@ (8003954 <HAL_SPI_MspInit+0x88>)
 80038f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80038fe:	4b15      	ldr	r3, [pc, #84]	@ (8003954 <HAL_SPI_MspInit+0x88>)
 8003900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003902:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003906:	613b      	str	r3, [r7, #16]
 8003908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800390a:	2300      	movs	r3, #0
 800390c:	60fb      	str	r3, [r7, #12]
 800390e:	4b11      	ldr	r3, [pc, #68]	@ (8003954 <HAL_SPI_MspInit+0x88>)
 8003910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003912:	4a10      	ldr	r2, [pc, #64]	@ (8003954 <HAL_SPI_MspInit+0x88>)
 8003914:	f043 0320 	orr.w	r3, r3, #32
 8003918:	6313      	str	r3, [r2, #48]	@ 0x30
 800391a:	4b0e      	ldr	r3, [pc, #56]	@ (8003954 <HAL_SPI_MspInit+0x88>)
 800391c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800391e:	f003 0320 	and.w	r3, r3, #32
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8003926:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800392a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800392c:	2302      	movs	r3, #2
 800392e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003930:	2300      	movs	r3, #0
 8003932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003934:	2300      	movs	r3, #0
 8003936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003938:	2305      	movs	r3, #5
 800393a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800393c:	f107 0314 	add.w	r3, r7, #20
 8003940:	4619      	mov	r1, r3
 8003942:	4805      	ldr	r0, [pc, #20]	@ (8003958 <HAL_SPI_MspInit+0x8c>)
 8003944:	f000 fd08 	bl	8004358 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8003948:	bf00      	nop
 800394a:	3728      	adds	r7, #40	@ 0x28
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40015000 	.word	0x40015000
 8003954:	40023800 	.word	0x40023800
 8003958:	40021400 	.word	0x40021400

0800395c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a08      	ldr	r2, [pc, #32]	@ (800398c <HAL_SPI_MspDeInit+0x30>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d10a      	bne.n	8003984 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800396e:	4b08      	ldr	r3, [pc, #32]	@ (8003990 <HAL_SPI_MspDeInit+0x34>)
 8003970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003972:	4a07      	ldr	r2, [pc, #28]	@ (8003990 <HAL_SPI_MspDeInit+0x34>)
 8003974:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003978:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 800397a:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800397e:	4805      	ldr	r0, [pc, #20]	@ (8003994 <HAL_SPI_MspDeInit+0x38>)
 8003980:	f000 fe96 	bl	80046b0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8003984:	bf00      	nop
 8003986:	3708      	adds	r7, #8
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	40015000 	.word	0x40015000
 8003990:	40023800 	.word	0x40023800
 8003994:	40021400 	.word	0x40021400

08003998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800399c:	bf00      	nop
 800399e:	e7fd      	b.n	800399c <NMI_Handler+0x4>

080039a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039a4:	bf00      	nop
 80039a6:	e7fd      	b.n	80039a4 <HardFault_Handler+0x4>

080039a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039ac:	bf00      	nop
 80039ae:	e7fd      	b.n	80039ac <MemManage_Handler+0x4>

080039b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039b4:	bf00      	nop
 80039b6:	e7fd      	b.n	80039b4 <BusFault_Handler+0x4>

080039b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039bc:	bf00      	nop
 80039be:	e7fd      	b.n	80039bc <UsageFault_Handler+0x4>

080039c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039c4:	bf00      	nop
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr

080039ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039ce:	b480      	push	{r7}
 80039d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039d2:	bf00      	nop
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039e0:	bf00      	nop
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039ee:	f000 fae7 	bl	8003fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039f2:	bf00      	nop
 80039f4:	bd80      	pop	{r7, pc}
	...

080039f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	4603      	mov	r3, r0
 8003a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	db0b      	blt.n	8003a22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a0a:	79fb      	ldrb	r3, [r7, #7]
 8003a0c:	f003 021f 	and.w	r2, r3, #31
 8003a10:	4907      	ldr	r1, [pc, #28]	@ (8003a30 <__NVIC_EnableIRQ+0x38>)
 8003a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a16:	095b      	lsrs	r3, r3, #5
 8003a18:	2001      	movs	r0, #1
 8003a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	e000e100 	.word	0xe000e100

08003a34 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8003a3a:	f000 f965 	bl	8003d08 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8003a3e:	f000 f925 	bl	8003c8c <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8003a42:	2202      	movs	r2, #2
 8003a44:	2103      	movs	r1, #3
 8003a46:	2082      	movs	r0, #130	@ 0x82
 8003a48:	f000 f9b2 	bl	8003db0 <I2C3_Write>
    HAL_Delay(5);
 8003a4c:	2005      	movs	r0, #5
 8003a4e:	f000 fad7 	bl	8004000 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8003a52:	2200      	movs	r2, #0
 8003a54:	2103      	movs	r1, #3
 8003a56:	2082      	movs	r0, #130	@ 0x82
 8003a58:	f000 f9aa 	bl	8003db0 <I2C3_Write>
    HAL_Delay(2);
 8003a5c:	2002      	movs	r0, #2
 8003a5e:	f000 facf 	bl	8004000 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8003a62:	1cba      	adds	r2, r7, #2
 8003a64:	2302      	movs	r3, #2
 8003a66:	2100      	movs	r1, #0
 8003a68:	2082      	movs	r0, #130	@ 0x82
 8003a6a:	f000 f9f1 	bl	8003e50 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8003a6e:	887b      	ldrh	r3, [r7, #2]
 8003a70:	021b      	lsls	r3, r3, #8
 8003a72:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8003a74:	887b      	ldrh	r3, [r7, #2]
 8003a76:	0a1b      	lsrs	r3, r3, #8
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	88fb      	ldrh	r3, [r7, #6]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8003a80:	88fb      	ldrh	r3, [r7, #6]
 8003a82:	f640 0211 	movw	r2, #2065	@ 0x811
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d001      	beq.n	8003a8e <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e095      	b.n	8003bba <STMPE811_Init+0x186>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8003a8e:	2202      	movs	r2, #2
 8003a90:	2103      	movs	r1, #3
 8003a92:	2082      	movs	r0, #130	@ 0x82
 8003a94:	f000 f98c 	bl	8003db0 <I2C3_Write>
    HAL_Delay(5);
 8003a98:	2005      	movs	r0, #5
 8003a9a:	f000 fab1 	bl	8004000 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	2103      	movs	r1, #3
 8003aa2:	2082      	movs	r0, #130	@ 0x82
 8003aa4:	f000 f984 	bl	8003db0 <I2C3_Write>
    HAL_Delay(2);
 8003aa8:	2002      	movs	r0, #2
 8003aaa:	f000 faa9 	bl	8004000 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8003aae:	2004      	movs	r0, #4
 8003ab0:	f000 f887 	bl	8003bc2 <STMPE811_Read>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8003ab8:	797b      	ldrb	r3, [r7, #5]
 8003aba:	f023 0301 	bic.w	r3, r3, #1
 8003abe:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8003ac0:	797b      	ldrb	r3, [r7, #5]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	2104      	movs	r1, #4
 8003ac6:	2082      	movs	r0, #130	@ 0x82
 8003ac8:	f000 f972 	bl	8003db0 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8003acc:	2004      	movs	r0, #4
 8003ace:	f000 f878 	bl	8003bc2 <STMPE811_Read>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8003ad6:	797b      	ldrb	r3, [r7, #5]
 8003ad8:	f023 0302 	bic.w	r3, r3, #2
 8003adc:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8003ade:	797b      	ldrb	r3, [r7, #5]
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	2104      	movs	r1, #4
 8003ae4:	2082      	movs	r0, #130	@ 0x82
 8003ae6:	f000 f963 	bl	8003db0 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8003aea:	2249      	movs	r2, #73	@ 0x49
 8003aec:	2120      	movs	r1, #32
 8003aee:	2082      	movs	r0, #130	@ 0x82
 8003af0:	f000 f95e 	bl	8003db0 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8003af4:	2002      	movs	r0, #2
 8003af6:	f000 fa83 	bl	8004000 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8003afa:	2201      	movs	r2, #1
 8003afc:	2121      	movs	r1, #33	@ 0x21
 8003afe:	2082      	movs	r0, #130	@ 0x82
 8003b00:	f000 f956 	bl	8003db0 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8003b04:	2017      	movs	r0, #23
 8003b06:	f000 f85c 	bl	8003bc2 <STMPE811_Read>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8003b0e:	797b      	ldrb	r3, [r7, #5]
 8003b10:	f043 031e 	orr.w	r3, r3, #30
 8003b14:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8003b16:	797b      	ldrb	r3, [r7, #5]
 8003b18:	461a      	mov	r2, r3
 8003b1a:	2117      	movs	r1, #23
 8003b1c:	2082      	movs	r0, #130	@ 0x82
 8003b1e:	f000 f947 	bl	8003db0 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8003b22:	229a      	movs	r2, #154	@ 0x9a
 8003b24:	2141      	movs	r1, #65	@ 0x41
 8003b26:	2082      	movs	r0, #130	@ 0x82
 8003b28:	f000 f942 	bl	8003db0 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	214a      	movs	r1, #74	@ 0x4a
 8003b30:	2082      	movs	r0, #130	@ 0x82
 8003b32:	f000 f93d 	bl	8003db0 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8003b36:	2201      	movs	r2, #1
 8003b38:	214b      	movs	r1, #75	@ 0x4b
 8003b3a:	2082      	movs	r0, #130	@ 0x82
 8003b3c:	f000 f938 	bl	8003db0 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8003b40:	2200      	movs	r2, #0
 8003b42:	214b      	movs	r1, #75	@ 0x4b
 8003b44:	2082      	movs	r0, #130	@ 0x82
 8003b46:	f000 f933 	bl	8003db0 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	2156      	movs	r1, #86	@ 0x56
 8003b4e:	2082      	movs	r0, #130	@ 0x82
 8003b50:	f000 f92e 	bl	8003db0 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8003b54:	2201      	movs	r2, #1
 8003b56:	2158      	movs	r1, #88	@ 0x58
 8003b58:	2082      	movs	r0, #130	@ 0x82
 8003b5a:	f000 f929 	bl	8003db0 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8003b5e:	2203      	movs	r2, #3
 8003b60:	2140      	movs	r1, #64	@ 0x40
 8003b62:	2082      	movs	r0, #130	@ 0x82
 8003b64:	f000 f924 	bl	8003db0 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8003b68:	22ff      	movs	r2, #255	@ 0xff
 8003b6a:	210b      	movs	r1, #11
 8003b6c:	2082      	movs	r0, #130	@ 0x82
 8003b6e:	f000 f91f 	bl	8003db0 <I2C3_Write>

    /* Enable global interrupts */
    #if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

    enableInterruptSupportForTouch();
 8003b72:	f000 f849 	bl	8003c08 <enableInterruptSupportForTouch>

    mode = STMPE811_Read(STMPE811_INT_CTRL);
 8003b76:	2009      	movs	r0, #9
 8003b78:	f000 f823 	bl	8003bc2 <STMPE811_Read>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8003b80:	797b      	ldrb	r3, [r7, #5]
 8003b82:	f043 0301 	orr.w	r3, r3, #1
 8003b86:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_CTRL, mode);
 8003b88:	797b      	ldrb	r3, [r7, #5]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	2109      	movs	r1, #9
 8003b8e:	2082      	movs	r0, #130	@ 0x82
 8003b90:	f000 f90e 	bl	8003db0 <I2C3_Write>
    
    /* Enable touch interrupt */
    mode = STMPE811_Read(STMPE811_INT_EN);
 8003b94:	200a      	movs	r0, #10
 8003b96:	f000 f814 	bl	8003bc2 <STMPE811_Read>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8003b9e:	797b      	ldrb	r3, [r7, #5]
 8003ba0:	f043 0301 	orr.w	r3, r3, #1
 8003ba4:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
 8003ba6:	797b      	ldrb	r3, [r7, #5]
 8003ba8:	461a      	mov	r2, r3
 8003baa:	210a      	movs	r1, #10
 8003bac:	2082      	movs	r0, #130	@ 0x82
 8003bae:	f000 f8ff 	bl	8003db0 <I2C3_Write>
    
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8003bb2:	20c8      	movs	r0, #200	@ 0xc8
 8003bb4:	f000 fa24 	bl	8004000 <HAL_Delay>

    return STMPE811_State_Ok;
 8003bb8:	2302      	movs	r3, #2

}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b084      	sub	sp, #16
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	4603      	mov	r3, r0
 8003bca:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8003bcc:	f107 020f 	add.w	r2, r7, #15
 8003bd0:	79fb      	ldrb	r3, [r7, #7]
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	2082      	movs	r0, #130	@ 0x82
 8003bd6:	f000 f915 	bl	8003e04 <I2C3_Read>

    return readData;
 8003bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <STMPE811_Write>:

void STMPE811_Write(uint8_t reg, uint8_t dataToWrite)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	4603      	mov	r3, r0
 8003bec:	460a      	mov	r2, r1
 8003bee:	71fb      	strb	r3, [r7, #7]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	71bb      	strb	r3, [r7, #6]
    I2C3_Write(STMPE811_ADDRESS, reg, dataToWrite);
 8003bf4:	79ba      	ldrb	r2, [r7, #6]
 8003bf6:	79fb      	ldrb	r3, [r7, #7]
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	2082      	movs	r0, #130	@ 0x82
 8003bfc:	f000 f8d8 	bl	8003db0 <I2C3_Write>
}
 8003c00:	bf00      	nop
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <enableInterruptSupportForTouch>:
}

#if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

void enableInterruptSupportForTouch(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0
    // Initialze the GPIO and enable the interrupt
    // Interrupt is on interrupt Line PA15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c0e:	2300      	movs	r3, #0
 8003c10:	603b      	str	r3, [r7, #0]
 8003c12:	4b14      	ldr	r3, [pc, #80]	@ (8003c64 <enableInterruptSupportForTouch+0x5c>)
 8003c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c16:	4a13      	ldr	r2, [pc, #76]	@ (8003c64 <enableInterruptSupportForTouch+0x5c>)
 8003c18:	f043 0301 	orr.w	r3, r3, #1
 8003c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c1e:	4b11      	ldr	r3, [pc, #68]	@ (8003c64 <enableInterruptSupportForTouch+0x5c>)
 8003c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	603b      	str	r3, [r7, #0]
 8003c28:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c2a:	1d3b      	adds	r3, r7, #4
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	605a      	str	r2, [r3, #4]
 8003c32:	609a      	str	r2, [r3, #8]
 8003c34:	60da      	str	r2, [r3, #12]
 8003c36:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003c38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c3c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003c3e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8003c42:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c44:	2300      	movs	r3, #0
 8003c46:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c48:	2302      	movs	r3, #2
 8003c4a:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c4c:	1d3b      	adds	r3, r7, #4
 8003c4e:	4619      	mov	r1, r3
 8003c50:	4805      	ldr	r0, [pc, #20]	@ (8003c68 <enableInterruptSupportForTouch+0x60>)
 8003c52:	f000 fb81 	bl	8004358 <HAL_GPIO_Init>

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003c56:	2028      	movs	r0, #40	@ 0x28
 8003c58:	f7ff fece 	bl	80039f8 <__NVIC_EnableIRQ>

}
 8003c5c:	bf00      	nop
 8003c5e:	3718      	adds	r7, #24
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40023800 	.word	0x40023800
 8003c68:	40020000 	.word	0x40020000

08003c6c <verifyHAL_I2C_IS_OKAY>:

#endif 


//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8003c70:	4b05      	ldr	r3, [pc, #20]	@ (8003c88 <verifyHAL_I2C_IS_OKAY+0x1c>)
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8003c78:	bf00      	nop
 8003c7a:	e7fd      	b.n	8003c78 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8003c7c:	bf00      	nop
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	20025ab0 	.word	0x20025ab0

08003c8c <I2C3_Init>:

static void I2C3_Init()
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8003c92:	2300      	movs	r3, #0
 8003c94:	603b      	str	r3, [r7, #0]
 8003c96:	4b18      	ldr	r3, [pc, #96]	@ (8003cf8 <I2C3_Init+0x6c>)
 8003c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9a:	4a17      	ldr	r2, [pc, #92]	@ (8003cf8 <I2C3_Init+0x6c>)
 8003c9c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003ca0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ca2:	4b15      	ldr	r3, [pc, #84]	@ (8003cf8 <I2C3_Init+0x6c>)
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003caa:	603b      	str	r3, [r7, #0]
 8003cac:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8003cae:	4b13      	ldr	r3, [pc, #76]	@ (8003cfc <I2C3_Init+0x70>)
 8003cb0:	4a13      	ldr	r2, [pc, #76]	@ (8003d00 <I2C3_Init+0x74>)
 8003cb2:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8003cb4:	4b11      	ldr	r3, [pc, #68]	@ (8003cfc <I2C3_Init+0x70>)
 8003cb6:	4a13      	ldr	r2, [pc, #76]	@ (8003d04 <I2C3_Init+0x78>)
 8003cb8:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003cba:	4b10      	ldr	r3, [pc, #64]	@ (8003cfc <I2C3_Init+0x70>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8003cc0:	4b0e      	ldr	r3, [pc, #56]	@ (8003cfc <I2C3_Init+0x70>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8003cfc <I2C3_Init+0x70>)
 8003cc8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003ccc:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8003cce:	4b0b      	ldr	r3, [pc, #44]	@ (8003cfc <I2C3_Init+0x70>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003cd4:	4b09      	ldr	r3, [pc, #36]	@ (8003cfc <I2C3_Init+0x70>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8003cda:	4808      	ldr	r0, [pc, #32]	@ (8003cfc <I2C3_Init+0x70>)
 8003cdc:	f000 fe0e 	bl	80048fc <HAL_I2C_Init>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8003ce4:	79fb      	ldrb	r3, [r7, #7]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8003cea:	bf00      	nop
 8003cec:	e7fd      	b.n	8003cea <I2C3_Init+0x5e>
    }
    return;
 8003cee:	bf00      	nop
}
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	40023800 	.word	0x40023800
 8003cfc:	20025a5c 	.word	0x20025a5c
 8003d00:	40005c00 	.word	0x40005c00
 8003d04:	000186a0 	.word	0x000186a0

08003d08 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b088      	sub	sp, #32
 8003d0c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d0e:	f107 030c 	add.w	r3, r7, #12
 8003d12:	2200      	movs	r2, #0
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	605a      	str	r2, [r3, #4]
 8003d18:	609a      	str	r2, [r3, #8]
 8003d1a:	60da      	str	r2, [r3, #12]
 8003d1c:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d1e:	2300      	movs	r3, #0
 8003d20:	60bb      	str	r3, [r7, #8]
 8003d22:	4b20      	ldr	r3, [pc, #128]	@ (8003da4 <I2C3_MspInit+0x9c>)
 8003d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d26:	4a1f      	ldr	r2, [pc, #124]	@ (8003da4 <I2C3_MspInit+0x9c>)
 8003d28:	f043 0304 	orr.w	r3, r3, #4
 8003d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d2e:	4b1d      	ldr	r3, [pc, #116]	@ (8003da4 <I2C3_MspInit+0x9c>)
 8003d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d32:	f003 0304 	and.w	r3, r3, #4
 8003d36:	60bb      	str	r3, [r7, #8]
 8003d38:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	607b      	str	r3, [r7, #4]
 8003d3e:	4b19      	ldr	r3, [pc, #100]	@ (8003da4 <I2C3_MspInit+0x9c>)
 8003d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d42:	4a18      	ldr	r2, [pc, #96]	@ (8003da4 <I2C3_MspInit+0x9c>)
 8003d44:	f043 0301 	orr.w	r3, r3, #1
 8003d48:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d4a:	4b16      	ldr	r3, [pc, #88]	@ (8003da4 <I2C3_MspInit+0x9c>)
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	607b      	str	r3, [r7, #4]
 8003d54:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8003d56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d5a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d5c:	2312      	movs	r3, #18
 8003d5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d60:	2300      	movs	r3, #0
 8003d62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d64:	2300      	movs	r3, #0
 8003d66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003d68:	2304      	movs	r3, #4
 8003d6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8003d6c:	f107 030c 	add.w	r3, r7, #12
 8003d70:	4619      	mov	r1, r3
 8003d72:	480d      	ldr	r0, [pc, #52]	@ (8003da8 <I2C3_MspInit+0xa0>)
 8003d74:	f000 faf0 	bl	8004358 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8003d78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d7c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d7e:	2312      	movs	r3, #18
 8003d80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d82:	2300      	movs	r3, #0
 8003d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d86:	2300      	movs	r3, #0
 8003d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003d8a:	2304      	movs	r3, #4
 8003d8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8003d8e:	f107 030c 	add.w	r3, r7, #12
 8003d92:	4619      	mov	r1, r3
 8003d94:	4805      	ldr	r0, [pc, #20]	@ (8003dac <I2C3_MspInit+0xa4>)
 8003d96:	f000 fadf 	bl	8004358 <HAL_GPIO_Init>
    
}
 8003d9a:	bf00      	nop
 8003d9c:	3720      	adds	r7, #32
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	40023800 	.word	0x40023800
 8003da8:	40020800 	.word	0x40020800
 8003dac:	40020000 	.word	0x40020000

08003db0 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b088      	sub	sp, #32
 8003db4:	af04      	add	r7, sp, #16
 8003db6:	4603      	mov	r3, r0
 8003db8:	80fb      	strh	r3, [r7, #6]
 8003dba:	460b      	mov	r3, r1
 8003dbc:	717b      	strb	r3, [r7, #5]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8003dc2:	793b      	ldrb	r3, [r7, #4]
 8003dc4:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8003dc6:	797b      	ldrb	r3, [r7, #5]
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	88f9      	ldrh	r1, [r7, #6]
 8003dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8003df8 <I2C3_Write+0x48>)
 8003dce:	9302      	str	r3, [sp, #8]
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	9301      	str	r3, [sp, #4]
 8003dd4:	f107 030f 	add.w	r3, r7, #15
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	2301      	movs	r3, #1
 8003ddc:	4807      	ldr	r0, [pc, #28]	@ (8003dfc <I2C3_Write+0x4c>)
 8003dde:	f000 fed1 	bl	8004b84 <HAL_I2C_Mem_Write>
 8003de2:	4603      	mov	r3, r0
 8003de4:	461a      	mov	r2, r3
 8003de6:	4b06      	ldr	r3, [pc, #24]	@ (8003e00 <I2C3_Write+0x50>)
 8003de8:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8003dea:	f7ff ff3f 	bl	8003c6c <verifyHAL_I2C_IS_OKAY>
}
 8003dee:	bf00      	nop
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	0003d090 	.word	0x0003d090
 8003dfc:	20025a5c 	.word	0x20025a5c
 8003e00:	20025ab0 	.word	0x20025ab0

08003e04 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af04      	add	r7, sp, #16
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	603a      	str	r2, [r7, #0]
 8003e0e:	71fb      	strb	r3, [r7, #7]
 8003e10:	460b      	mov	r3, r1
 8003e12:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8003e14:	79fb      	ldrb	r3, [r7, #7]
 8003e16:	b299      	uxth	r1, r3
 8003e18:	79bb      	ldrb	r3, [r7, #6]
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	4b09      	ldr	r3, [pc, #36]	@ (8003e44 <I2C3_Read+0x40>)
 8003e1e:	9302      	str	r3, [sp, #8]
 8003e20:	2301      	movs	r3, #1
 8003e22:	9301      	str	r3, [sp, #4]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	2301      	movs	r3, #1
 8003e2a:	4807      	ldr	r0, [pc, #28]	@ (8003e48 <I2C3_Read+0x44>)
 8003e2c:	f000 ffa4 	bl	8004d78 <HAL_I2C_Mem_Read>
 8003e30:	4603      	mov	r3, r0
 8003e32:	461a      	mov	r2, r3
 8003e34:	4b05      	ldr	r3, [pc, #20]	@ (8003e4c <I2C3_Read+0x48>)
 8003e36:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8003e38:	f7ff ff18 	bl	8003c6c <verifyHAL_I2C_IS_OKAY>
}
 8003e3c:	bf00      	nop
 8003e3e:	3708      	adds	r7, #8
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	0003d090 	.word	0x0003d090
 8003e48:	20025a5c 	.word	0x20025a5c
 8003e4c:	20025ab0 	.word	0x20025ab0

08003e50 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af04      	add	r7, sp, #16
 8003e56:	603a      	str	r2, [r7, #0]
 8003e58:	461a      	mov	r2, r3
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	71fb      	strb	r3, [r7, #7]
 8003e5e:	460b      	mov	r3, r1
 8003e60:	71bb      	strb	r3, [r7, #6]
 8003e62:	4613      	mov	r3, r2
 8003e64:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8003e66:	79fb      	ldrb	r3, [r7, #7]
 8003e68:	b299      	uxth	r1, r3
 8003e6a:	79bb      	ldrb	r3, [r7, #6]
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	4b07      	ldr	r3, [pc, #28]	@ (8003e8c <I2C3_MulitByteRead+0x3c>)
 8003e70:	9302      	str	r3, [sp, #8]
 8003e72:	88bb      	ldrh	r3, [r7, #4]
 8003e74:	9301      	str	r3, [sp, #4]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	4804      	ldr	r0, [pc, #16]	@ (8003e90 <I2C3_MulitByteRead+0x40>)
 8003e7e:	f000 ff7b 	bl	8004d78 <HAL_I2C_Mem_Read>
}
 8003e82:	bf00      	nop
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	0003d090 	.word	0x0003d090
 8003e90:	20025a5c 	.word	0x20025a5c

08003e94 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8003e94:	b480      	push	{r7}
 8003e96:	af00      	add	r7, sp, #0
}
 8003e98:	bf00      	nop
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
	...

08003ea4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ea8:	4b06      	ldr	r3, [pc, #24]	@ (8003ec4 <SystemInit+0x20>)
 8003eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eae:	4a05      	ldr	r2, [pc, #20]	@ (8003ec4 <SystemInit+0x20>)
 8003eb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003eb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003eb8:	bf00      	nop
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	e000ed00 	.word	0xe000ed00

08003ec8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003ec8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003f00 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003ecc:	f7ff ffea 	bl	8003ea4 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ed0:	480c      	ldr	r0, [pc, #48]	@ (8003f04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003ed2:	490d      	ldr	r1, [pc, #52]	@ (8003f08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003ed4:	4a0d      	ldr	r2, [pc, #52]	@ (8003f0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ed8:	e002      	b.n	8003ee0 <LoopCopyDataInit>

08003eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ede:	3304      	adds	r3, #4

08003ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ee4:	d3f9      	bcc.n	8003eda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8003f10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003ee8:	4c0a      	ldr	r4, [pc, #40]	@ (8003f14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003eec:	e001      	b.n	8003ef2 <LoopFillZerobss>

08003eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ef0:	3204      	adds	r2, #4

08003ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ef4:	d3fb      	bcc.n	8003eee <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003ef6:	f003 f8f7 	bl	80070e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003efa:	f7ff fa89 	bl	8003410 <main>
  bx  lr    
 8003efe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003f00:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f08:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8003f0c:	08008c40 	.word	0x08008c40
  ldr r2, =_sbss
 8003f10:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8003f14:	20025ab8 	.word	0x20025ab8

08003f18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f18:	e7fe      	b.n	8003f18 <ADC_IRQHandler>
	...

08003f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f20:	4b0e      	ldr	r3, [pc, #56]	@ (8003f5c <HAL_Init+0x40>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a0d      	ldr	r2, [pc, #52]	@ (8003f5c <HAL_Init+0x40>)
 8003f26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003f5c <HAL_Init+0x40>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a0a      	ldr	r2, [pc, #40]	@ (8003f5c <HAL_Init+0x40>)
 8003f32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003f36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f38:	4b08      	ldr	r3, [pc, #32]	@ (8003f5c <HAL_Init+0x40>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a07      	ldr	r2, [pc, #28]	@ (8003f5c <HAL_Init+0x40>)
 8003f3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f44:	2003      	movs	r0, #3
 8003f46:	f000 f991 	bl	800426c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f4a:	2000      	movs	r0, #0
 8003f4c:	f000 f808 	bl	8003f60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f50:	f7ff fb02 	bl	8003558 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	40023c00 	.word	0x40023c00

08003f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f68:	4b12      	ldr	r3, [pc, #72]	@ (8003fb4 <HAL_InitTick+0x54>)
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	4b12      	ldr	r3, [pc, #72]	@ (8003fb8 <HAL_InitTick+0x58>)
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	4619      	mov	r1, r3
 8003f72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 f9b7 	bl	80042f2 <HAL_SYSTICK_Config>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e00e      	b.n	8003fac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2b0f      	cmp	r3, #15
 8003f92:	d80a      	bhi.n	8003faa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f94:	2200      	movs	r2, #0
 8003f96:	6879      	ldr	r1, [r7, #4]
 8003f98:	f04f 30ff 	mov.w	r0, #4294967295
 8003f9c:	f000 f971 	bl	8004282 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003fa0:	4a06      	ldr	r2, [pc, #24]	@ (8003fbc <HAL_InitTick+0x5c>)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	e000      	b.n	8003fac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3708      	adds	r7, #8
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	20000018 	.word	0x20000018
 8003fb8:	20000020 	.word	0x20000020
 8003fbc:	2000001c 	.word	0x2000001c

08003fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fc4:	4b06      	ldr	r3, [pc, #24]	@ (8003fe0 <HAL_IncTick+0x20>)
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	461a      	mov	r2, r3
 8003fca:	4b06      	ldr	r3, [pc, #24]	@ (8003fe4 <HAL_IncTick+0x24>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4413      	add	r3, r2
 8003fd0:	4a04      	ldr	r2, [pc, #16]	@ (8003fe4 <HAL_IncTick+0x24>)
 8003fd2:	6013      	str	r3, [r2, #0]
}
 8003fd4:	bf00      	nop
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	20000020 	.word	0x20000020
 8003fe4:	20025ab4 	.word	0x20025ab4

08003fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
  return uwTick;
 8003fec:	4b03      	ldr	r3, [pc, #12]	@ (8003ffc <HAL_GetTick+0x14>)
 8003fee:	681b      	ldr	r3, [r3, #0]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	20025ab4 	.word	0x20025ab4

08004000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004008:	f7ff ffee 	bl	8003fe8 <HAL_GetTick>
 800400c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004018:	d005      	beq.n	8004026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800401a:	4b0a      	ldr	r3, [pc, #40]	@ (8004044 <HAL_Delay+0x44>)
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	461a      	mov	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	4413      	add	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004026:	bf00      	nop
 8004028:	f7ff ffde 	bl	8003fe8 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	429a      	cmp	r2, r3
 8004036:	d8f7      	bhi.n	8004028 <HAL_Delay+0x28>
  {
  }
}
 8004038:	bf00      	nop
 800403a:	bf00      	nop
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	20000020 	.word	0x20000020

08004048 <__NVIC_SetPriorityGrouping>:
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f003 0307 	and.w	r3, r3, #7
 8004056:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004058:	4b0c      	ldr	r3, [pc, #48]	@ (800408c <__NVIC_SetPriorityGrouping+0x44>)
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004064:	4013      	ands	r3, r2
 8004066:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004070:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004074:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800407a:	4a04      	ldr	r2, [pc, #16]	@ (800408c <__NVIC_SetPriorityGrouping+0x44>)
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	60d3      	str	r3, [r2, #12]
}
 8004080:	bf00      	nop
 8004082:	3714      	adds	r7, #20
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	e000ed00 	.word	0xe000ed00

08004090 <__NVIC_GetPriorityGrouping>:
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004094:	4b04      	ldr	r3, [pc, #16]	@ (80040a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	0a1b      	lsrs	r3, r3, #8
 800409a:	f003 0307 	and.w	r3, r3, #7
}
 800409e:	4618      	mov	r0, r3
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	e000ed00 	.word	0xe000ed00

080040ac <__NVIC_EnableIRQ>:
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	4603      	mov	r3, r0
 80040b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	db0b      	blt.n	80040d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040be:	79fb      	ldrb	r3, [r7, #7]
 80040c0:	f003 021f 	and.w	r2, r3, #31
 80040c4:	4907      	ldr	r1, [pc, #28]	@ (80040e4 <__NVIC_EnableIRQ+0x38>)
 80040c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ca:	095b      	lsrs	r3, r3, #5
 80040cc:	2001      	movs	r0, #1
 80040ce:	fa00 f202 	lsl.w	r2, r0, r2
 80040d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	e000e100 	.word	0xe000e100

080040e8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	4603      	mov	r3, r0
 80040f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	db12      	blt.n	8004120 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040fa:	79fb      	ldrb	r3, [r7, #7]
 80040fc:	f003 021f 	and.w	r2, r3, #31
 8004100:	490a      	ldr	r1, [pc, #40]	@ (800412c <__NVIC_DisableIRQ+0x44>)
 8004102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004106:	095b      	lsrs	r3, r3, #5
 8004108:	2001      	movs	r0, #1
 800410a:	fa00 f202 	lsl.w	r2, r0, r2
 800410e:	3320      	adds	r3, #32
 8004110:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004114:	f3bf 8f4f 	dsb	sy
}
 8004118:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800411a:	f3bf 8f6f 	isb	sy
}
 800411e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr
 800412c:	e000e100 	.word	0xe000e100

08004130 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	4603      	mov	r3, r0
 8004138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800413a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800413e:	2b00      	cmp	r3, #0
 8004140:	db0c      	blt.n	800415c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004142:	79fb      	ldrb	r3, [r7, #7]
 8004144:	f003 021f 	and.w	r2, r3, #31
 8004148:	4907      	ldr	r1, [pc, #28]	@ (8004168 <__NVIC_ClearPendingIRQ+0x38>)
 800414a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800414e:	095b      	lsrs	r3, r3, #5
 8004150:	2001      	movs	r0, #1
 8004152:	fa00 f202 	lsl.w	r2, r0, r2
 8004156:	3360      	adds	r3, #96	@ 0x60
 8004158:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr
 8004168:	e000e100 	.word	0xe000e100

0800416c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	4603      	mov	r3, r0
 8004174:	6039      	str	r1, [r7, #0]
 8004176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800417c:	2b00      	cmp	r3, #0
 800417e:	db0a      	blt.n	8004196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	b2da      	uxtb	r2, r3
 8004184:	490c      	ldr	r1, [pc, #48]	@ (80041b8 <__NVIC_SetPriority+0x4c>)
 8004186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800418a:	0112      	lsls	r2, r2, #4
 800418c:	b2d2      	uxtb	r2, r2
 800418e:	440b      	add	r3, r1
 8004190:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004194:	e00a      	b.n	80041ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	b2da      	uxtb	r2, r3
 800419a:	4908      	ldr	r1, [pc, #32]	@ (80041bc <__NVIC_SetPriority+0x50>)
 800419c:	79fb      	ldrb	r3, [r7, #7]
 800419e:	f003 030f 	and.w	r3, r3, #15
 80041a2:	3b04      	subs	r3, #4
 80041a4:	0112      	lsls	r2, r2, #4
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	440b      	add	r3, r1
 80041aa:	761a      	strb	r2, [r3, #24]
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr
 80041b8:	e000e100 	.word	0xe000e100
 80041bc:	e000ed00 	.word	0xe000ed00

080041c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b089      	sub	sp, #36	@ 0x24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f003 0307 	and.w	r3, r3, #7
 80041d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	f1c3 0307 	rsb	r3, r3, #7
 80041da:	2b04      	cmp	r3, #4
 80041dc:	bf28      	it	cs
 80041de:	2304      	movcs	r3, #4
 80041e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	3304      	adds	r3, #4
 80041e6:	2b06      	cmp	r3, #6
 80041e8:	d902      	bls.n	80041f0 <NVIC_EncodePriority+0x30>
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	3b03      	subs	r3, #3
 80041ee:	e000      	b.n	80041f2 <NVIC_EncodePriority+0x32>
 80041f0:	2300      	movs	r3, #0
 80041f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041f4:	f04f 32ff 	mov.w	r2, #4294967295
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	fa02 f303 	lsl.w	r3, r2, r3
 80041fe:	43da      	mvns	r2, r3
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	401a      	ands	r2, r3
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004208:	f04f 31ff 	mov.w	r1, #4294967295
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	fa01 f303 	lsl.w	r3, r1, r3
 8004212:	43d9      	mvns	r1, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004218:	4313      	orrs	r3, r2
         );
}
 800421a:	4618      	mov	r0, r3
 800421c:	3724      	adds	r7, #36	@ 0x24
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
	...

08004228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	3b01      	subs	r3, #1
 8004234:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004238:	d301      	bcc.n	800423e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800423a:	2301      	movs	r3, #1
 800423c:	e00f      	b.n	800425e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800423e:	4a0a      	ldr	r2, [pc, #40]	@ (8004268 <SysTick_Config+0x40>)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	3b01      	subs	r3, #1
 8004244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004246:	210f      	movs	r1, #15
 8004248:	f04f 30ff 	mov.w	r0, #4294967295
 800424c:	f7ff ff8e 	bl	800416c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004250:	4b05      	ldr	r3, [pc, #20]	@ (8004268 <SysTick_Config+0x40>)
 8004252:	2200      	movs	r2, #0
 8004254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004256:	4b04      	ldr	r3, [pc, #16]	@ (8004268 <SysTick_Config+0x40>)
 8004258:	2207      	movs	r2, #7
 800425a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	e000e010 	.word	0xe000e010

0800426c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f7ff fee7 	bl	8004048 <__NVIC_SetPriorityGrouping>
}
 800427a:	bf00      	nop
 800427c:	3708      	adds	r7, #8
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004282:	b580      	push	{r7, lr}
 8004284:	b086      	sub	sp, #24
 8004286:	af00      	add	r7, sp, #0
 8004288:	4603      	mov	r3, r0
 800428a:	60b9      	str	r1, [r7, #8]
 800428c:	607a      	str	r2, [r7, #4]
 800428e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004290:	2300      	movs	r3, #0
 8004292:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004294:	f7ff fefc 	bl	8004090 <__NVIC_GetPriorityGrouping>
 8004298:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	68b9      	ldr	r1, [r7, #8]
 800429e:	6978      	ldr	r0, [r7, #20]
 80042a0:	f7ff ff8e 	bl	80041c0 <NVIC_EncodePriority>
 80042a4:	4602      	mov	r2, r0
 80042a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042aa:	4611      	mov	r1, r2
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7ff ff5d 	bl	800416c <__NVIC_SetPriority>
}
 80042b2:	bf00      	nop
 80042b4:	3718      	adds	r7, #24
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b082      	sub	sp, #8
 80042be:	af00      	add	r7, sp, #0
 80042c0:	4603      	mov	r3, r0
 80042c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7ff feef 	bl	80040ac <__NVIC_EnableIRQ>
}
 80042ce:	bf00      	nop
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b082      	sub	sp, #8
 80042da:	af00      	add	r7, sp, #0
 80042dc:	4603      	mov	r3, r0
 80042de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80042e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7ff feff 	bl	80040e8 <__NVIC_DisableIRQ>
}
 80042ea:	bf00      	nop
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b082      	sub	sp, #8
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7ff ff94 	bl	8004228 <SysTick_Config>
 8004300:	4603      	mov	r3, r0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b082      	sub	sp, #8
 800430e:	af00      	add	r7, sp, #0
 8004310:	4603      	mov	r3, r0
 8004312:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004318:	4618      	mov	r0, r3
 800431a:	f7ff ff09 	bl	8004130 <__NVIC_ClearPendingIRQ>
}
 800431e:	bf00      	nop
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
	...

08004328 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 031f 	and.w	r3, r3, #31
 800433a:	2201      	movs	r2, #1
 800433c:	fa02 f303 	lsl.w	r3, r2, r3
 8004340:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 8004342:	4a04      	ldr	r2, [pc, #16]	@ (8004354 <HAL_EXTI_ClearPending+0x2c>)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6153      	str	r3, [r2, #20]
}
 8004348:	bf00      	nop
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	40013c00 	.word	0x40013c00

08004358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004358:	b480      	push	{r7}
 800435a:	b089      	sub	sp, #36	@ 0x24
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004362:	2300      	movs	r3, #0
 8004364:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004366:	2300      	movs	r3, #0
 8004368:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800436a:	2300      	movs	r3, #0
 800436c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800436e:	2300      	movs	r3, #0
 8004370:	61fb      	str	r3, [r7, #28]
 8004372:	e177      	b.n	8004664 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004374:	2201      	movs	r2, #1
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	fa02 f303 	lsl.w	r3, r2, r3
 800437c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	4013      	ands	r3, r2
 8004386:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	429a      	cmp	r2, r3
 800438e:	f040 8166 	bne.w	800465e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f003 0303 	and.w	r3, r3, #3
 800439a:	2b01      	cmp	r3, #1
 800439c:	d005      	beq.n	80043aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d130      	bne.n	800440c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	2203      	movs	r2, #3
 80043b6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ba:	43db      	mvns	r3, r3
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	4013      	ands	r3, r2
 80043c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	68da      	ldr	r2, [r3, #12]
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	fa02 f303 	lsl.w	r3, r2, r3
 80043ce:	69ba      	ldr	r2, [r7, #24]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043e0:	2201      	movs	r2, #1
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	fa02 f303 	lsl.w	r3, r2, r3
 80043e8:	43db      	mvns	r3, r3
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	4013      	ands	r3, r2
 80043ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	091b      	lsrs	r3, r3, #4
 80043f6:	f003 0201 	and.w	r2, r3, #1
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	4313      	orrs	r3, r2
 8004404:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f003 0303 	and.w	r3, r3, #3
 8004414:	2b03      	cmp	r3, #3
 8004416:	d017      	beq.n	8004448 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	2203      	movs	r2, #3
 8004424:	fa02 f303 	lsl.w	r3, r2, r3
 8004428:	43db      	mvns	r3, r3
 800442a:	69ba      	ldr	r2, [r7, #24]
 800442c:	4013      	ands	r3, r2
 800442e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	fa02 f303 	lsl.w	r3, r2, r3
 800443c:	69ba      	ldr	r2, [r7, #24]
 800443e:	4313      	orrs	r3, r2
 8004440:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f003 0303 	and.w	r3, r3, #3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d123      	bne.n	800449c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	08da      	lsrs	r2, r3, #3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	3208      	adds	r2, #8
 800445c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004460:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	220f      	movs	r2, #15
 800446c:	fa02 f303 	lsl.w	r3, r2, r3
 8004470:	43db      	mvns	r3, r3
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	4013      	ands	r3, r2
 8004476:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	691a      	ldr	r2, [r3, #16]
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	f003 0307 	and.w	r3, r3, #7
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	fa02 f303 	lsl.w	r3, r2, r3
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	4313      	orrs	r3, r2
 800448c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	08da      	lsrs	r2, r3, #3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	3208      	adds	r2, #8
 8004496:	69b9      	ldr	r1, [r7, #24]
 8004498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	2203      	movs	r2, #3
 80044a8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ac:	43db      	mvns	r3, r3
 80044ae:	69ba      	ldr	r2, [r7, #24]
 80044b0:	4013      	ands	r3, r2
 80044b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f003 0203 	and.w	r2, r3, #3
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	fa02 f303 	lsl.w	r3, r2, r3
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 80c0 	beq.w	800465e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044de:	2300      	movs	r3, #0
 80044e0:	60fb      	str	r3, [r7, #12]
 80044e2:	4b66      	ldr	r3, [pc, #408]	@ (800467c <HAL_GPIO_Init+0x324>)
 80044e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044e6:	4a65      	ldr	r2, [pc, #404]	@ (800467c <HAL_GPIO_Init+0x324>)
 80044e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80044ee:	4b63      	ldr	r3, [pc, #396]	@ (800467c <HAL_GPIO_Init+0x324>)
 80044f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044f6:	60fb      	str	r3, [r7, #12]
 80044f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044fa:	4a61      	ldr	r2, [pc, #388]	@ (8004680 <HAL_GPIO_Init+0x328>)
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	089b      	lsrs	r3, r3, #2
 8004500:	3302      	adds	r3, #2
 8004502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004506:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	f003 0303 	and.w	r3, r3, #3
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	220f      	movs	r2, #15
 8004512:	fa02 f303 	lsl.w	r3, r2, r3
 8004516:	43db      	mvns	r3, r3
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	4013      	ands	r3, r2
 800451c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a58      	ldr	r2, [pc, #352]	@ (8004684 <HAL_GPIO_Init+0x32c>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d037      	beq.n	8004596 <HAL_GPIO_Init+0x23e>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a57      	ldr	r2, [pc, #348]	@ (8004688 <HAL_GPIO_Init+0x330>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d031      	beq.n	8004592 <HAL_GPIO_Init+0x23a>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a56      	ldr	r2, [pc, #344]	@ (800468c <HAL_GPIO_Init+0x334>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d02b      	beq.n	800458e <HAL_GPIO_Init+0x236>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a55      	ldr	r2, [pc, #340]	@ (8004690 <HAL_GPIO_Init+0x338>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d025      	beq.n	800458a <HAL_GPIO_Init+0x232>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a54      	ldr	r2, [pc, #336]	@ (8004694 <HAL_GPIO_Init+0x33c>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d01f      	beq.n	8004586 <HAL_GPIO_Init+0x22e>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a53      	ldr	r2, [pc, #332]	@ (8004698 <HAL_GPIO_Init+0x340>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d019      	beq.n	8004582 <HAL_GPIO_Init+0x22a>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a52      	ldr	r2, [pc, #328]	@ (800469c <HAL_GPIO_Init+0x344>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d013      	beq.n	800457e <HAL_GPIO_Init+0x226>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a51      	ldr	r2, [pc, #324]	@ (80046a0 <HAL_GPIO_Init+0x348>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d00d      	beq.n	800457a <HAL_GPIO_Init+0x222>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a50      	ldr	r2, [pc, #320]	@ (80046a4 <HAL_GPIO_Init+0x34c>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d007      	beq.n	8004576 <HAL_GPIO_Init+0x21e>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a4f      	ldr	r2, [pc, #316]	@ (80046a8 <HAL_GPIO_Init+0x350>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d101      	bne.n	8004572 <HAL_GPIO_Init+0x21a>
 800456e:	2309      	movs	r3, #9
 8004570:	e012      	b.n	8004598 <HAL_GPIO_Init+0x240>
 8004572:	230a      	movs	r3, #10
 8004574:	e010      	b.n	8004598 <HAL_GPIO_Init+0x240>
 8004576:	2308      	movs	r3, #8
 8004578:	e00e      	b.n	8004598 <HAL_GPIO_Init+0x240>
 800457a:	2307      	movs	r3, #7
 800457c:	e00c      	b.n	8004598 <HAL_GPIO_Init+0x240>
 800457e:	2306      	movs	r3, #6
 8004580:	e00a      	b.n	8004598 <HAL_GPIO_Init+0x240>
 8004582:	2305      	movs	r3, #5
 8004584:	e008      	b.n	8004598 <HAL_GPIO_Init+0x240>
 8004586:	2304      	movs	r3, #4
 8004588:	e006      	b.n	8004598 <HAL_GPIO_Init+0x240>
 800458a:	2303      	movs	r3, #3
 800458c:	e004      	b.n	8004598 <HAL_GPIO_Init+0x240>
 800458e:	2302      	movs	r3, #2
 8004590:	e002      	b.n	8004598 <HAL_GPIO_Init+0x240>
 8004592:	2301      	movs	r3, #1
 8004594:	e000      	b.n	8004598 <HAL_GPIO_Init+0x240>
 8004596:	2300      	movs	r3, #0
 8004598:	69fa      	ldr	r2, [r7, #28]
 800459a:	f002 0203 	and.w	r2, r2, #3
 800459e:	0092      	lsls	r2, r2, #2
 80045a0:	4093      	lsls	r3, r2
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045a8:	4935      	ldr	r1, [pc, #212]	@ (8004680 <HAL_GPIO_Init+0x328>)
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	089b      	lsrs	r3, r3, #2
 80045ae:	3302      	adds	r3, #2
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045b6:	4b3d      	ldr	r3, [pc, #244]	@ (80046ac <HAL_GPIO_Init+0x354>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	43db      	mvns	r3, r3
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	4013      	ands	r3, r2
 80045c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045da:	4a34      	ldr	r2, [pc, #208]	@ (80046ac <HAL_GPIO_Init+0x354>)
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045e0:	4b32      	ldr	r3, [pc, #200]	@ (80046ac <HAL_GPIO_Init+0x354>)
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	43db      	mvns	r3, r3
 80045ea:	69ba      	ldr	r2, [r7, #24]
 80045ec:	4013      	ands	r3, r2
 80045ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d003      	beq.n	8004604 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	4313      	orrs	r3, r2
 8004602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004604:	4a29      	ldr	r2, [pc, #164]	@ (80046ac <HAL_GPIO_Init+0x354>)
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800460a:	4b28      	ldr	r3, [pc, #160]	@ (80046ac <HAL_GPIO_Init+0x354>)
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	43db      	mvns	r3, r3
 8004614:	69ba      	ldr	r2, [r7, #24]
 8004616:	4013      	ands	r3, r2
 8004618:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	4313      	orrs	r3, r2
 800462c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800462e:	4a1f      	ldr	r2, [pc, #124]	@ (80046ac <HAL_GPIO_Init+0x354>)
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004634:	4b1d      	ldr	r3, [pc, #116]	@ (80046ac <HAL_GPIO_Init+0x354>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	43db      	mvns	r3, r3
 800463e:	69ba      	ldr	r2, [r7, #24]
 8004640:	4013      	ands	r3, r2
 8004642:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d003      	beq.n	8004658 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	4313      	orrs	r3, r2
 8004656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004658:	4a14      	ldr	r2, [pc, #80]	@ (80046ac <HAL_GPIO_Init+0x354>)
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	3301      	adds	r3, #1
 8004662:	61fb      	str	r3, [r7, #28]
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	2b0f      	cmp	r3, #15
 8004668:	f67f ae84 	bls.w	8004374 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800466c:	bf00      	nop
 800466e:	bf00      	nop
 8004670:	3724      	adds	r7, #36	@ 0x24
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	40023800 	.word	0x40023800
 8004680:	40013800 	.word	0x40013800
 8004684:	40020000 	.word	0x40020000
 8004688:	40020400 	.word	0x40020400
 800468c:	40020800 	.word	0x40020800
 8004690:	40020c00 	.word	0x40020c00
 8004694:	40021000 	.word	0x40021000
 8004698:	40021400 	.word	0x40021400
 800469c:	40021800 	.word	0x40021800
 80046a0:	40021c00 	.word	0x40021c00
 80046a4:	40022000 	.word	0x40022000
 80046a8:	40022400 	.word	0x40022400
 80046ac:	40013c00 	.word	0x40013c00

080046b0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b087      	sub	sp, #28
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046ba:	2300      	movs	r3, #0
 80046bc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80046be:	2300      	movs	r3, #0
 80046c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80046c2:	2300      	movs	r3, #0
 80046c4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046c6:	2300      	movs	r3, #0
 80046c8:	617b      	str	r3, [r7, #20]
 80046ca:	e0d9      	b.n	8004880 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046cc:	2201      	movs	r2, #1
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	fa02 f303 	lsl.w	r3, r2, r3
 80046d4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80046d6:	683a      	ldr	r2, [r7, #0]
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	4013      	ands	r3, r2
 80046dc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	f040 80c9 	bne.w	800487a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80046e8:	4a6b      	ldr	r2, [pc, #428]	@ (8004898 <HAL_GPIO_DeInit+0x1e8>)
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	089b      	lsrs	r3, r3, #2
 80046ee:	3302      	adds	r3, #2
 80046f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046f4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f003 0303 	and.w	r3, r3, #3
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	220f      	movs	r2, #15
 8004700:	fa02 f303 	lsl.w	r3, r2, r3
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	4013      	ands	r3, r2
 8004708:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a63      	ldr	r2, [pc, #396]	@ (800489c <HAL_GPIO_DeInit+0x1ec>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d037      	beq.n	8004782 <HAL_GPIO_DeInit+0xd2>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a62      	ldr	r2, [pc, #392]	@ (80048a0 <HAL_GPIO_DeInit+0x1f0>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d031      	beq.n	800477e <HAL_GPIO_DeInit+0xce>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a61      	ldr	r2, [pc, #388]	@ (80048a4 <HAL_GPIO_DeInit+0x1f4>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d02b      	beq.n	800477a <HAL_GPIO_DeInit+0xca>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a60      	ldr	r2, [pc, #384]	@ (80048a8 <HAL_GPIO_DeInit+0x1f8>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d025      	beq.n	8004776 <HAL_GPIO_DeInit+0xc6>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a5f      	ldr	r2, [pc, #380]	@ (80048ac <HAL_GPIO_DeInit+0x1fc>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d01f      	beq.n	8004772 <HAL_GPIO_DeInit+0xc2>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a5e      	ldr	r2, [pc, #376]	@ (80048b0 <HAL_GPIO_DeInit+0x200>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d019      	beq.n	800476e <HAL_GPIO_DeInit+0xbe>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a5d      	ldr	r2, [pc, #372]	@ (80048b4 <HAL_GPIO_DeInit+0x204>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d013      	beq.n	800476a <HAL_GPIO_DeInit+0xba>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a5c      	ldr	r2, [pc, #368]	@ (80048b8 <HAL_GPIO_DeInit+0x208>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d00d      	beq.n	8004766 <HAL_GPIO_DeInit+0xb6>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a5b      	ldr	r2, [pc, #364]	@ (80048bc <HAL_GPIO_DeInit+0x20c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d007      	beq.n	8004762 <HAL_GPIO_DeInit+0xb2>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a5a      	ldr	r2, [pc, #360]	@ (80048c0 <HAL_GPIO_DeInit+0x210>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d101      	bne.n	800475e <HAL_GPIO_DeInit+0xae>
 800475a:	2309      	movs	r3, #9
 800475c:	e012      	b.n	8004784 <HAL_GPIO_DeInit+0xd4>
 800475e:	230a      	movs	r3, #10
 8004760:	e010      	b.n	8004784 <HAL_GPIO_DeInit+0xd4>
 8004762:	2308      	movs	r3, #8
 8004764:	e00e      	b.n	8004784 <HAL_GPIO_DeInit+0xd4>
 8004766:	2307      	movs	r3, #7
 8004768:	e00c      	b.n	8004784 <HAL_GPIO_DeInit+0xd4>
 800476a:	2306      	movs	r3, #6
 800476c:	e00a      	b.n	8004784 <HAL_GPIO_DeInit+0xd4>
 800476e:	2305      	movs	r3, #5
 8004770:	e008      	b.n	8004784 <HAL_GPIO_DeInit+0xd4>
 8004772:	2304      	movs	r3, #4
 8004774:	e006      	b.n	8004784 <HAL_GPIO_DeInit+0xd4>
 8004776:	2303      	movs	r3, #3
 8004778:	e004      	b.n	8004784 <HAL_GPIO_DeInit+0xd4>
 800477a:	2302      	movs	r3, #2
 800477c:	e002      	b.n	8004784 <HAL_GPIO_DeInit+0xd4>
 800477e:	2301      	movs	r3, #1
 8004780:	e000      	b.n	8004784 <HAL_GPIO_DeInit+0xd4>
 8004782:	2300      	movs	r3, #0
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	f002 0203 	and.w	r2, r2, #3
 800478a:	0092      	lsls	r2, r2, #2
 800478c:	4093      	lsls	r3, r2
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	429a      	cmp	r2, r3
 8004792:	d132      	bne.n	80047fa <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004794:	4b4b      	ldr	r3, [pc, #300]	@ (80048c4 <HAL_GPIO_DeInit+0x214>)
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	43db      	mvns	r3, r3
 800479c:	4949      	ldr	r1, [pc, #292]	@ (80048c4 <HAL_GPIO_DeInit+0x214>)
 800479e:	4013      	ands	r3, r2
 80047a0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80047a2:	4b48      	ldr	r3, [pc, #288]	@ (80048c4 <HAL_GPIO_DeInit+0x214>)
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	43db      	mvns	r3, r3
 80047aa:	4946      	ldr	r1, [pc, #280]	@ (80048c4 <HAL_GPIO_DeInit+0x214>)
 80047ac:	4013      	ands	r3, r2
 80047ae:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80047b0:	4b44      	ldr	r3, [pc, #272]	@ (80048c4 <HAL_GPIO_DeInit+0x214>)
 80047b2:	68da      	ldr	r2, [r3, #12]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	43db      	mvns	r3, r3
 80047b8:	4942      	ldr	r1, [pc, #264]	@ (80048c4 <HAL_GPIO_DeInit+0x214>)
 80047ba:	4013      	ands	r3, r2
 80047bc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80047be:	4b41      	ldr	r3, [pc, #260]	@ (80048c4 <HAL_GPIO_DeInit+0x214>)
 80047c0:	689a      	ldr	r2, [r3, #8]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	43db      	mvns	r3, r3
 80047c6:	493f      	ldr	r1, [pc, #252]	@ (80048c4 <HAL_GPIO_DeInit+0x214>)
 80047c8:	4013      	ands	r3, r2
 80047ca:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	f003 0303 	and.w	r3, r3, #3
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	220f      	movs	r2, #15
 80047d6:	fa02 f303 	lsl.w	r3, r2, r3
 80047da:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80047dc:	4a2e      	ldr	r2, [pc, #184]	@ (8004898 <HAL_GPIO_DeInit+0x1e8>)
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	089b      	lsrs	r3, r3, #2
 80047e2:	3302      	adds	r3, #2
 80047e4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	43da      	mvns	r2, r3
 80047ec:	482a      	ldr	r0, [pc, #168]	@ (8004898 <HAL_GPIO_DeInit+0x1e8>)
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	089b      	lsrs	r3, r3, #2
 80047f2:	400a      	ands	r2, r1
 80047f4:	3302      	adds	r3, #2
 80047f6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	2103      	movs	r1, #3
 8004804:	fa01 f303 	lsl.w	r3, r1, r3
 8004808:	43db      	mvns	r3, r3
 800480a:	401a      	ands	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	08da      	lsrs	r2, r3, #3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	3208      	adds	r2, #8
 8004818:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	f003 0307 	and.w	r3, r3, #7
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	220f      	movs	r2, #15
 8004826:	fa02 f303 	lsl.w	r3, r2, r3
 800482a:	43db      	mvns	r3, r3
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	08d2      	lsrs	r2, r2, #3
 8004830:	4019      	ands	r1, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	3208      	adds	r2, #8
 8004836:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68da      	ldr	r2, [r3, #12]
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	005b      	lsls	r3, r3, #1
 8004842:	2103      	movs	r1, #3
 8004844:	fa01 f303 	lsl.w	r3, r1, r3
 8004848:	43db      	mvns	r3, r3
 800484a:	401a      	ands	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	2101      	movs	r1, #1
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	fa01 f303 	lsl.w	r3, r1, r3
 800485c:	43db      	mvns	r3, r3
 800485e:	401a      	ands	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	005b      	lsls	r3, r3, #1
 800486c:	2103      	movs	r1, #3
 800486e:	fa01 f303 	lsl.w	r3, r1, r3
 8004872:	43db      	mvns	r3, r3
 8004874:	401a      	ands	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	3301      	adds	r3, #1
 800487e:	617b      	str	r3, [r7, #20]
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	2b0f      	cmp	r3, #15
 8004884:	f67f af22 	bls.w	80046cc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004888:	bf00      	nop
 800488a:	bf00      	nop
 800488c:	371c      	adds	r7, #28
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	40013800 	.word	0x40013800
 800489c:	40020000 	.word	0x40020000
 80048a0:	40020400 	.word	0x40020400
 80048a4:	40020800 	.word	0x40020800
 80048a8:	40020c00 	.word	0x40020c00
 80048ac:	40021000 	.word	0x40021000
 80048b0:	40021400 	.word	0x40021400
 80048b4:	40021800 	.word	0x40021800
 80048b8:	40021c00 	.word	0x40021c00
 80048bc:	40022000 	.word	0x40022000
 80048c0:	40022400 	.word	0x40022400
 80048c4:	40013c00 	.word	0x40013c00

080048c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	460b      	mov	r3, r1
 80048d2:	807b      	strh	r3, [r7, #2]
 80048d4:	4613      	mov	r3, r2
 80048d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048d8:	787b      	ldrb	r3, [r7, #1]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d003      	beq.n	80048e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048de:	887a      	ldrh	r2, [r7, #2]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80048e4:	e003      	b.n	80048ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80048e6:	887b      	ldrh	r3, [r7, #2]
 80048e8:	041a      	lsls	r2, r3, #16
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	619a      	str	r2, [r3, #24]
}
 80048ee:	bf00      	nop
 80048f0:	370c      	adds	r7, #12
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
	...

080048fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e12b      	b.n	8004b66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d106      	bne.n	8004928 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7fe fe40 	bl	80035a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2224      	movs	r2, #36	@ 0x24
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f022 0201 	bic.w	r2, r2, #1
 800493e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800494e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800495e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004960:	f001 ff06 	bl	8006770 <HAL_RCC_GetPCLK1Freq>
 8004964:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	4a81      	ldr	r2, [pc, #516]	@ (8004b70 <HAL_I2C_Init+0x274>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d807      	bhi.n	8004980 <HAL_I2C_Init+0x84>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4a80      	ldr	r2, [pc, #512]	@ (8004b74 <HAL_I2C_Init+0x278>)
 8004974:	4293      	cmp	r3, r2
 8004976:	bf94      	ite	ls
 8004978:	2301      	movls	r3, #1
 800497a:	2300      	movhi	r3, #0
 800497c:	b2db      	uxtb	r3, r3
 800497e:	e006      	b.n	800498e <HAL_I2C_Init+0x92>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	4a7d      	ldr	r2, [pc, #500]	@ (8004b78 <HAL_I2C_Init+0x27c>)
 8004984:	4293      	cmp	r3, r2
 8004986:	bf94      	ite	ls
 8004988:	2301      	movls	r3, #1
 800498a:	2300      	movhi	r3, #0
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e0e7      	b.n	8004b66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	4a78      	ldr	r2, [pc, #480]	@ (8004b7c <HAL_I2C_Init+0x280>)
 800499a:	fba2 2303 	umull	r2, r3, r2, r3
 800499e:	0c9b      	lsrs	r3, r3, #18
 80049a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	4a6a      	ldr	r2, [pc, #424]	@ (8004b70 <HAL_I2C_Init+0x274>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d802      	bhi.n	80049d0 <HAL_I2C_Init+0xd4>
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	3301      	adds	r3, #1
 80049ce:	e009      	b.n	80049e4 <HAL_I2C_Init+0xe8>
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80049d6:	fb02 f303 	mul.w	r3, r2, r3
 80049da:	4a69      	ldr	r2, [pc, #420]	@ (8004b80 <HAL_I2C_Init+0x284>)
 80049dc:	fba2 2303 	umull	r2, r3, r2, r3
 80049e0:	099b      	lsrs	r3, r3, #6
 80049e2:	3301      	adds	r3, #1
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	6812      	ldr	r2, [r2, #0]
 80049e8:	430b      	orrs	r3, r1
 80049ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80049f6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	495c      	ldr	r1, [pc, #368]	@ (8004b70 <HAL_I2C_Init+0x274>)
 8004a00:	428b      	cmp	r3, r1
 8004a02:	d819      	bhi.n	8004a38 <HAL_I2C_Init+0x13c>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	1e59      	subs	r1, r3, #1
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a12:	1c59      	adds	r1, r3, #1
 8004a14:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004a18:	400b      	ands	r3, r1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00a      	beq.n	8004a34 <HAL_I2C_Init+0x138>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	1e59      	subs	r1, r3, #1
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	005b      	lsls	r3, r3, #1
 8004a28:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a32:	e051      	b.n	8004ad8 <HAL_I2C_Init+0x1dc>
 8004a34:	2304      	movs	r3, #4
 8004a36:	e04f      	b.n	8004ad8 <HAL_I2C_Init+0x1dc>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d111      	bne.n	8004a64 <HAL_I2C_Init+0x168>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	1e58      	subs	r0, r3, #1
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6859      	ldr	r1, [r3, #4]
 8004a48:	460b      	mov	r3, r1
 8004a4a:	005b      	lsls	r3, r3, #1
 8004a4c:	440b      	add	r3, r1
 8004a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a52:	3301      	adds	r3, #1
 8004a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	bf0c      	ite	eq
 8004a5c:	2301      	moveq	r3, #1
 8004a5e:	2300      	movne	r3, #0
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	e012      	b.n	8004a8a <HAL_I2C_Init+0x18e>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	1e58      	subs	r0, r3, #1
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6859      	ldr	r1, [r3, #4]
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	440b      	add	r3, r1
 8004a72:	0099      	lsls	r1, r3, #2
 8004a74:	440b      	add	r3, r1
 8004a76:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	bf0c      	ite	eq
 8004a84:	2301      	moveq	r3, #1
 8004a86:	2300      	movne	r3, #0
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <HAL_I2C_Init+0x196>
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e022      	b.n	8004ad8 <HAL_I2C_Init+0x1dc>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10e      	bne.n	8004ab8 <HAL_I2C_Init+0x1bc>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	1e58      	subs	r0, r3, #1
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6859      	ldr	r1, [r3, #4]
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	005b      	lsls	r3, r3, #1
 8004aa6:	440b      	add	r3, r1
 8004aa8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004aac:	3301      	adds	r3, #1
 8004aae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ab2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ab6:	e00f      	b.n	8004ad8 <HAL_I2C_Init+0x1dc>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	1e58      	subs	r0, r3, #1
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6859      	ldr	r1, [r3, #4]
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	440b      	add	r3, r1
 8004ac6:	0099      	lsls	r1, r3, #2
 8004ac8:	440b      	add	r3, r1
 8004aca:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ace:	3301      	adds	r3, #1
 8004ad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ad4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ad8:	6879      	ldr	r1, [r7, #4]
 8004ada:	6809      	ldr	r1, [r1, #0]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	69da      	ldr	r2, [r3, #28]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	431a      	orrs	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004b06:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	6911      	ldr	r1, [r2, #16]
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	68d2      	ldr	r2, [r2, #12]
 8004b12:	4311      	orrs	r1, r2
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	6812      	ldr	r2, [r2, #0]
 8004b18:	430b      	orrs	r3, r1
 8004b1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	695a      	ldr	r2, [r3, #20]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	430a      	orrs	r2, r1
 8004b36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f042 0201 	orr.w	r2, r2, #1
 8004b46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2220      	movs	r2, #32
 8004b52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	000186a0 	.word	0x000186a0
 8004b74:	001e847f 	.word	0x001e847f
 8004b78:	003d08ff 	.word	0x003d08ff
 8004b7c:	431bde83 	.word	0x431bde83
 8004b80:	10624dd3 	.word	0x10624dd3

08004b84 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b088      	sub	sp, #32
 8004b88:	af02      	add	r7, sp, #8
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	4608      	mov	r0, r1
 8004b8e:	4611      	mov	r1, r2
 8004b90:	461a      	mov	r2, r3
 8004b92:	4603      	mov	r3, r0
 8004b94:	817b      	strh	r3, [r7, #10]
 8004b96:	460b      	mov	r3, r1
 8004b98:	813b      	strh	r3, [r7, #8]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b9e:	f7ff fa23 	bl	8003fe8 <HAL_GetTick>
 8004ba2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b20      	cmp	r3, #32
 8004bae:	f040 80d9 	bne.w	8004d64 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	9300      	str	r3, [sp, #0]
 8004bb6:	2319      	movs	r3, #25
 8004bb8:	2201      	movs	r2, #1
 8004bba:	496d      	ldr	r1, [pc, #436]	@ (8004d70 <HAL_I2C_Mem_Write+0x1ec>)
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f000 fc8b 	bl	80054d8 <I2C_WaitOnFlagUntilTimeout>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d001      	beq.n	8004bcc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004bc8:	2302      	movs	r3, #2
 8004bca:	e0cc      	b.n	8004d66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d101      	bne.n	8004bda <HAL_I2C_Mem_Write+0x56>
 8004bd6:	2302      	movs	r3, #2
 8004bd8:	e0c5      	b.n	8004d66 <HAL_I2C_Mem_Write+0x1e2>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d007      	beq.n	8004c00 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f042 0201 	orr.w	r2, r2, #1
 8004bfe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2221      	movs	r2, #33	@ 0x21
 8004c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2240      	movs	r2, #64	@ 0x40
 8004c1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6a3a      	ldr	r2, [r7, #32]
 8004c2a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004c30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	4a4d      	ldr	r2, [pc, #308]	@ (8004d74 <HAL_I2C_Mem_Write+0x1f0>)
 8004c40:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c42:	88f8      	ldrh	r0, [r7, #6]
 8004c44:	893a      	ldrh	r2, [r7, #8]
 8004c46:	8979      	ldrh	r1, [r7, #10]
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	9301      	str	r3, [sp, #4]
 8004c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c4e:	9300      	str	r3, [sp, #0]
 8004c50:	4603      	mov	r3, r0
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f000 fac2 	bl	80051dc <I2C_RequestMemoryWrite>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d052      	beq.n	8004d04 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e081      	b.n	8004d66 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f000 fd50 	bl	800570c <I2C_WaitOnTXEFlagUntilTimeout>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00d      	beq.n	8004c8e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c76:	2b04      	cmp	r3, #4
 8004c78:	d107      	bne.n	8004c8a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e06b      	b.n	8004d66 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c92:	781a      	ldrb	r2, [r3, #0]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9e:	1c5a      	adds	r2, r3, #1
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	b29a      	uxth	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	f003 0304 	and.w	r3, r3, #4
 8004cc8:	2b04      	cmp	r3, #4
 8004cca:	d11b      	bne.n	8004d04 <HAL_I2C_Mem_Write+0x180>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d017      	beq.n	8004d04 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd8:	781a      	ldrb	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce4:	1c5a      	adds	r2, r3, #1
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1aa      	bne.n	8004c62 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f000 fd43 	bl	800579c <I2C_WaitOnBTFFlagUntilTimeout>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00d      	beq.n	8004d38 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d20:	2b04      	cmp	r3, #4
 8004d22:	d107      	bne.n	8004d34 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d32:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e016      	b.n	8004d66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2220      	movs	r2, #32
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004d60:	2300      	movs	r3, #0
 8004d62:	e000      	b.n	8004d66 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004d64:	2302      	movs	r3, #2
  }
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3718      	adds	r7, #24
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	00100002 	.word	0x00100002
 8004d74:	ffff0000 	.word	0xffff0000

08004d78 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b08c      	sub	sp, #48	@ 0x30
 8004d7c:	af02      	add	r7, sp, #8
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	4608      	mov	r0, r1
 8004d82:	4611      	mov	r1, r2
 8004d84:	461a      	mov	r2, r3
 8004d86:	4603      	mov	r3, r0
 8004d88:	817b      	strh	r3, [r7, #10]
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	813b      	strh	r3, [r7, #8]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d92:	f7ff f929 	bl	8003fe8 <HAL_GetTick>
 8004d96:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b20      	cmp	r3, #32
 8004da2:	f040 8214 	bne.w	80051ce <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	2319      	movs	r3, #25
 8004dac:	2201      	movs	r2, #1
 8004dae:	497b      	ldr	r1, [pc, #492]	@ (8004f9c <HAL_I2C_Mem_Read+0x224>)
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f000 fb91 	bl	80054d8 <I2C_WaitOnFlagUntilTimeout>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d001      	beq.n	8004dc0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	e207      	b.n	80051d0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d101      	bne.n	8004dce <HAL_I2C_Mem_Read+0x56>
 8004dca:	2302      	movs	r3, #2
 8004dcc:	e200      	b.n	80051d0 <HAL_I2C_Mem_Read+0x458>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d007      	beq.n	8004df4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f042 0201 	orr.w	r2, r2, #1
 8004df2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2222      	movs	r2, #34	@ 0x22
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2240      	movs	r2, #64	@ 0x40
 8004e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e1e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004e24:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	4a5b      	ldr	r2, [pc, #364]	@ (8004fa0 <HAL_I2C_Mem_Read+0x228>)
 8004e34:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e36:	88f8      	ldrh	r0, [r7, #6]
 8004e38:	893a      	ldrh	r2, [r7, #8]
 8004e3a:	8979      	ldrh	r1, [r7, #10]
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3e:	9301      	str	r3, [sp, #4]
 8004e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	4603      	mov	r3, r0
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f000 fa5e 	bl	8005308 <I2C_RequestMemoryRead>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e1bc      	b.n	80051d0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d113      	bne.n	8004e86 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e5e:	2300      	movs	r3, #0
 8004e60:	623b      	str	r3, [r7, #32]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	623b      	str	r3, [r7, #32]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	623b      	str	r3, [r7, #32]
 8004e72:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	e190      	b.n	80051a8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d11b      	bne.n	8004ec6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	61fb      	str	r3, [r7, #28]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	695b      	ldr	r3, [r3, #20]
 8004ea8:	61fb      	str	r3, [r7, #28]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	61fb      	str	r3, [r7, #28]
 8004eb2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	e170      	b.n	80051a8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d11b      	bne.n	8004f06 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004edc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004eec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eee:	2300      	movs	r3, #0
 8004ef0:	61bb      	str	r3, [r7, #24]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	61bb      	str	r3, [r7, #24]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	61bb      	str	r3, [r7, #24]
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	e150      	b.n	80051a8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f06:	2300      	movs	r3, #0
 8004f08:	617b      	str	r3, [r7, #20]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	617b      	str	r3, [r7, #20]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	617b      	str	r3, [r7, #20]
 8004f1a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004f1c:	e144      	b.n	80051a8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f22:	2b03      	cmp	r3, #3
 8004f24:	f200 80f1 	bhi.w	800510a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d123      	bne.n	8004f78 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f32:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f000 fc79 	bl	800582c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e145      	b.n	80051d0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	691a      	ldr	r2, [r3, #16]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f4e:	b2d2      	uxtb	r2, r2
 8004f50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f56:	1c5a      	adds	r2, r3, #1
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f60:	3b01      	subs	r3, #1
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004f76:	e117      	b.n	80051a8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d14e      	bne.n	800501e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f82:	9300      	str	r3, [sp, #0]
 8004f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f86:	2200      	movs	r2, #0
 8004f88:	4906      	ldr	r1, [pc, #24]	@ (8004fa4 <HAL_I2C_Mem_Read+0x22c>)
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f000 faa4 	bl	80054d8 <I2C_WaitOnFlagUntilTimeout>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d008      	beq.n	8004fa8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e11a      	b.n	80051d0 <HAL_I2C_Mem_Read+0x458>
 8004f9a:	bf00      	nop
 8004f9c:	00100002 	.word	0x00100002
 8004fa0:	ffff0000 	.word	0xffff0000
 8004fa4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	691a      	ldr	r2, [r3, #16]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc2:	b2d2      	uxtb	r2, r2
 8004fc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fca:	1c5a      	adds	r2, r3, #1
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	691a      	ldr	r2, [r3, #16]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff4:	b2d2      	uxtb	r2, r2
 8004ff6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffc:	1c5a      	adds	r2, r3, #1
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005006:	3b01      	subs	r3, #1
 8005008:	b29a      	uxth	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005012:	b29b      	uxth	r3, r3
 8005014:	3b01      	subs	r3, #1
 8005016:	b29a      	uxth	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800501c:	e0c4      	b.n	80051a8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800501e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005020:	9300      	str	r3, [sp, #0]
 8005022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005024:	2200      	movs	r2, #0
 8005026:	496c      	ldr	r1, [pc, #432]	@ (80051d8 <HAL_I2C_Mem_Read+0x460>)
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f000 fa55 	bl	80054d8 <I2C_WaitOnFlagUntilTimeout>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d001      	beq.n	8005038 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e0cb      	b.n	80051d0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005046:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	691a      	ldr	r2, [r3, #16]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005052:	b2d2      	uxtb	r2, r2
 8005054:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800505a:	1c5a      	adds	r2, r3, #1
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005064:	3b01      	subs	r3, #1
 8005066:	b29a      	uxth	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005070:	b29b      	uxth	r3, r3
 8005072:	3b01      	subs	r3, #1
 8005074:	b29a      	uxth	r2, r3
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800507a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005080:	2200      	movs	r2, #0
 8005082:	4955      	ldr	r1, [pc, #340]	@ (80051d8 <HAL_I2C_Mem_Read+0x460>)
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f000 fa27 	bl	80054d8 <I2C_WaitOnFlagUntilTimeout>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d001      	beq.n	8005094 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e09d      	b.n	80051d0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	691a      	ldr	r2, [r3, #16]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ae:	b2d2      	uxtb	r2, r2
 80050b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b6:	1c5a      	adds	r2, r3, #1
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050c0:	3b01      	subs	r3, #1
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	3b01      	subs	r3, #1
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	691a      	ldr	r2, [r3, #16]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e0:	b2d2      	uxtb	r2, r2
 80050e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e8:	1c5a      	adds	r2, r3, #1
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050f2:	3b01      	subs	r3, #1
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050fe:	b29b      	uxth	r3, r3
 8005100:	3b01      	subs	r3, #1
 8005102:	b29a      	uxth	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005108:	e04e      	b.n	80051a8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800510a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800510c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f000 fb8c 	bl	800582c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e058      	b.n	80051d0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	691a      	ldr	r2, [r3, #16]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005128:	b2d2      	uxtb	r2, r2
 800512a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005130:	1c5a      	adds	r2, r3, #1
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800513a:	3b01      	subs	r3, #1
 800513c:	b29a      	uxth	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005146:	b29b      	uxth	r3, r3
 8005148:	3b01      	subs	r3, #1
 800514a:	b29a      	uxth	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	f003 0304 	and.w	r3, r3, #4
 800515a:	2b04      	cmp	r3, #4
 800515c:	d124      	bne.n	80051a8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005162:	2b03      	cmp	r3, #3
 8005164:	d107      	bne.n	8005176 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005174:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	691a      	ldr	r2, [r3, #16]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005180:	b2d2      	uxtb	r2, r2
 8005182:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005188:	1c5a      	adds	r2, r3, #1
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005192:	3b01      	subs	r3, #1
 8005194:	b29a      	uxth	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800519e:	b29b      	uxth	r3, r3
 80051a0:	3b01      	subs	r3, #1
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f47f aeb6 	bne.w	8004f1e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2220      	movs	r2, #32
 80051b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80051ca:	2300      	movs	r3, #0
 80051cc:	e000      	b.n	80051d0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80051ce:	2302      	movs	r3, #2
  }
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3728      	adds	r7, #40	@ 0x28
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	00010004 	.word	0x00010004

080051dc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b088      	sub	sp, #32
 80051e0:	af02      	add	r7, sp, #8
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	4608      	mov	r0, r1
 80051e6:	4611      	mov	r1, r2
 80051e8:	461a      	mov	r2, r3
 80051ea:	4603      	mov	r3, r0
 80051ec:	817b      	strh	r3, [r7, #10]
 80051ee:	460b      	mov	r3, r1
 80051f0:	813b      	strh	r3, [r7, #8]
 80051f2:	4613      	mov	r3, r2
 80051f4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005204:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005208:	9300      	str	r3, [sp, #0]
 800520a:	6a3b      	ldr	r3, [r7, #32]
 800520c:	2200      	movs	r2, #0
 800520e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f000 f960 	bl	80054d8 <I2C_WaitOnFlagUntilTimeout>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00d      	beq.n	800523a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005228:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800522c:	d103      	bne.n	8005236 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005234:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e05f      	b.n	80052fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800523a:	897b      	ldrh	r3, [r7, #10]
 800523c:	b2db      	uxtb	r3, r3
 800523e:	461a      	mov	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005248:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800524a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524c:	6a3a      	ldr	r2, [r7, #32]
 800524e:	492d      	ldr	r1, [pc, #180]	@ (8005304 <I2C_RequestMemoryWrite+0x128>)
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f000 f9bb 	bl	80055cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d001      	beq.n	8005260 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e04c      	b.n	80052fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005260:	2300      	movs	r3, #0
 8005262:	617b      	str	r3, [r7, #20]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	617b      	str	r3, [r7, #20]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	617b      	str	r3, [r7, #20]
 8005274:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005278:	6a39      	ldr	r1, [r7, #32]
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f000 fa46 	bl	800570c <I2C_WaitOnTXEFlagUntilTimeout>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00d      	beq.n	80052a2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800528a:	2b04      	cmp	r3, #4
 800528c:	d107      	bne.n	800529e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800529c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e02b      	b.n	80052fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052a2:	88fb      	ldrh	r3, [r7, #6]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d105      	bne.n	80052b4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052a8:	893b      	ldrh	r3, [r7, #8]
 80052aa:	b2da      	uxtb	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	611a      	str	r2, [r3, #16]
 80052b2:	e021      	b.n	80052f8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80052b4:	893b      	ldrh	r3, [r7, #8]
 80052b6:	0a1b      	lsrs	r3, r3, #8
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	b2da      	uxtb	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052c4:	6a39      	ldr	r1, [r7, #32]
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f000 fa20 	bl	800570c <I2C_WaitOnTXEFlagUntilTimeout>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00d      	beq.n	80052ee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d6:	2b04      	cmp	r3, #4
 80052d8:	d107      	bne.n	80052ea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e005      	b.n	80052fa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052ee:	893b      	ldrh	r3, [r7, #8]
 80052f0:	b2da      	uxtb	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3718      	adds	r7, #24
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	00010002 	.word	0x00010002

08005308 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b088      	sub	sp, #32
 800530c:	af02      	add	r7, sp, #8
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	4608      	mov	r0, r1
 8005312:	4611      	mov	r1, r2
 8005314:	461a      	mov	r2, r3
 8005316:	4603      	mov	r3, r0
 8005318:	817b      	strh	r3, [r7, #10]
 800531a:	460b      	mov	r3, r1
 800531c:	813b      	strh	r3, [r7, #8]
 800531e:	4613      	mov	r3, r2
 8005320:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005330:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005340:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005344:	9300      	str	r3, [sp, #0]
 8005346:	6a3b      	ldr	r3, [r7, #32]
 8005348:	2200      	movs	r2, #0
 800534a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f000 f8c2 	bl	80054d8 <I2C_WaitOnFlagUntilTimeout>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00d      	beq.n	8005376 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005364:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005368:	d103      	bne.n	8005372 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005370:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e0aa      	b.n	80054cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005376:	897b      	ldrh	r3, [r7, #10]
 8005378:	b2db      	uxtb	r3, r3
 800537a:	461a      	mov	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005384:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005388:	6a3a      	ldr	r2, [r7, #32]
 800538a:	4952      	ldr	r1, [pc, #328]	@ (80054d4 <I2C_RequestMemoryRead+0x1cc>)
 800538c:	68f8      	ldr	r0, [r7, #12]
 800538e:	f000 f91d 	bl	80055cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d001      	beq.n	800539c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e097      	b.n	80054cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800539c:	2300      	movs	r3, #0
 800539e:	617b      	str	r3, [r7, #20]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	617b      	str	r3, [r7, #20]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	617b      	str	r3, [r7, #20]
 80053b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053b4:	6a39      	ldr	r1, [r7, #32]
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f000 f9a8 	bl	800570c <I2C_WaitOnTXEFlagUntilTimeout>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00d      	beq.n	80053de <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c6:	2b04      	cmp	r3, #4
 80053c8:	d107      	bne.n	80053da <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e076      	b.n	80054cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053de:	88fb      	ldrh	r3, [r7, #6]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d105      	bne.n	80053f0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053e4:	893b      	ldrh	r3, [r7, #8]
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	611a      	str	r2, [r3, #16]
 80053ee:	e021      	b.n	8005434 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80053f0:	893b      	ldrh	r3, [r7, #8]
 80053f2:	0a1b      	lsrs	r3, r3, #8
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	b2da      	uxtb	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005400:	6a39      	ldr	r1, [r7, #32]
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f000 f982 	bl	800570c <I2C_WaitOnTXEFlagUntilTimeout>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00d      	beq.n	800542a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005412:	2b04      	cmp	r3, #4
 8005414:	d107      	bne.n	8005426 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005424:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e050      	b.n	80054cc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800542a:	893b      	ldrh	r3, [r7, #8]
 800542c:	b2da      	uxtb	r2, r3
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005434:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005436:	6a39      	ldr	r1, [r7, #32]
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f000 f967 	bl	800570c <I2C_WaitOnTXEFlagUntilTimeout>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00d      	beq.n	8005460 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005448:	2b04      	cmp	r3, #4
 800544a:	d107      	bne.n	800545c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800545a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e035      	b.n	80054cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800546e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005472:	9300      	str	r3, [sp, #0]
 8005474:	6a3b      	ldr	r3, [r7, #32]
 8005476:	2200      	movs	r2, #0
 8005478:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f000 f82b 	bl	80054d8 <I2C_WaitOnFlagUntilTimeout>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00d      	beq.n	80054a4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005492:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005496:	d103      	bne.n	80054a0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800549e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e013      	b.n	80054cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80054a4:	897b      	ldrh	r3, [r7, #10]
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	f043 0301 	orr.w	r3, r3, #1
 80054ac:	b2da      	uxtb	r2, r3
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b6:	6a3a      	ldr	r2, [r7, #32]
 80054b8:	4906      	ldr	r1, [pc, #24]	@ (80054d4 <I2C_RequestMemoryRead+0x1cc>)
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f000 f886 	bl	80055cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d001      	beq.n	80054ca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e000      	b.n	80054cc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3718      	adds	r7, #24
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	00010002 	.word	0x00010002

080054d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	603b      	str	r3, [r7, #0]
 80054e4:	4613      	mov	r3, r2
 80054e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054e8:	e048      	b.n	800557c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f0:	d044      	beq.n	800557c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054f2:	f7fe fd79 	bl	8003fe8 <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	683a      	ldr	r2, [r7, #0]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d302      	bcc.n	8005508 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d139      	bne.n	800557c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	0c1b      	lsrs	r3, r3, #16
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b01      	cmp	r3, #1
 8005510:	d10d      	bne.n	800552e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	695b      	ldr	r3, [r3, #20]
 8005518:	43da      	mvns	r2, r3
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	4013      	ands	r3, r2
 800551e:	b29b      	uxth	r3, r3
 8005520:	2b00      	cmp	r3, #0
 8005522:	bf0c      	ite	eq
 8005524:	2301      	moveq	r3, #1
 8005526:	2300      	movne	r3, #0
 8005528:	b2db      	uxtb	r3, r3
 800552a:	461a      	mov	r2, r3
 800552c:	e00c      	b.n	8005548 <I2C_WaitOnFlagUntilTimeout+0x70>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	43da      	mvns	r2, r3
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	4013      	ands	r3, r2
 800553a:	b29b      	uxth	r3, r3
 800553c:	2b00      	cmp	r3, #0
 800553e:	bf0c      	ite	eq
 8005540:	2301      	moveq	r3, #1
 8005542:	2300      	movne	r3, #0
 8005544:	b2db      	uxtb	r3, r3
 8005546:	461a      	mov	r2, r3
 8005548:	79fb      	ldrb	r3, [r7, #7]
 800554a:	429a      	cmp	r2, r3
 800554c:	d116      	bne.n	800557c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2220      	movs	r2, #32
 8005558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005568:	f043 0220 	orr.w	r2, r3, #32
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e023      	b.n	80055c4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	0c1b      	lsrs	r3, r3, #16
 8005580:	b2db      	uxtb	r3, r3
 8005582:	2b01      	cmp	r3, #1
 8005584:	d10d      	bne.n	80055a2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	695b      	ldr	r3, [r3, #20]
 800558c:	43da      	mvns	r2, r3
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	4013      	ands	r3, r2
 8005592:	b29b      	uxth	r3, r3
 8005594:	2b00      	cmp	r3, #0
 8005596:	bf0c      	ite	eq
 8005598:	2301      	moveq	r3, #1
 800559a:	2300      	movne	r3, #0
 800559c:	b2db      	uxtb	r3, r3
 800559e:	461a      	mov	r2, r3
 80055a0:	e00c      	b.n	80055bc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	43da      	mvns	r2, r3
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	4013      	ands	r3, r2
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	bf0c      	ite	eq
 80055b4:	2301      	moveq	r3, #1
 80055b6:	2300      	movne	r3, #0
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	461a      	mov	r2, r3
 80055bc:	79fb      	ldrb	r3, [r7, #7]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d093      	beq.n	80054ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]
 80055d8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055da:	e071      	b.n	80056c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055ea:	d123      	bne.n	8005634 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055fa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005604:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2220      	movs	r2, #32
 8005610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005620:	f043 0204 	orr.w	r2, r3, #4
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e067      	b.n	8005704 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800563a:	d041      	beq.n	80056c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800563c:	f7fe fcd4 	bl	8003fe8 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	429a      	cmp	r2, r3
 800564a:	d302      	bcc.n	8005652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d136      	bne.n	80056c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	0c1b      	lsrs	r3, r3, #16
 8005656:	b2db      	uxtb	r3, r3
 8005658:	2b01      	cmp	r3, #1
 800565a:	d10c      	bne.n	8005676 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	43da      	mvns	r2, r3
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	4013      	ands	r3, r2
 8005668:	b29b      	uxth	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	bf14      	ite	ne
 800566e:	2301      	movne	r3, #1
 8005670:	2300      	moveq	r3, #0
 8005672:	b2db      	uxtb	r3, r3
 8005674:	e00b      	b.n	800568e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	43da      	mvns	r2, r3
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	4013      	ands	r3, r2
 8005682:	b29b      	uxth	r3, r3
 8005684:	2b00      	cmp	r3, #0
 8005686:	bf14      	ite	ne
 8005688:	2301      	movne	r3, #1
 800568a:	2300      	moveq	r3, #0
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d016      	beq.n	80056c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2220      	movs	r2, #32
 800569c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ac:	f043 0220 	orr.w	r2, r3, #32
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e021      	b.n	8005704 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	0c1b      	lsrs	r3, r3, #16
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d10c      	bne.n	80056e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	695b      	ldr	r3, [r3, #20]
 80056d0:	43da      	mvns	r2, r3
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	4013      	ands	r3, r2
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	2b00      	cmp	r3, #0
 80056da:	bf14      	ite	ne
 80056dc:	2301      	movne	r3, #1
 80056de:	2300      	moveq	r3, #0
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	e00b      	b.n	80056fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	43da      	mvns	r2, r3
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	4013      	ands	r3, r2
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	bf14      	ite	ne
 80056f6:	2301      	movne	r3, #1
 80056f8:	2300      	moveq	r3, #0
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f47f af6d 	bne.w	80055dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005718:	e034      	b.n	8005784 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f000 f8e3 	bl	80058e6 <I2C_IsAcknowledgeFailed>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d001      	beq.n	800572a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e034      	b.n	8005794 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005730:	d028      	beq.n	8005784 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005732:	f7fe fc59 	bl	8003fe8 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	68ba      	ldr	r2, [r7, #8]
 800573e:	429a      	cmp	r2, r3
 8005740:	d302      	bcc.n	8005748 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d11d      	bne.n	8005784 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005752:	2b80      	cmp	r3, #128	@ 0x80
 8005754:	d016      	beq.n	8005784 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2220      	movs	r2, #32
 8005760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005770:	f043 0220 	orr.w	r2, r3, #32
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e007      	b.n	8005794 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800578e:	2b80      	cmp	r3, #128	@ 0x80
 8005790:	d1c3      	bne.n	800571a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057a8:	e034      	b.n	8005814 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	f000 f89b 	bl	80058e6 <I2C_IsAcknowledgeFailed>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d001      	beq.n	80057ba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e034      	b.n	8005824 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c0:	d028      	beq.n	8005814 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057c2:	f7fe fc11 	bl	8003fe8 <HAL_GetTick>
 80057c6:	4602      	mov	r2, r0
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	68ba      	ldr	r2, [r7, #8]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d302      	bcc.n	80057d8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d11d      	bne.n	8005814 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	f003 0304 	and.w	r3, r3, #4
 80057e2:	2b04      	cmp	r3, #4
 80057e4:	d016      	beq.n	8005814 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2220      	movs	r2, #32
 80057f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005800:	f043 0220 	orr.w	r2, r3, #32
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e007      	b.n	8005824 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	f003 0304 	and.w	r3, r3, #4
 800581e:	2b04      	cmp	r3, #4
 8005820:	d1c3      	bne.n	80057aa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3710      	adds	r7, #16
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005838:	e049      	b.n	80058ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	695b      	ldr	r3, [r3, #20]
 8005840:	f003 0310 	and.w	r3, r3, #16
 8005844:	2b10      	cmp	r3, #16
 8005846:	d119      	bne.n	800587c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f06f 0210 	mvn.w	r2, #16
 8005850:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2220      	movs	r2, #32
 800585c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e030      	b.n	80058de <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800587c:	f7fe fbb4 	bl	8003fe8 <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	429a      	cmp	r2, r3
 800588a:	d302      	bcc.n	8005892 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d11d      	bne.n	80058ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	695b      	ldr	r3, [r3, #20]
 8005898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800589c:	2b40      	cmp	r3, #64	@ 0x40
 800589e:	d016      	beq.n	80058ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2220      	movs	r2, #32
 80058aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ba:	f043 0220 	orr.w	r2, r3, #32
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e007      	b.n	80058de <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	695b      	ldr	r3, [r3, #20]
 80058d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058d8:	2b40      	cmp	r3, #64	@ 0x40
 80058da:	d1ae      	bne.n	800583a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b083      	sub	sp, #12
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058fc:	d11b      	bne.n	8005936 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005906:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2220      	movs	r2, #32
 8005912:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005922:	f043 0204 	orr.w	r2, r3, #4
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e000      	b.n	8005938 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d101      	bne.n	8005956 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e0bf      	b.n	8005ad6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b00      	cmp	r3, #0
 8005960:	d106      	bne.n	8005970 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f7fd fe86 	bl	800367c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2202      	movs	r2, #2
 8005974:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	699a      	ldr	r2, [r3, #24]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8005986:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6999      	ldr	r1, [r3, #24]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685a      	ldr	r2, [r3, #4]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800599c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	430a      	orrs	r2, r1
 80059aa:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6899      	ldr	r1, [r3, #8]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	4b4a      	ldr	r3, [pc, #296]	@ (8005ae0 <HAL_LTDC_Init+0x19c>)
 80059b8:	400b      	ands	r3, r1
 80059ba:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	695b      	ldr	r3, [r3, #20]
 80059c0:	041b      	lsls	r3, r3, #16
 80059c2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6899      	ldr	r1, [r3, #8]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	699a      	ldr	r2, [r3, #24]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	431a      	orrs	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	430a      	orrs	r2, r1
 80059d8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68d9      	ldr	r1, [r3, #12]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	4b3e      	ldr	r3, [pc, #248]	@ (8005ae0 <HAL_LTDC_Init+0x19c>)
 80059e6:	400b      	ands	r3, r1
 80059e8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	69db      	ldr	r3, [r3, #28]
 80059ee:	041b      	lsls	r3, r3, #16
 80059f0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68d9      	ldr	r1, [r3, #12]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a1a      	ldr	r2, [r3, #32]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	431a      	orrs	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	430a      	orrs	r2, r1
 8005a06:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	6919      	ldr	r1, [r3, #16]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	4b33      	ldr	r3, [pc, #204]	@ (8005ae0 <HAL_LTDC_Init+0x19c>)
 8005a14:	400b      	ands	r3, r1
 8005a16:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a1c:	041b      	lsls	r3, r3, #16
 8005a1e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	6919      	ldr	r1, [r3, #16]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	431a      	orrs	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	430a      	orrs	r2, r1
 8005a34:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	6959      	ldr	r1, [r3, #20]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	4b27      	ldr	r3, [pc, #156]	@ (8005ae0 <HAL_LTDC_Init+0x19c>)
 8005a42:	400b      	ands	r3, r1
 8005a44:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a4a:	041b      	lsls	r3, r3, #16
 8005a4c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	6959      	ldr	r1, [r3, #20]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	431a      	orrs	r2, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	430a      	orrs	r2, r1
 8005a62:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005a6a:	021b      	lsls	r3, r3, #8
 8005a6c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005a74:	041b      	lsls	r3, r3, #16
 8005a76:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8005a86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8005a9a:	431a      	orrs	r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f042 0206 	orr.w	r2, r2, #6
 8005ab2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	699a      	ldr	r2, [r3, #24]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f042 0201 	orr.w	r2, r2, #1
 8005ac2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	f000f800 	.word	0xf000f800

08005ae4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005ae4:	b5b0      	push	{r4, r5, r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d101      	bne.n	8005afe <HAL_LTDC_ConfigLayer+0x1a>
 8005afa:	2302      	movs	r3, #2
 8005afc:	e02c      	b.n	8005b58 <HAL_LTDC_ConfigLayer+0x74>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2201      	movs	r2, #1
 8005b02:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2202      	movs	r2, #2
 8005b0a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2134      	movs	r1, #52	@ 0x34
 8005b14:	fb01 f303 	mul.w	r3, r1, r3
 8005b18:	4413      	add	r3, r2
 8005b1a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	4614      	mov	r4, r2
 8005b22:	461d      	mov	r5, r3
 8005b24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b30:	682b      	ldr	r3, [r5, #0]
 8005b32:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	68b9      	ldr	r1, [r7, #8]
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f000 f811 	bl	8005b60 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2201      	movs	r2, #1
 8005b44:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3710      	adds	r7, #16
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bdb0      	pop	{r4, r5, r7, pc}

08005b60 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b089      	sub	sp, #36	@ 0x24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	0c1b      	lsrs	r3, r3, #16
 8005b78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b7c:	4413      	add	r3, r2
 8005b7e:	041b      	lsls	r3, r3, #16
 8005b80:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	461a      	mov	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	01db      	lsls	r3, r3, #7
 8005b8c:	4413      	add	r3, r2
 8005b8e:	3384      	adds	r3, #132	@ 0x84
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	6812      	ldr	r2, [r2, #0]
 8005b96:	4611      	mov	r1, r2
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	01d2      	lsls	r2, r2, #7
 8005b9c:	440a      	add	r2, r1
 8005b9e:	3284      	adds	r2, #132	@ 0x84
 8005ba0:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005ba4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	0c1b      	lsrs	r3, r3, #16
 8005bb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005bb6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005bb8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	01db      	lsls	r3, r3, #7
 8005bc4:	440b      	add	r3, r1
 8005bc6:	3384      	adds	r3, #132	@ 0x84
 8005bc8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005bce:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	68da      	ldr	r2, [r3, #12]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bde:	4413      	add	r3, r2
 8005be0:	041b      	lsls	r3, r3, #16
 8005be2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	461a      	mov	r2, r3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	01db      	lsls	r3, r3, #7
 8005bee:	4413      	add	r3, r2
 8005bf0:	3384      	adds	r3, #132	@ 0x84
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	6812      	ldr	r2, [r2, #0]
 8005bf8:	4611      	mov	r1, r2
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	01d2      	lsls	r2, r2, #7
 8005bfe:	440a      	add	r2, r1
 8005c00:	3284      	adds	r2, #132	@ 0x84
 8005c02:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005c06:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	689a      	ldr	r2, [r3, #8]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c16:	4413      	add	r3, r2
 8005c18:	1c5a      	adds	r2, r3, #1
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4619      	mov	r1, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	01db      	lsls	r3, r3, #7
 8005c24:	440b      	add	r3, r1
 8005c26:	3384      	adds	r3, #132	@ 0x84
 8005c28:	4619      	mov	r1, r3
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	461a      	mov	r2, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	01db      	lsls	r3, r3, #7
 8005c3a:	4413      	add	r3, r2
 8005c3c:	3384      	adds	r3, #132	@ 0x84
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	6812      	ldr	r2, [r2, #0]
 8005c44:	4611      	mov	r1, r2
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	01d2      	lsls	r2, r2, #7
 8005c4a:	440a      	add	r2, r1
 8005c4c:	3284      	adds	r2, #132	@ 0x84
 8005c4e:	f023 0307 	bic.w	r3, r3, #7
 8005c52:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	461a      	mov	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	01db      	lsls	r3, r3, #7
 8005c5e:	4413      	add	r3, r2
 8005c60:	3384      	adds	r3, #132	@ 0x84
 8005c62:	461a      	mov	r2, r3
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005c70:	021b      	lsls	r3, r3, #8
 8005c72:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005c7a:	041b      	lsls	r3, r3, #16
 8005c7c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	061b      	lsls	r3, r3, #24
 8005c84:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	01db      	lsls	r3, r3, #7
 8005c90:	4413      	add	r3, r2
 8005c92:	3384      	adds	r3, #132	@ 0x84
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	01db      	lsls	r3, r3, #7
 8005ca0:	4413      	add	r3, r2
 8005ca2:	3384      	adds	r3, #132	@ 0x84
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	431a      	orrs	r2, r3
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	431a      	orrs	r2, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	01db      	lsls	r3, r3, #7
 8005cc4:	440b      	add	r3, r1
 8005cc6:	3384      	adds	r3, #132	@ 0x84
 8005cc8:	4619      	mov	r1, r3
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	01db      	lsls	r3, r3, #7
 8005cda:	4413      	add	r3, r2
 8005cdc:	3384      	adds	r3, #132	@ 0x84
 8005cde:	695b      	ldr	r3, [r3, #20]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	6812      	ldr	r2, [r2, #0]
 8005ce4:	4611      	mov	r1, r2
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	01d2      	lsls	r2, r2, #7
 8005cea:	440a      	add	r2, r1
 8005cec:	3284      	adds	r2, #132	@ 0x84
 8005cee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005cf2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	01db      	lsls	r3, r3, #7
 8005cfe:	4413      	add	r3, r2
 8005d00:	3384      	adds	r3, #132	@ 0x84
 8005d02:	461a      	mov	r2, r3
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	695b      	ldr	r3, [r3, #20]
 8005d08:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	01db      	lsls	r3, r3, #7
 8005d14:	4413      	add	r3, r2
 8005d16:	3384      	adds	r3, #132	@ 0x84
 8005d18:	69db      	ldr	r3, [r3, #28]
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	6812      	ldr	r2, [r2, #0]
 8005d1e:	4611      	mov	r1, r2
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	01d2      	lsls	r2, r2, #7
 8005d24:	440a      	add	r2, r1
 8005d26:	3284      	adds	r2, #132	@ 0x84
 8005d28:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005d2c:	f023 0307 	bic.w	r3, r3, #7
 8005d30:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	69da      	ldr	r2, [r3, #28]
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	68f9      	ldr	r1, [r7, #12]
 8005d3c:	6809      	ldr	r1, [r1, #0]
 8005d3e:	4608      	mov	r0, r1
 8005d40:	6879      	ldr	r1, [r7, #4]
 8005d42:	01c9      	lsls	r1, r1, #7
 8005d44:	4401      	add	r1, r0
 8005d46:	3184      	adds	r1, #132	@ 0x84
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	461a      	mov	r2, r3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	01db      	lsls	r3, r3, #7
 8005d56:	4413      	add	r3, r2
 8005d58:	3384      	adds	r3, #132	@ 0x84
 8005d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	461a      	mov	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	01db      	lsls	r3, r3, #7
 8005d66:	4413      	add	r3, r2
 8005d68:	3384      	adds	r3, #132	@ 0x84
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	461a      	mov	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	01db      	lsls	r3, r3, #7
 8005d7a:	4413      	add	r3, r2
 8005d7c:	3384      	adds	r3, #132	@ 0x84
 8005d7e:	461a      	mov	r2, r3
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d84:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d102      	bne.n	8005d94 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005d8e:	2304      	movs	r3, #4
 8005d90:	61fb      	str	r3, [r7, #28]
 8005d92:	e01b      	b.n	8005dcc <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d102      	bne.n	8005da2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	61fb      	str	r3, [r7, #28]
 8005da0:	e014      	b.n	8005dcc <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	2b04      	cmp	r3, #4
 8005da8:	d00b      	beq.n	8005dc2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d007      	beq.n	8005dc2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005db6:	2b03      	cmp	r3, #3
 8005db8:	d003      	beq.n	8005dc2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005dbe:	2b07      	cmp	r3, #7
 8005dc0:	d102      	bne.n	8005dc8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	61fb      	str	r3, [r7, #28]
 8005dc6:	e001      	b.n	8005dcc <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	01db      	lsls	r3, r3, #7
 8005dd6:	4413      	add	r3, r2
 8005dd8:	3384      	adds	r3, #132	@ 0x84
 8005dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	6812      	ldr	r2, [r2, #0]
 8005de0:	4611      	mov	r1, r2
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	01d2      	lsls	r2, r2, #7
 8005de6:	440a      	add	r2, r1
 8005de8:	3284      	adds	r2, #132	@ 0x84
 8005dea:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005dee:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df4:	69fa      	ldr	r2, [r7, #28]
 8005df6:	fb02 f303 	mul.w	r3, r2, r3
 8005dfa:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	6859      	ldr	r1, [r3, #4]
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	1acb      	subs	r3, r1, r3
 8005e06:	69f9      	ldr	r1, [r7, #28]
 8005e08:	fb01 f303 	mul.w	r3, r1, r3
 8005e0c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005e0e:	68f9      	ldr	r1, [r7, #12]
 8005e10:	6809      	ldr	r1, [r1, #0]
 8005e12:	4608      	mov	r0, r1
 8005e14:	6879      	ldr	r1, [r7, #4]
 8005e16:	01c9      	lsls	r1, r1, #7
 8005e18:	4401      	add	r1, r0
 8005e1a:	3184      	adds	r1, #132	@ 0x84
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	461a      	mov	r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	01db      	lsls	r3, r3, #7
 8005e2a:	4413      	add	r3, r2
 8005e2c:	3384      	adds	r3, #132	@ 0x84
 8005e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	6812      	ldr	r2, [r2, #0]
 8005e34:	4611      	mov	r1, r2
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	01d2      	lsls	r2, r2, #7
 8005e3a:	440a      	add	r2, r1
 8005e3c:	3284      	adds	r2, #132	@ 0x84
 8005e3e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005e42:	f023 0307 	bic.w	r3, r3, #7
 8005e46:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	01db      	lsls	r3, r3, #7
 8005e52:	4413      	add	r3, r2
 8005e54:	3384      	adds	r3, #132	@ 0x84
 8005e56:	461a      	mov	r2, r3
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e5c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	461a      	mov	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	01db      	lsls	r3, r3, #7
 8005e68:	4413      	add	r3, r2
 8005e6a:	3384      	adds	r3, #132	@ 0x84
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	6812      	ldr	r2, [r2, #0]
 8005e72:	4611      	mov	r1, r2
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	01d2      	lsls	r2, r2, #7
 8005e78:	440a      	add	r2, r1
 8005e7a:	3284      	adds	r2, #132	@ 0x84
 8005e7c:	f043 0301 	orr.w	r3, r3, #1
 8005e80:	6013      	str	r3, [r2, #0]
}
 8005e82:	bf00      	nop
 8005e84:	3724      	adds	r7, #36	@ 0x24
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
	...

08005e90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d101      	bne.n	8005ea2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e267      	b.n	8006372 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d075      	beq.n	8005f9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005eae:	4b88      	ldr	r3, [pc, #544]	@ (80060d0 <HAL_RCC_OscConfig+0x240>)
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f003 030c 	and.w	r3, r3, #12
 8005eb6:	2b04      	cmp	r3, #4
 8005eb8:	d00c      	beq.n	8005ed4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005eba:	4b85      	ldr	r3, [pc, #532]	@ (80060d0 <HAL_RCC_OscConfig+0x240>)
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005ec2:	2b08      	cmp	r3, #8
 8005ec4:	d112      	bne.n	8005eec <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ec6:	4b82      	ldr	r3, [pc, #520]	@ (80060d0 <HAL_RCC_OscConfig+0x240>)
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ece:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ed2:	d10b      	bne.n	8005eec <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ed4:	4b7e      	ldr	r3, [pc, #504]	@ (80060d0 <HAL_RCC_OscConfig+0x240>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d05b      	beq.n	8005f98 <HAL_RCC_OscConfig+0x108>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d157      	bne.n	8005f98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e242      	b.n	8006372 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ef4:	d106      	bne.n	8005f04 <HAL_RCC_OscConfig+0x74>
 8005ef6:	4b76      	ldr	r3, [pc, #472]	@ (80060d0 <HAL_RCC_OscConfig+0x240>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a75      	ldr	r2, [pc, #468]	@ (80060d0 <HAL_RCC_OscConfig+0x240>)
 8005efc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f00:	6013      	str	r3, [r2, #0]
 8005f02:	e01d      	b.n	8005f40 <HAL_RCC_OscConfig+0xb0>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f0c:	d10c      	bne.n	8005f28 <HAL_RCC_OscConfig+0x98>
 8005f0e:	4b70      	ldr	r3, [pc, #448]	@ (80060d0 <HAL_RCC_OscConfig+0x240>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a6f      	ldr	r2, [pc, #444]	@ (80060d0 <HAL_RCC_OscConfig+0x240>)
 8005f14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f18:	6013      	str	r3, [r2, #0]
 8005f1a:	4b6d      	ldr	r3, [pc, #436]	@ (80060d0 <HAL_RCC_OscConfig+0x240>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a6c      	ldr	r2, [pc, #432]	@ (80060d0 <HAL_RCC_OscConfig+0x240>)
 8005f20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f24:	6013      	str	r3, [r2, #0]
 8005f26:	e00b      	b.n	8005f40 <HAL_RCC_OscConfig+0xb0>
 8005f28:	4b69      	ldr	r3, [pc, #420]	@ (80060d0 <HAL_RCC_OscConfig+0x240>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a68      	ldr	r2, [pc, #416]	@ (80060d0 <HAL_RCC_OscConfig+0x240>)
 8005f2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f32:	6013      	str	r3, [r2, #0]
 8005f34:	4b66      	ldr	r3, [pc, #408]	@ (80060d0 <HAL_RCC_OscConfig+0x240>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a65      	ldr	r2, [pc, #404]	@ (80060d0 <HAL_RCC_OscConfig+0x240>)
 8005f3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d013      	beq.n	8005f70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f48:	f7fe f84e 	bl	8003fe8 <HAL_GetTick>
 8005f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f4e:	e008      	b.n	8005f62 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f50:	f7fe f84a 	bl	8003fe8 <HAL_GetTick>
 8005f54:	4602      	mov	r2, r0
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	2b64      	cmp	r3, #100	@ 0x64
 8005f5c:	d901      	bls.n	8005f62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e207      	b.n	8006372 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f62:	4b5b      	ldr	r3, [pc, #364]	@ (80060d0 <HAL_RCC_OscConfig+0x240>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d0f0      	beq.n	8005f50 <HAL_RCC_OscConfig+0xc0>
 8005f6e:	e014      	b.n	8005f9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f70:	f7fe f83a 	bl	8003fe8 <HAL_GetTick>
 8005f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f76:	e008      	b.n	8005f8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f78:	f7fe f836 	bl	8003fe8 <HAL_GetTick>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	2b64      	cmp	r3, #100	@ 0x64
 8005f84:	d901      	bls.n	8005f8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e1f3      	b.n	8006372 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f8a:	4b51      	ldr	r3, [pc, #324]	@ (80060d0 <HAL_RCC_OscConfig+0x240>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1f0      	bne.n	8005f78 <HAL_RCC_OscConfig+0xe8>
 8005f96:	e000      	b.n	8005f9a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0302 	and.w	r3, r3, #2
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d063      	beq.n	800606e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005fa6:	4b4a      	ldr	r3, [pc, #296]	@ (80060d0 <HAL_RCC_OscConfig+0x240>)
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	f003 030c 	and.w	r3, r3, #12
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00b      	beq.n	8005fca <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005fb2:	4b47      	ldr	r3, [pc, #284]	@ (80060d0 <HAL_RCC_OscConfig+0x240>)
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005fba:	2b08      	cmp	r3, #8
 8005fbc:	d11c      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005fbe:	4b44      	ldr	r3, [pc, #272]	@ (80060d0 <HAL_RCC_OscConfig+0x240>)
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d116      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fca:	4b41      	ldr	r3, [pc, #260]	@ (80060d0 <HAL_RCC_OscConfig+0x240>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 0302 	and.w	r3, r3, #2
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d005      	beq.n	8005fe2 <HAL_RCC_OscConfig+0x152>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d001      	beq.n	8005fe2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e1c7      	b.n	8006372 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fe2:	4b3b      	ldr	r3, [pc, #236]	@ (80060d0 <HAL_RCC_OscConfig+0x240>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	00db      	lsls	r3, r3, #3
 8005ff0:	4937      	ldr	r1, [pc, #220]	@ (80060d0 <HAL_RCC_OscConfig+0x240>)
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ff6:	e03a      	b.n	800606e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d020      	beq.n	8006042 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006000:	4b34      	ldr	r3, [pc, #208]	@ (80060d4 <HAL_RCC_OscConfig+0x244>)
 8006002:	2201      	movs	r2, #1
 8006004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006006:	f7fd ffef 	bl	8003fe8 <HAL_GetTick>
 800600a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800600c:	e008      	b.n	8006020 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800600e:	f7fd ffeb 	bl	8003fe8 <HAL_GetTick>
 8006012:	4602      	mov	r2, r0
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	2b02      	cmp	r3, #2
 800601a:	d901      	bls.n	8006020 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800601c:	2303      	movs	r3, #3
 800601e:	e1a8      	b.n	8006372 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006020:	4b2b      	ldr	r3, [pc, #172]	@ (80060d0 <HAL_RCC_OscConfig+0x240>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0302 	and.w	r3, r3, #2
 8006028:	2b00      	cmp	r3, #0
 800602a:	d0f0      	beq.n	800600e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800602c:	4b28      	ldr	r3, [pc, #160]	@ (80060d0 <HAL_RCC_OscConfig+0x240>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	00db      	lsls	r3, r3, #3
 800603a:	4925      	ldr	r1, [pc, #148]	@ (80060d0 <HAL_RCC_OscConfig+0x240>)
 800603c:	4313      	orrs	r3, r2
 800603e:	600b      	str	r3, [r1, #0]
 8006040:	e015      	b.n	800606e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006042:	4b24      	ldr	r3, [pc, #144]	@ (80060d4 <HAL_RCC_OscConfig+0x244>)
 8006044:	2200      	movs	r2, #0
 8006046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006048:	f7fd ffce 	bl	8003fe8 <HAL_GetTick>
 800604c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800604e:	e008      	b.n	8006062 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006050:	f7fd ffca 	bl	8003fe8 <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	2b02      	cmp	r3, #2
 800605c:	d901      	bls.n	8006062 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e187      	b.n	8006372 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006062:	4b1b      	ldr	r3, [pc, #108]	@ (80060d0 <HAL_RCC_OscConfig+0x240>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 0302 	and.w	r3, r3, #2
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1f0      	bne.n	8006050 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0308 	and.w	r3, r3, #8
 8006076:	2b00      	cmp	r3, #0
 8006078:	d036      	beq.n	80060e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d016      	beq.n	80060b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006082:	4b15      	ldr	r3, [pc, #84]	@ (80060d8 <HAL_RCC_OscConfig+0x248>)
 8006084:	2201      	movs	r2, #1
 8006086:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006088:	f7fd ffae 	bl	8003fe8 <HAL_GetTick>
 800608c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800608e:	e008      	b.n	80060a2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006090:	f7fd ffaa 	bl	8003fe8 <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	2b02      	cmp	r3, #2
 800609c:	d901      	bls.n	80060a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e167      	b.n	8006372 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060a2:	4b0b      	ldr	r3, [pc, #44]	@ (80060d0 <HAL_RCC_OscConfig+0x240>)
 80060a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060a6:	f003 0302 	and.w	r3, r3, #2
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d0f0      	beq.n	8006090 <HAL_RCC_OscConfig+0x200>
 80060ae:	e01b      	b.n	80060e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060b0:	4b09      	ldr	r3, [pc, #36]	@ (80060d8 <HAL_RCC_OscConfig+0x248>)
 80060b2:	2200      	movs	r2, #0
 80060b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060b6:	f7fd ff97 	bl	8003fe8 <HAL_GetTick>
 80060ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060bc:	e00e      	b.n	80060dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060be:	f7fd ff93 	bl	8003fe8 <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d907      	bls.n	80060dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e150      	b.n	8006372 <HAL_RCC_OscConfig+0x4e2>
 80060d0:	40023800 	.word	0x40023800
 80060d4:	42470000 	.word	0x42470000
 80060d8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060dc:	4b88      	ldr	r3, [pc, #544]	@ (8006300 <HAL_RCC_OscConfig+0x470>)
 80060de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060e0:	f003 0302 	and.w	r3, r3, #2
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d1ea      	bne.n	80060be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 0304 	and.w	r3, r3, #4
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f000 8097 	beq.w	8006224 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060f6:	2300      	movs	r3, #0
 80060f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060fa:	4b81      	ldr	r3, [pc, #516]	@ (8006300 <HAL_RCC_OscConfig+0x470>)
 80060fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10f      	bne.n	8006126 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006106:	2300      	movs	r3, #0
 8006108:	60bb      	str	r3, [r7, #8]
 800610a:	4b7d      	ldr	r3, [pc, #500]	@ (8006300 <HAL_RCC_OscConfig+0x470>)
 800610c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800610e:	4a7c      	ldr	r2, [pc, #496]	@ (8006300 <HAL_RCC_OscConfig+0x470>)
 8006110:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006114:	6413      	str	r3, [r2, #64]	@ 0x40
 8006116:	4b7a      	ldr	r3, [pc, #488]	@ (8006300 <HAL_RCC_OscConfig+0x470>)
 8006118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800611a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800611e:	60bb      	str	r3, [r7, #8]
 8006120:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006122:	2301      	movs	r3, #1
 8006124:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006126:	4b77      	ldr	r3, [pc, #476]	@ (8006304 <HAL_RCC_OscConfig+0x474>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800612e:	2b00      	cmp	r3, #0
 8006130:	d118      	bne.n	8006164 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006132:	4b74      	ldr	r3, [pc, #464]	@ (8006304 <HAL_RCC_OscConfig+0x474>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a73      	ldr	r2, [pc, #460]	@ (8006304 <HAL_RCC_OscConfig+0x474>)
 8006138:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800613c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800613e:	f7fd ff53 	bl	8003fe8 <HAL_GetTick>
 8006142:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006144:	e008      	b.n	8006158 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006146:	f7fd ff4f 	bl	8003fe8 <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	2b02      	cmp	r3, #2
 8006152:	d901      	bls.n	8006158 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e10c      	b.n	8006372 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006158:	4b6a      	ldr	r3, [pc, #424]	@ (8006304 <HAL_RCC_OscConfig+0x474>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006160:	2b00      	cmp	r3, #0
 8006162:	d0f0      	beq.n	8006146 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	2b01      	cmp	r3, #1
 800616a:	d106      	bne.n	800617a <HAL_RCC_OscConfig+0x2ea>
 800616c:	4b64      	ldr	r3, [pc, #400]	@ (8006300 <HAL_RCC_OscConfig+0x470>)
 800616e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006170:	4a63      	ldr	r2, [pc, #396]	@ (8006300 <HAL_RCC_OscConfig+0x470>)
 8006172:	f043 0301 	orr.w	r3, r3, #1
 8006176:	6713      	str	r3, [r2, #112]	@ 0x70
 8006178:	e01c      	b.n	80061b4 <HAL_RCC_OscConfig+0x324>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	2b05      	cmp	r3, #5
 8006180:	d10c      	bne.n	800619c <HAL_RCC_OscConfig+0x30c>
 8006182:	4b5f      	ldr	r3, [pc, #380]	@ (8006300 <HAL_RCC_OscConfig+0x470>)
 8006184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006186:	4a5e      	ldr	r2, [pc, #376]	@ (8006300 <HAL_RCC_OscConfig+0x470>)
 8006188:	f043 0304 	orr.w	r3, r3, #4
 800618c:	6713      	str	r3, [r2, #112]	@ 0x70
 800618e:	4b5c      	ldr	r3, [pc, #368]	@ (8006300 <HAL_RCC_OscConfig+0x470>)
 8006190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006192:	4a5b      	ldr	r2, [pc, #364]	@ (8006300 <HAL_RCC_OscConfig+0x470>)
 8006194:	f043 0301 	orr.w	r3, r3, #1
 8006198:	6713      	str	r3, [r2, #112]	@ 0x70
 800619a:	e00b      	b.n	80061b4 <HAL_RCC_OscConfig+0x324>
 800619c:	4b58      	ldr	r3, [pc, #352]	@ (8006300 <HAL_RCC_OscConfig+0x470>)
 800619e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061a0:	4a57      	ldr	r2, [pc, #348]	@ (8006300 <HAL_RCC_OscConfig+0x470>)
 80061a2:	f023 0301 	bic.w	r3, r3, #1
 80061a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80061a8:	4b55      	ldr	r3, [pc, #340]	@ (8006300 <HAL_RCC_OscConfig+0x470>)
 80061aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061ac:	4a54      	ldr	r2, [pc, #336]	@ (8006300 <HAL_RCC_OscConfig+0x470>)
 80061ae:	f023 0304 	bic.w	r3, r3, #4
 80061b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d015      	beq.n	80061e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061bc:	f7fd ff14 	bl	8003fe8 <HAL_GetTick>
 80061c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061c2:	e00a      	b.n	80061da <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061c4:	f7fd ff10 	bl	8003fe8 <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d901      	bls.n	80061da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80061d6:	2303      	movs	r3, #3
 80061d8:	e0cb      	b.n	8006372 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061da:	4b49      	ldr	r3, [pc, #292]	@ (8006300 <HAL_RCC_OscConfig+0x470>)
 80061dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061de:	f003 0302 	and.w	r3, r3, #2
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d0ee      	beq.n	80061c4 <HAL_RCC_OscConfig+0x334>
 80061e6:	e014      	b.n	8006212 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061e8:	f7fd fefe 	bl	8003fe8 <HAL_GetTick>
 80061ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061ee:	e00a      	b.n	8006206 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061f0:	f7fd fefa 	bl	8003fe8 <HAL_GetTick>
 80061f4:	4602      	mov	r2, r0
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061fe:	4293      	cmp	r3, r2
 8006200:	d901      	bls.n	8006206 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e0b5      	b.n	8006372 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006206:	4b3e      	ldr	r3, [pc, #248]	@ (8006300 <HAL_RCC_OscConfig+0x470>)
 8006208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800620a:	f003 0302 	and.w	r3, r3, #2
 800620e:	2b00      	cmp	r3, #0
 8006210:	d1ee      	bne.n	80061f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006212:	7dfb      	ldrb	r3, [r7, #23]
 8006214:	2b01      	cmp	r3, #1
 8006216:	d105      	bne.n	8006224 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006218:	4b39      	ldr	r3, [pc, #228]	@ (8006300 <HAL_RCC_OscConfig+0x470>)
 800621a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800621c:	4a38      	ldr	r2, [pc, #224]	@ (8006300 <HAL_RCC_OscConfig+0x470>)
 800621e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006222:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	2b00      	cmp	r3, #0
 800622a:	f000 80a1 	beq.w	8006370 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800622e:	4b34      	ldr	r3, [pc, #208]	@ (8006300 <HAL_RCC_OscConfig+0x470>)
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f003 030c 	and.w	r3, r3, #12
 8006236:	2b08      	cmp	r3, #8
 8006238:	d05c      	beq.n	80062f4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	2b02      	cmp	r3, #2
 8006240:	d141      	bne.n	80062c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006242:	4b31      	ldr	r3, [pc, #196]	@ (8006308 <HAL_RCC_OscConfig+0x478>)
 8006244:	2200      	movs	r2, #0
 8006246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006248:	f7fd fece 	bl	8003fe8 <HAL_GetTick>
 800624c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800624e:	e008      	b.n	8006262 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006250:	f7fd feca 	bl	8003fe8 <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	2b02      	cmp	r3, #2
 800625c:	d901      	bls.n	8006262 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e087      	b.n	8006372 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006262:	4b27      	ldr	r3, [pc, #156]	@ (8006300 <HAL_RCC_OscConfig+0x470>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800626a:	2b00      	cmp	r3, #0
 800626c:	d1f0      	bne.n	8006250 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	69da      	ldr	r2, [r3, #28]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	431a      	orrs	r2, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800627c:	019b      	lsls	r3, r3, #6
 800627e:	431a      	orrs	r2, r3
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006284:	085b      	lsrs	r3, r3, #1
 8006286:	3b01      	subs	r3, #1
 8006288:	041b      	lsls	r3, r3, #16
 800628a:	431a      	orrs	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006290:	061b      	lsls	r3, r3, #24
 8006292:	491b      	ldr	r1, [pc, #108]	@ (8006300 <HAL_RCC_OscConfig+0x470>)
 8006294:	4313      	orrs	r3, r2
 8006296:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006298:	4b1b      	ldr	r3, [pc, #108]	@ (8006308 <HAL_RCC_OscConfig+0x478>)
 800629a:	2201      	movs	r2, #1
 800629c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800629e:	f7fd fea3 	bl	8003fe8 <HAL_GetTick>
 80062a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062a4:	e008      	b.n	80062b8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062a6:	f7fd fe9f 	bl	8003fe8 <HAL_GetTick>
 80062aa:	4602      	mov	r2, r0
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d901      	bls.n	80062b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e05c      	b.n	8006372 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062b8:	4b11      	ldr	r3, [pc, #68]	@ (8006300 <HAL_RCC_OscConfig+0x470>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d0f0      	beq.n	80062a6 <HAL_RCC_OscConfig+0x416>
 80062c4:	e054      	b.n	8006370 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062c6:	4b10      	ldr	r3, [pc, #64]	@ (8006308 <HAL_RCC_OscConfig+0x478>)
 80062c8:	2200      	movs	r2, #0
 80062ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062cc:	f7fd fe8c 	bl	8003fe8 <HAL_GetTick>
 80062d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062d2:	e008      	b.n	80062e6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062d4:	f7fd fe88 	bl	8003fe8 <HAL_GetTick>
 80062d8:	4602      	mov	r2, r0
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d901      	bls.n	80062e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e045      	b.n	8006372 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062e6:	4b06      	ldr	r3, [pc, #24]	@ (8006300 <HAL_RCC_OscConfig+0x470>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1f0      	bne.n	80062d4 <HAL_RCC_OscConfig+0x444>
 80062f2:	e03d      	b.n	8006370 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	699b      	ldr	r3, [r3, #24]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d107      	bne.n	800630c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e038      	b.n	8006372 <HAL_RCC_OscConfig+0x4e2>
 8006300:	40023800 	.word	0x40023800
 8006304:	40007000 	.word	0x40007000
 8006308:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800630c:	4b1b      	ldr	r3, [pc, #108]	@ (800637c <HAL_RCC_OscConfig+0x4ec>)
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	2b01      	cmp	r3, #1
 8006318:	d028      	beq.n	800636c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006324:	429a      	cmp	r2, r3
 8006326:	d121      	bne.n	800636c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006332:	429a      	cmp	r2, r3
 8006334:	d11a      	bne.n	800636c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800633c:	4013      	ands	r3, r2
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006342:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006344:	4293      	cmp	r3, r2
 8006346:	d111      	bne.n	800636c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006352:	085b      	lsrs	r3, r3, #1
 8006354:	3b01      	subs	r3, #1
 8006356:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006358:	429a      	cmp	r2, r3
 800635a:	d107      	bne.n	800636c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006366:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006368:	429a      	cmp	r2, r3
 800636a:	d001      	beq.n	8006370 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e000      	b.n	8006372 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3718      	adds	r7, #24
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	40023800 	.word	0x40023800

08006380 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d101      	bne.n	8006394 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e0cc      	b.n	800652e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006394:	4b68      	ldr	r3, [pc, #416]	@ (8006538 <HAL_RCC_ClockConfig+0x1b8>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 030f 	and.w	r3, r3, #15
 800639c:	683a      	ldr	r2, [r7, #0]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d90c      	bls.n	80063bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063a2:	4b65      	ldr	r3, [pc, #404]	@ (8006538 <HAL_RCC_ClockConfig+0x1b8>)
 80063a4:	683a      	ldr	r2, [r7, #0]
 80063a6:	b2d2      	uxtb	r2, r2
 80063a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063aa:	4b63      	ldr	r3, [pc, #396]	@ (8006538 <HAL_RCC_ClockConfig+0x1b8>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 030f 	and.w	r3, r3, #15
 80063b2:	683a      	ldr	r2, [r7, #0]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d001      	beq.n	80063bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e0b8      	b.n	800652e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0302 	and.w	r3, r3, #2
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d020      	beq.n	800640a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0304 	and.w	r3, r3, #4
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d005      	beq.n	80063e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063d4:	4b59      	ldr	r3, [pc, #356]	@ (800653c <HAL_RCC_ClockConfig+0x1bc>)
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	4a58      	ldr	r2, [pc, #352]	@ (800653c <HAL_RCC_ClockConfig+0x1bc>)
 80063da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80063de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0308 	and.w	r3, r3, #8
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d005      	beq.n	80063f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80063ec:	4b53      	ldr	r3, [pc, #332]	@ (800653c <HAL_RCC_ClockConfig+0x1bc>)
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	4a52      	ldr	r2, [pc, #328]	@ (800653c <HAL_RCC_ClockConfig+0x1bc>)
 80063f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80063f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063f8:	4b50      	ldr	r3, [pc, #320]	@ (800653c <HAL_RCC_ClockConfig+0x1bc>)
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	494d      	ldr	r1, [pc, #308]	@ (800653c <HAL_RCC_ClockConfig+0x1bc>)
 8006406:	4313      	orrs	r3, r2
 8006408:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0301 	and.w	r3, r3, #1
 8006412:	2b00      	cmp	r3, #0
 8006414:	d044      	beq.n	80064a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	2b01      	cmp	r3, #1
 800641c:	d107      	bne.n	800642e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800641e:	4b47      	ldr	r3, [pc, #284]	@ (800653c <HAL_RCC_ClockConfig+0x1bc>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006426:	2b00      	cmp	r3, #0
 8006428:	d119      	bne.n	800645e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e07f      	b.n	800652e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	2b02      	cmp	r3, #2
 8006434:	d003      	beq.n	800643e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800643a:	2b03      	cmp	r3, #3
 800643c:	d107      	bne.n	800644e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800643e:	4b3f      	ldr	r3, [pc, #252]	@ (800653c <HAL_RCC_ClockConfig+0x1bc>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d109      	bne.n	800645e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e06f      	b.n	800652e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800644e:	4b3b      	ldr	r3, [pc, #236]	@ (800653c <HAL_RCC_ClockConfig+0x1bc>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0302 	and.w	r3, r3, #2
 8006456:	2b00      	cmp	r3, #0
 8006458:	d101      	bne.n	800645e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e067      	b.n	800652e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800645e:	4b37      	ldr	r3, [pc, #220]	@ (800653c <HAL_RCC_ClockConfig+0x1bc>)
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f023 0203 	bic.w	r2, r3, #3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	4934      	ldr	r1, [pc, #208]	@ (800653c <HAL_RCC_ClockConfig+0x1bc>)
 800646c:	4313      	orrs	r3, r2
 800646e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006470:	f7fd fdba 	bl	8003fe8 <HAL_GetTick>
 8006474:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006476:	e00a      	b.n	800648e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006478:	f7fd fdb6 	bl	8003fe8 <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006486:	4293      	cmp	r3, r2
 8006488:	d901      	bls.n	800648e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	e04f      	b.n	800652e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800648e:	4b2b      	ldr	r3, [pc, #172]	@ (800653c <HAL_RCC_ClockConfig+0x1bc>)
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	f003 020c 	and.w	r2, r3, #12
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	429a      	cmp	r2, r3
 800649e:	d1eb      	bne.n	8006478 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80064a0:	4b25      	ldr	r3, [pc, #148]	@ (8006538 <HAL_RCC_ClockConfig+0x1b8>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 030f 	and.w	r3, r3, #15
 80064a8:	683a      	ldr	r2, [r7, #0]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d20c      	bcs.n	80064c8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064ae:	4b22      	ldr	r3, [pc, #136]	@ (8006538 <HAL_RCC_ClockConfig+0x1b8>)
 80064b0:	683a      	ldr	r2, [r7, #0]
 80064b2:	b2d2      	uxtb	r2, r2
 80064b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064b6:	4b20      	ldr	r3, [pc, #128]	@ (8006538 <HAL_RCC_ClockConfig+0x1b8>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 030f 	and.w	r3, r3, #15
 80064be:	683a      	ldr	r2, [r7, #0]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d001      	beq.n	80064c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e032      	b.n	800652e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 0304 	and.w	r3, r3, #4
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d008      	beq.n	80064e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064d4:	4b19      	ldr	r3, [pc, #100]	@ (800653c <HAL_RCC_ClockConfig+0x1bc>)
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	4916      	ldr	r1, [pc, #88]	@ (800653c <HAL_RCC_ClockConfig+0x1bc>)
 80064e2:	4313      	orrs	r3, r2
 80064e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0308 	and.w	r3, r3, #8
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d009      	beq.n	8006506 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064f2:	4b12      	ldr	r3, [pc, #72]	@ (800653c <HAL_RCC_ClockConfig+0x1bc>)
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	00db      	lsls	r3, r3, #3
 8006500:	490e      	ldr	r1, [pc, #56]	@ (800653c <HAL_RCC_ClockConfig+0x1bc>)
 8006502:	4313      	orrs	r3, r2
 8006504:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006506:	f000 f821 	bl	800654c <HAL_RCC_GetSysClockFreq>
 800650a:	4602      	mov	r2, r0
 800650c:	4b0b      	ldr	r3, [pc, #44]	@ (800653c <HAL_RCC_ClockConfig+0x1bc>)
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	091b      	lsrs	r3, r3, #4
 8006512:	f003 030f 	and.w	r3, r3, #15
 8006516:	490a      	ldr	r1, [pc, #40]	@ (8006540 <HAL_RCC_ClockConfig+0x1c0>)
 8006518:	5ccb      	ldrb	r3, [r1, r3]
 800651a:	fa22 f303 	lsr.w	r3, r2, r3
 800651e:	4a09      	ldr	r2, [pc, #36]	@ (8006544 <HAL_RCC_ClockConfig+0x1c4>)
 8006520:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006522:	4b09      	ldr	r3, [pc, #36]	@ (8006548 <HAL_RCC_ClockConfig+0x1c8>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4618      	mov	r0, r3
 8006528:	f7fd fd1a 	bl	8003f60 <HAL_InitTick>

  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	40023c00 	.word	0x40023c00
 800653c:	40023800 	.word	0x40023800
 8006540:	08008c18 	.word	0x08008c18
 8006544:	20000018 	.word	0x20000018
 8006548:	2000001c 	.word	0x2000001c

0800654c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800654c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006550:	b094      	sub	sp, #80	@ 0x50
 8006552:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006554:	2300      	movs	r3, #0
 8006556:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006558:	2300      	movs	r3, #0
 800655a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800655c:	2300      	movs	r3, #0
 800655e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006560:	2300      	movs	r3, #0
 8006562:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006564:	4b79      	ldr	r3, [pc, #484]	@ (800674c <HAL_RCC_GetSysClockFreq+0x200>)
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	f003 030c 	and.w	r3, r3, #12
 800656c:	2b08      	cmp	r3, #8
 800656e:	d00d      	beq.n	800658c <HAL_RCC_GetSysClockFreq+0x40>
 8006570:	2b08      	cmp	r3, #8
 8006572:	f200 80e1 	bhi.w	8006738 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006576:	2b00      	cmp	r3, #0
 8006578:	d002      	beq.n	8006580 <HAL_RCC_GetSysClockFreq+0x34>
 800657a:	2b04      	cmp	r3, #4
 800657c:	d003      	beq.n	8006586 <HAL_RCC_GetSysClockFreq+0x3a>
 800657e:	e0db      	b.n	8006738 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006580:	4b73      	ldr	r3, [pc, #460]	@ (8006750 <HAL_RCC_GetSysClockFreq+0x204>)
 8006582:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006584:	e0db      	b.n	800673e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006586:	4b73      	ldr	r3, [pc, #460]	@ (8006754 <HAL_RCC_GetSysClockFreq+0x208>)
 8006588:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800658a:	e0d8      	b.n	800673e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800658c:	4b6f      	ldr	r3, [pc, #444]	@ (800674c <HAL_RCC_GetSysClockFreq+0x200>)
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006594:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006596:	4b6d      	ldr	r3, [pc, #436]	@ (800674c <HAL_RCC_GetSysClockFreq+0x200>)
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d063      	beq.n	800666a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065a2:	4b6a      	ldr	r3, [pc, #424]	@ (800674c <HAL_RCC_GetSysClockFreq+0x200>)
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	099b      	lsrs	r3, r3, #6
 80065a8:	2200      	movs	r2, #0
 80065aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80065ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80065ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80065b6:	2300      	movs	r3, #0
 80065b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80065ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80065be:	4622      	mov	r2, r4
 80065c0:	462b      	mov	r3, r5
 80065c2:	f04f 0000 	mov.w	r0, #0
 80065c6:	f04f 0100 	mov.w	r1, #0
 80065ca:	0159      	lsls	r1, r3, #5
 80065cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065d0:	0150      	lsls	r0, r2, #5
 80065d2:	4602      	mov	r2, r0
 80065d4:	460b      	mov	r3, r1
 80065d6:	4621      	mov	r1, r4
 80065d8:	1a51      	subs	r1, r2, r1
 80065da:	6139      	str	r1, [r7, #16]
 80065dc:	4629      	mov	r1, r5
 80065de:	eb63 0301 	sbc.w	r3, r3, r1
 80065e2:	617b      	str	r3, [r7, #20]
 80065e4:	f04f 0200 	mov.w	r2, #0
 80065e8:	f04f 0300 	mov.w	r3, #0
 80065ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065f0:	4659      	mov	r1, fp
 80065f2:	018b      	lsls	r3, r1, #6
 80065f4:	4651      	mov	r1, sl
 80065f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80065fa:	4651      	mov	r1, sl
 80065fc:	018a      	lsls	r2, r1, #6
 80065fe:	4651      	mov	r1, sl
 8006600:	ebb2 0801 	subs.w	r8, r2, r1
 8006604:	4659      	mov	r1, fp
 8006606:	eb63 0901 	sbc.w	r9, r3, r1
 800660a:	f04f 0200 	mov.w	r2, #0
 800660e:	f04f 0300 	mov.w	r3, #0
 8006612:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006616:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800661a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800661e:	4690      	mov	r8, r2
 8006620:	4699      	mov	r9, r3
 8006622:	4623      	mov	r3, r4
 8006624:	eb18 0303 	adds.w	r3, r8, r3
 8006628:	60bb      	str	r3, [r7, #8]
 800662a:	462b      	mov	r3, r5
 800662c:	eb49 0303 	adc.w	r3, r9, r3
 8006630:	60fb      	str	r3, [r7, #12]
 8006632:	f04f 0200 	mov.w	r2, #0
 8006636:	f04f 0300 	mov.w	r3, #0
 800663a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800663e:	4629      	mov	r1, r5
 8006640:	024b      	lsls	r3, r1, #9
 8006642:	4621      	mov	r1, r4
 8006644:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006648:	4621      	mov	r1, r4
 800664a:	024a      	lsls	r2, r1, #9
 800664c:	4610      	mov	r0, r2
 800664e:	4619      	mov	r1, r3
 8006650:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006652:	2200      	movs	r2, #0
 8006654:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006656:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006658:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800665c:	f7f9 fdc6 	bl	80001ec <__aeabi_uldivmod>
 8006660:	4602      	mov	r2, r0
 8006662:	460b      	mov	r3, r1
 8006664:	4613      	mov	r3, r2
 8006666:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006668:	e058      	b.n	800671c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800666a:	4b38      	ldr	r3, [pc, #224]	@ (800674c <HAL_RCC_GetSysClockFreq+0x200>)
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	099b      	lsrs	r3, r3, #6
 8006670:	2200      	movs	r2, #0
 8006672:	4618      	mov	r0, r3
 8006674:	4611      	mov	r1, r2
 8006676:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800667a:	623b      	str	r3, [r7, #32]
 800667c:	2300      	movs	r3, #0
 800667e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006680:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006684:	4642      	mov	r2, r8
 8006686:	464b      	mov	r3, r9
 8006688:	f04f 0000 	mov.w	r0, #0
 800668c:	f04f 0100 	mov.w	r1, #0
 8006690:	0159      	lsls	r1, r3, #5
 8006692:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006696:	0150      	lsls	r0, r2, #5
 8006698:	4602      	mov	r2, r0
 800669a:	460b      	mov	r3, r1
 800669c:	4641      	mov	r1, r8
 800669e:	ebb2 0a01 	subs.w	sl, r2, r1
 80066a2:	4649      	mov	r1, r9
 80066a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80066a8:	f04f 0200 	mov.w	r2, #0
 80066ac:	f04f 0300 	mov.w	r3, #0
 80066b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80066b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80066b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80066bc:	ebb2 040a 	subs.w	r4, r2, sl
 80066c0:	eb63 050b 	sbc.w	r5, r3, fp
 80066c4:	f04f 0200 	mov.w	r2, #0
 80066c8:	f04f 0300 	mov.w	r3, #0
 80066cc:	00eb      	lsls	r3, r5, #3
 80066ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066d2:	00e2      	lsls	r2, r4, #3
 80066d4:	4614      	mov	r4, r2
 80066d6:	461d      	mov	r5, r3
 80066d8:	4643      	mov	r3, r8
 80066da:	18e3      	adds	r3, r4, r3
 80066dc:	603b      	str	r3, [r7, #0]
 80066de:	464b      	mov	r3, r9
 80066e0:	eb45 0303 	adc.w	r3, r5, r3
 80066e4:	607b      	str	r3, [r7, #4]
 80066e6:	f04f 0200 	mov.w	r2, #0
 80066ea:	f04f 0300 	mov.w	r3, #0
 80066ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80066f2:	4629      	mov	r1, r5
 80066f4:	028b      	lsls	r3, r1, #10
 80066f6:	4621      	mov	r1, r4
 80066f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80066fc:	4621      	mov	r1, r4
 80066fe:	028a      	lsls	r2, r1, #10
 8006700:	4610      	mov	r0, r2
 8006702:	4619      	mov	r1, r3
 8006704:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006706:	2200      	movs	r2, #0
 8006708:	61bb      	str	r3, [r7, #24]
 800670a:	61fa      	str	r2, [r7, #28]
 800670c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006710:	f7f9 fd6c 	bl	80001ec <__aeabi_uldivmod>
 8006714:	4602      	mov	r2, r0
 8006716:	460b      	mov	r3, r1
 8006718:	4613      	mov	r3, r2
 800671a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800671c:	4b0b      	ldr	r3, [pc, #44]	@ (800674c <HAL_RCC_GetSysClockFreq+0x200>)
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	0c1b      	lsrs	r3, r3, #16
 8006722:	f003 0303 	and.w	r3, r3, #3
 8006726:	3301      	adds	r3, #1
 8006728:	005b      	lsls	r3, r3, #1
 800672a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800672c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800672e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006730:	fbb2 f3f3 	udiv	r3, r2, r3
 8006734:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006736:	e002      	b.n	800673e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006738:	4b05      	ldr	r3, [pc, #20]	@ (8006750 <HAL_RCC_GetSysClockFreq+0x204>)
 800673a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800673c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800673e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006740:	4618      	mov	r0, r3
 8006742:	3750      	adds	r7, #80	@ 0x50
 8006744:	46bd      	mov	sp, r7
 8006746:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800674a:	bf00      	nop
 800674c:	40023800 	.word	0x40023800
 8006750:	00f42400 	.word	0x00f42400
 8006754:	007a1200 	.word	0x007a1200

08006758 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006758:	b480      	push	{r7}
 800675a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800675c:	4b03      	ldr	r3, [pc, #12]	@ (800676c <HAL_RCC_GetHCLKFreq+0x14>)
 800675e:	681b      	ldr	r3, [r3, #0]
}
 8006760:	4618      	mov	r0, r3
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	20000018 	.word	0x20000018

08006770 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006774:	f7ff fff0 	bl	8006758 <HAL_RCC_GetHCLKFreq>
 8006778:	4602      	mov	r2, r0
 800677a:	4b05      	ldr	r3, [pc, #20]	@ (8006790 <HAL_RCC_GetPCLK1Freq+0x20>)
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	0a9b      	lsrs	r3, r3, #10
 8006780:	f003 0307 	and.w	r3, r3, #7
 8006784:	4903      	ldr	r1, [pc, #12]	@ (8006794 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006786:	5ccb      	ldrb	r3, [r1, r3]
 8006788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800678c:	4618      	mov	r0, r3
 800678e:	bd80      	pop	{r7, pc}
 8006790:	40023800 	.word	0x40023800
 8006794:	08008c28 	.word	0x08008c28

08006798 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b086      	sub	sp, #24
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80067a0:	2300      	movs	r3, #0
 80067a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80067a4:	2300      	movs	r3, #0
 80067a6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 0301 	and.w	r3, r3, #1
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d10b      	bne.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d105      	bne.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d075      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80067cc:	4b91      	ldr	r3, [pc, #580]	@ (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80067ce:	2200      	movs	r2, #0
 80067d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80067d2:	f7fd fc09 	bl	8003fe8 <HAL_GetTick>
 80067d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80067d8:	e008      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80067da:	f7fd fc05 	bl	8003fe8 <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d901      	bls.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067e8:	2303      	movs	r3, #3
 80067ea:	e189      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80067ec:	4b8a      	ldr	r3, [pc, #552]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d1f0      	bne.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0301 	and.w	r3, r3, #1
 8006800:	2b00      	cmp	r3, #0
 8006802:	d009      	beq.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	019a      	lsls	r2, r3, #6
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	071b      	lsls	r3, r3, #28
 8006810:	4981      	ldr	r1, [pc, #516]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006812:	4313      	orrs	r3, r2
 8006814:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 0302 	and.w	r3, r3, #2
 8006820:	2b00      	cmp	r3, #0
 8006822:	d01f      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006824:	4b7c      	ldr	r3, [pc, #496]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006826:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800682a:	0f1b      	lsrs	r3, r3, #28
 800682c:	f003 0307 	and.w	r3, r3, #7
 8006830:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	019a      	lsls	r2, r3, #6
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	061b      	lsls	r3, r3, #24
 800683e:	431a      	orrs	r2, r3
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	071b      	lsls	r3, r3, #28
 8006844:	4974      	ldr	r1, [pc, #464]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006846:	4313      	orrs	r3, r2
 8006848:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800684c:	4b72      	ldr	r3, [pc, #456]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800684e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006852:	f023 021f 	bic.w	r2, r3, #31
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	69db      	ldr	r3, [r3, #28]
 800685a:	3b01      	subs	r3, #1
 800685c:	496e      	ldr	r1, [pc, #440]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800685e:	4313      	orrs	r3, r2
 8006860:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00d      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	019a      	lsls	r2, r3, #6
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	061b      	lsls	r3, r3, #24
 800687c:	431a      	orrs	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	071b      	lsls	r3, r3, #28
 8006884:	4964      	ldr	r1, [pc, #400]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006886:	4313      	orrs	r3, r2
 8006888:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800688c:	4b61      	ldr	r3, [pc, #388]	@ (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800688e:	2201      	movs	r2, #1
 8006890:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006892:	f7fd fba9 	bl	8003fe8 <HAL_GetTick>
 8006896:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006898:	e008      	b.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800689a:	f7fd fba5 	bl	8003fe8 <HAL_GetTick>
 800689e:	4602      	mov	r2, r0
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	1ad3      	subs	r3, r2, r3
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	d901      	bls.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068a8:	2303      	movs	r3, #3
 80068aa:	e129      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80068ac:	4b5a      	ldr	r3, [pc, #360]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d0f0      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0304 	and.w	r3, r3, #4
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d105      	bne.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d079      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80068d0:	4b52      	ldr	r3, [pc, #328]	@ (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80068d2:	2200      	movs	r2, #0
 80068d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80068d6:	f7fd fb87 	bl	8003fe8 <HAL_GetTick>
 80068da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80068dc:	e008      	b.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80068de:	f7fd fb83 	bl	8003fe8 <HAL_GetTick>
 80068e2:	4602      	mov	r2, r0
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	d901      	bls.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e107      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80068f0:	4b49      	ldr	r3, [pc, #292]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80068f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068fc:	d0ef      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0304 	and.w	r3, r3, #4
 8006906:	2b00      	cmp	r3, #0
 8006908:	d020      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800690a:	4b43      	ldr	r3, [pc, #268]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800690c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006910:	0f1b      	lsrs	r3, r3, #28
 8006912:	f003 0307 	and.w	r3, r3, #7
 8006916:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	019a      	lsls	r2, r3, #6
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	695b      	ldr	r3, [r3, #20]
 8006922:	061b      	lsls	r3, r3, #24
 8006924:	431a      	orrs	r2, r3
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	071b      	lsls	r3, r3, #28
 800692a:	493b      	ldr	r1, [pc, #236]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800692c:	4313      	orrs	r3, r2
 800692e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006932:	4b39      	ldr	r3, [pc, #228]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006934:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006938:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a1b      	ldr	r3, [r3, #32]
 8006940:	3b01      	subs	r3, #1
 8006942:	021b      	lsls	r3, r3, #8
 8006944:	4934      	ldr	r1, [pc, #208]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006946:	4313      	orrs	r3, r2
 8006948:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 0308 	and.w	r3, r3, #8
 8006954:	2b00      	cmp	r3, #0
 8006956:	d01e      	beq.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006958:	4b2f      	ldr	r3, [pc, #188]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800695a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800695e:	0e1b      	lsrs	r3, r3, #24
 8006960:	f003 030f 	and.w	r3, r3, #15
 8006964:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	019a      	lsls	r2, r3, #6
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	061b      	lsls	r3, r3, #24
 8006970:	431a      	orrs	r2, r3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	071b      	lsls	r3, r3, #28
 8006978:	4927      	ldr	r1, [pc, #156]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800697a:	4313      	orrs	r3, r2
 800697c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006980:	4b25      	ldr	r3, [pc, #148]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006982:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006986:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800698e:	4922      	ldr	r1, [pc, #136]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006990:	4313      	orrs	r3, r2
 8006992:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006996:	4b21      	ldr	r3, [pc, #132]	@ (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006998:	2201      	movs	r2, #1
 800699a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800699c:	f7fd fb24 	bl	8003fe8 <HAL_GetTick>
 80069a0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80069a2:	e008      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80069a4:	f7fd fb20 	bl	8003fe8 <HAL_GetTick>
 80069a8:	4602      	mov	r2, r0
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d901      	bls.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e0a4      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80069b6:	4b18      	ldr	r3, [pc, #96]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80069be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069c2:	d1ef      	bne.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 0320 	and.w	r3, r3, #32
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	f000 808b 	beq.w	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80069d2:	2300      	movs	r3, #0
 80069d4:	60fb      	str	r3, [r7, #12]
 80069d6:	4b10      	ldr	r3, [pc, #64]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80069d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069da:	4a0f      	ldr	r2, [pc, #60]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80069dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80069e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80069e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069ea:	60fb      	str	r3, [r7, #12]
 80069ec:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80069ee:	4b0c      	ldr	r3, [pc, #48]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a0b      	ldr	r2, [pc, #44]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80069f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069f8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80069fa:	f7fd faf5 	bl	8003fe8 <HAL_GetTick>
 80069fe:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006a00:	e010      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a02:	f7fd faf1 	bl	8003fe8 <HAL_GetTick>
 8006a06:	4602      	mov	r2, r0
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	1ad3      	subs	r3, r2, r3
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	d909      	bls.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006a10:	2303      	movs	r3, #3
 8006a12:	e075      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006a14:	42470068 	.word	0x42470068
 8006a18:	40023800 	.word	0x40023800
 8006a1c:	42470070 	.word	0x42470070
 8006a20:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006a24:	4b38      	ldr	r3, [pc, #224]	@ (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d0e8      	beq.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006a30:	4b36      	ldr	r3, [pc, #216]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a38:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d02f      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d028      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a4e:	4b2f      	ldr	r3, [pc, #188]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a56:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a58:	4b2d      	ldr	r3, [pc, #180]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a5e:	4b2c      	ldr	r3, [pc, #176]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006a60:	2200      	movs	r2, #0
 8006a62:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006a64:	4a29      	ldr	r2, [pc, #164]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006a6a:	4b28      	ldr	r3, [pc, #160]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a6e:	f003 0301 	and.w	r3, r3, #1
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d114      	bne.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006a76:	f7fd fab7 	bl	8003fe8 <HAL_GetTick>
 8006a7a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a7c:	e00a      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a7e:	f7fd fab3 	bl	8003fe8 <HAL_GetTick>
 8006a82:	4602      	mov	r2, r0
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d901      	bls.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006a90:	2303      	movs	r3, #3
 8006a92:	e035      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a94:	4b1d      	ldr	r3, [pc, #116]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a98:	f003 0302 	and.w	r3, r3, #2
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d0ee      	beq.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aa4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006aa8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006aac:	d10d      	bne.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006aae:	4b17      	ldr	r3, [pc, #92]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aba:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006abe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ac2:	4912      	ldr	r1, [pc, #72]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	608b      	str	r3, [r1, #8]
 8006ac8:	e005      	b.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006aca:	4b10      	ldr	r3, [pc, #64]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	4a0f      	ldr	r2, [pc, #60]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ad0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006ad4:	6093      	str	r3, [r2, #8]
 8006ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ad8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ade:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ae2:	490a      	ldr	r1, [pc, #40]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 0310 	and.w	r3, r3, #16
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d004      	beq.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8006afa:	4b06      	ldr	r3, [pc, #24]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006afc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3718      	adds	r7, #24
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	40007000 	.word	0x40007000
 8006b0c:	40023800 	.word	0x40023800
 8006b10:	42470e40 	.word	0x42470e40
 8006b14:	424711e0 	.word	0x424711e0

08006b18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d101      	bne.n	8006b2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e07b      	b.n	8006c22 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d108      	bne.n	8006b44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b3a:	d009      	beq.n	8006b50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	61da      	str	r2, [r3, #28]
 8006b42:	e005      	b.n	8006b50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d106      	bne.n	8006b70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f7fc feae 	bl	80038cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2202      	movs	r2, #2
 8006b74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b86:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006b98:	431a      	orrs	r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ba2:	431a      	orrs	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	f003 0302 	and.w	r3, r3, #2
 8006bac:	431a      	orrs	r2, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	f003 0301 	and.w	r3, r3, #1
 8006bb6:	431a      	orrs	r2, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	699b      	ldr	r3, [r3, #24]
 8006bbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006bc0:	431a      	orrs	r2, r3
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	69db      	ldr	r3, [r3, #28]
 8006bc6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006bca:	431a      	orrs	r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6a1b      	ldr	r3, [r3, #32]
 8006bd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bd4:	ea42 0103 	orr.w	r1, r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bdc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	430a      	orrs	r2, r1
 8006be6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	699b      	ldr	r3, [r3, #24]
 8006bec:	0c1b      	lsrs	r3, r3, #16
 8006bee:	f003 0104 	and.w	r1, r3, #4
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bf6:	f003 0210 	and.w	r2, r3, #16
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	430a      	orrs	r2, r1
 8006c00:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	69da      	ldr	r2, [r3, #28]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c10:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3708      	adds	r7, #8
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}

08006c2a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b082      	sub	sp, #8
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d101      	bne.n	8006c3c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e01a      	b.n	8006c72 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2202      	movs	r2, #2
 8006c40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c52:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f7fc fe81 	bl	800395c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3708      	adds	r7, #8
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c7a:	b580      	push	{r7, lr}
 8006c7c:	b088      	sub	sp, #32
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	60f8      	str	r0, [r7, #12]
 8006c82:	60b9      	str	r1, [r7, #8]
 8006c84:	603b      	str	r3, [r7, #0]
 8006c86:	4613      	mov	r3, r2
 8006c88:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c8a:	f7fd f9ad 	bl	8003fe8 <HAL_GetTick>
 8006c8e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006c90:	88fb      	ldrh	r3, [r7, #6]
 8006c92:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d001      	beq.n	8006ca4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006ca0:	2302      	movs	r3, #2
 8006ca2:	e12a      	b.n	8006efa <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d002      	beq.n	8006cb0 <HAL_SPI_Transmit+0x36>
 8006caa:	88fb      	ldrh	r3, [r7, #6]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d101      	bne.n	8006cb4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e122      	b.n	8006efa <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d101      	bne.n	8006cc2 <HAL_SPI_Transmit+0x48>
 8006cbe:	2302      	movs	r3, #2
 8006cc0:	e11b      	b.n	8006efa <HAL_SPI_Transmit+0x280>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2203      	movs	r2, #3
 8006cce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	68ba      	ldr	r2, [r7, #8]
 8006cdc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	88fa      	ldrh	r2, [r7, #6]
 8006ce2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	88fa      	ldrh	r2, [r7, #6]
 8006ce8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d10:	d10f      	bne.n	8006d32 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d20:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d30:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d3c:	2b40      	cmp	r3, #64	@ 0x40
 8006d3e:	d007      	beq.n	8006d50 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d58:	d152      	bne.n	8006e00 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d002      	beq.n	8006d68 <HAL_SPI_Transmit+0xee>
 8006d62:	8b7b      	ldrh	r3, [r7, #26]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d145      	bne.n	8006df4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d6c:	881a      	ldrh	r2, [r3, #0]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d78:	1c9a      	adds	r2, r3, #2
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	3b01      	subs	r3, #1
 8006d86:	b29a      	uxth	r2, r3
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006d8c:	e032      	b.n	8006df4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	f003 0302 	and.w	r3, r3, #2
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	d112      	bne.n	8006dc2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006da0:	881a      	ldrh	r2, [r3, #0]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dac:	1c9a      	adds	r2, r3, #2
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	3b01      	subs	r3, #1
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006dc0:	e018      	b.n	8006df4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dc2:	f7fd f911 	bl	8003fe8 <HAL_GetTick>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	1ad3      	subs	r3, r2, r3
 8006dcc:	683a      	ldr	r2, [r7, #0]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d803      	bhi.n	8006dda <HAL_SPI_Transmit+0x160>
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dd8:	d102      	bne.n	8006de0 <HAL_SPI_Transmit+0x166>
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d109      	bne.n	8006df4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006df0:	2303      	movs	r3, #3
 8006df2:	e082      	b.n	8006efa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1c7      	bne.n	8006d8e <HAL_SPI_Transmit+0x114>
 8006dfe:	e053      	b.n	8006ea8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d002      	beq.n	8006e0e <HAL_SPI_Transmit+0x194>
 8006e08:	8b7b      	ldrh	r3, [r7, #26]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d147      	bne.n	8006e9e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	330c      	adds	r3, #12
 8006e18:	7812      	ldrb	r2, [r2, #0]
 8006e1a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e20:	1c5a      	adds	r2, r3, #1
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	b29a      	uxth	r2, r3
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006e34:	e033      	b.n	8006e9e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	f003 0302 	and.w	r3, r3, #2
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	d113      	bne.n	8006e6c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	330c      	adds	r3, #12
 8006e4e:	7812      	ldrb	r2, [r2, #0]
 8006e50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e56:	1c5a      	adds	r2, r3, #1
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	3b01      	subs	r3, #1
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006e6a:	e018      	b.n	8006e9e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e6c:	f7fd f8bc 	bl	8003fe8 <HAL_GetTick>
 8006e70:	4602      	mov	r2, r0
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	683a      	ldr	r2, [r7, #0]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d803      	bhi.n	8006e84 <HAL_SPI_Transmit+0x20a>
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e82:	d102      	bne.n	8006e8a <HAL_SPI_Transmit+0x210>
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d109      	bne.n	8006e9e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	e02d      	b.n	8006efa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d1c6      	bne.n	8006e36 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ea8:	69fa      	ldr	r2, [r7, #28]
 8006eaa:	6839      	ldr	r1, [r7, #0]
 8006eac:	68f8      	ldr	r0, [r7, #12]
 8006eae:	f000 f8bf 	bl	8007030 <SPI_EndRxTxTransaction>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d002      	beq.n	8006ebe <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2220      	movs	r2, #32
 8006ebc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d10a      	bne.n	8006edc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	617b      	str	r3, [r7, #20]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	617b      	str	r3, [r7, #20]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	617b      	str	r3, [r7, #20]
 8006eda:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d001      	beq.n	8006ef8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e000      	b.n	8006efa <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
  }
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3720      	adds	r7, #32
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006f02:	b480      	push	{r7}
 8006f04:	b083      	sub	sp, #12
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f10:	b2db      	uxtb	r3, r3
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	370c      	adds	r7, #12
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
	...

08006f20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b088      	sub	sp, #32
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	603b      	str	r3, [r7, #0]
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006f30:	f7fd f85a 	bl	8003fe8 <HAL_GetTick>
 8006f34:	4602      	mov	r2, r0
 8006f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f38:	1a9b      	subs	r3, r3, r2
 8006f3a:	683a      	ldr	r2, [r7, #0]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006f40:	f7fd f852 	bl	8003fe8 <HAL_GetTick>
 8006f44:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006f46:	4b39      	ldr	r3, [pc, #228]	@ (800702c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	015b      	lsls	r3, r3, #5
 8006f4c:	0d1b      	lsrs	r3, r3, #20
 8006f4e:	69fa      	ldr	r2, [r7, #28]
 8006f50:	fb02 f303 	mul.w	r3, r2, r3
 8006f54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f56:	e054      	b.n	8007002 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f5e:	d050      	beq.n	8007002 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f60:	f7fd f842 	bl	8003fe8 <HAL_GetTick>
 8006f64:	4602      	mov	r2, r0
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	69fa      	ldr	r2, [r7, #28]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d902      	bls.n	8006f76 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d13d      	bne.n	8006ff2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	685a      	ldr	r2, [r3, #4]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006f84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f8e:	d111      	bne.n	8006fb4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f98:	d004      	beq.n	8006fa4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fa2:	d107      	bne.n	8006fb4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fb2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fbc:	d10f      	bne.n	8006fde <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006fcc:	601a      	str	r2, [r3, #0]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006fdc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006fee:	2303      	movs	r3, #3
 8006ff0:	e017      	b.n	8007022 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d101      	bne.n	8006ffc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	3b01      	subs	r3, #1
 8007000:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	689a      	ldr	r2, [r3, #8]
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	4013      	ands	r3, r2
 800700c:	68ba      	ldr	r2, [r7, #8]
 800700e:	429a      	cmp	r2, r3
 8007010:	bf0c      	ite	eq
 8007012:	2301      	moveq	r3, #1
 8007014:	2300      	movne	r3, #0
 8007016:	b2db      	uxtb	r3, r3
 8007018:	461a      	mov	r2, r3
 800701a:	79fb      	ldrb	r3, [r7, #7]
 800701c:	429a      	cmp	r2, r3
 800701e:	d19b      	bne.n	8006f58 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3720      	adds	r7, #32
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	20000018 	.word	0x20000018

08007030 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b088      	sub	sp, #32
 8007034:	af02      	add	r7, sp, #8
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	9300      	str	r3, [sp, #0]
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	2201      	movs	r2, #1
 8007044:	2102      	movs	r1, #2
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f7ff ff6a 	bl	8006f20 <SPI_WaitFlagStateUntilTimeout>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d007      	beq.n	8007062 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007056:	f043 0220 	orr.w	r2, r3, #32
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	e032      	b.n	80070c8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007062:	4b1b      	ldr	r3, [pc, #108]	@ (80070d0 <SPI_EndRxTxTransaction+0xa0>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a1b      	ldr	r2, [pc, #108]	@ (80070d4 <SPI_EndRxTxTransaction+0xa4>)
 8007068:	fba2 2303 	umull	r2, r3, r2, r3
 800706c:	0d5b      	lsrs	r3, r3, #21
 800706e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007072:	fb02 f303 	mul.w	r3, r2, r3
 8007076:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007080:	d112      	bne.n	80070a8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	9300      	str	r3, [sp, #0]
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	2200      	movs	r2, #0
 800708a:	2180      	movs	r1, #128	@ 0x80
 800708c:	68f8      	ldr	r0, [r7, #12]
 800708e:	f7ff ff47 	bl	8006f20 <SPI_WaitFlagStateUntilTimeout>
 8007092:	4603      	mov	r3, r0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d016      	beq.n	80070c6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800709c:	f043 0220 	orr.w	r2, r3, #32
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80070a4:	2303      	movs	r3, #3
 80070a6:	e00f      	b.n	80070c8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00a      	beq.n	80070c4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	3b01      	subs	r3, #1
 80070b2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070be:	2b80      	cmp	r3, #128	@ 0x80
 80070c0:	d0f2      	beq.n	80070a8 <SPI_EndRxTxTransaction+0x78>
 80070c2:	e000      	b.n	80070c6 <SPI_EndRxTxTransaction+0x96>
        break;
 80070c4:	bf00      	nop
  }

  return HAL_OK;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3718      	adds	r7, #24
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	20000018 	.word	0x20000018
 80070d4:	165e9f81 	.word	0x165e9f81

080070d8 <memset>:
 80070d8:	4402      	add	r2, r0
 80070da:	4603      	mov	r3, r0
 80070dc:	4293      	cmp	r3, r2
 80070de:	d100      	bne.n	80070e2 <memset+0xa>
 80070e0:	4770      	bx	lr
 80070e2:	f803 1b01 	strb.w	r1, [r3], #1
 80070e6:	e7f9      	b.n	80070dc <memset+0x4>

080070e8 <__libc_init_array>:
 80070e8:	b570      	push	{r4, r5, r6, lr}
 80070ea:	4d0d      	ldr	r5, [pc, #52]	@ (8007120 <__libc_init_array+0x38>)
 80070ec:	4c0d      	ldr	r4, [pc, #52]	@ (8007124 <__libc_init_array+0x3c>)
 80070ee:	1b64      	subs	r4, r4, r5
 80070f0:	10a4      	asrs	r4, r4, #2
 80070f2:	2600      	movs	r6, #0
 80070f4:	42a6      	cmp	r6, r4
 80070f6:	d109      	bne.n	800710c <__libc_init_array+0x24>
 80070f8:	4d0b      	ldr	r5, [pc, #44]	@ (8007128 <__libc_init_array+0x40>)
 80070fa:	4c0c      	ldr	r4, [pc, #48]	@ (800712c <__libc_init_array+0x44>)
 80070fc:	f000 f818 	bl	8007130 <_init>
 8007100:	1b64      	subs	r4, r4, r5
 8007102:	10a4      	asrs	r4, r4, #2
 8007104:	2600      	movs	r6, #0
 8007106:	42a6      	cmp	r6, r4
 8007108:	d105      	bne.n	8007116 <__libc_init_array+0x2e>
 800710a:	bd70      	pop	{r4, r5, r6, pc}
 800710c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007110:	4798      	blx	r3
 8007112:	3601      	adds	r6, #1
 8007114:	e7ee      	b.n	80070f4 <__libc_init_array+0xc>
 8007116:	f855 3b04 	ldr.w	r3, [r5], #4
 800711a:	4798      	blx	r3
 800711c:	3601      	adds	r6, #1
 800711e:	e7f2      	b.n	8007106 <__libc_init_array+0x1e>
 8007120:	08008c38 	.word	0x08008c38
 8007124:	08008c38 	.word	0x08008c38
 8007128:	08008c38 	.word	0x08008c38
 800712c:	08008c3c 	.word	0x08008c3c

08007130 <_init>:
 8007130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007132:	bf00      	nop
 8007134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007136:	bc08      	pop	{r3}
 8007138:	469e      	mov	lr, r3
 800713a:	4770      	bx	lr

0800713c <_fini>:
 800713c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800713e:	bf00      	nop
 8007140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007142:	bc08      	pop	{r3}
 8007144:	469e      	mov	lr, r3
 8007146:	4770      	bx	lr
